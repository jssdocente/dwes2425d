{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Desarrollo Web en Entorno Servidor (DWES)","text":"<p>Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Desarrollo web en entorno servidor, que se imparte en el segundo curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Web.</p> <p>La duraci\u00f3n del m\u00f3dulo es de 160 horas lectivas, a raz\u00f3n de 8 horas semanales, y se desarrolla a lo largo de los dos primeros trimestres del curso. Se ha planificado bas\u00e1ndose en 4 sesiones de 2 horas lectivas por semana.</p> \u00bfQu\u00e9 voy a aprender? <ul> <li>A desarrollar aplicaciones web din\u00e1micas, que obtienen la informaci\u00f3n a partir de una base de datos.</li> <li>Analizar la estructura de una aplicaci\u00f3n cliente/servidor, separando el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio</li> <li>Obtener informaci\u00f3n a partir de los datos almacenados, as\u00ed como modificarlos.</li> <li>Utilizar frameworks de desarrollo web para agilizar el proceso de desarrollo.</li> <li>Crear servicios web para la comunicaci\u00f3n entre aplicaciones.</li> </ul> Resultados de Aprendizaje <ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> <li>Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del co\u0301digo en lenguajes de marcas.</li> <li>Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</li> <li>Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones.</li> <li>Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el co\u0301digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> <li>Desarrolla aplicaciones de acceso a almacenes de datos, aplicando medidas para mantener la seguridad y la integridad de la informaci\u00f3n.</li> <li>Desarrolla servicios Web analizando su funcionamiento e implantando la estructura de sus componentes.</li> <li>Genera p\u00e1ginas Web dina\u0301micas analizando y utilizando tecnolog\u00edas del servidor Web que a\u00f1adan co\u0301digo al lenguaje de marcas.</li> <li>Desarrolla aplicaciones Web hi\u0301bridas seleccionando y utilizando librer\u00edas de co\u0301digo y repositorios heterog\u00e9neos de informaci\u00f3n.</li> </ol> Contenidos b\u00e1sicos <p>Selecci\u00f3n de arquitecturas y herramientas de programaci\u00f3n:</p> <ul> <li>Modelos de ejecuci\u00f3n de c\u00f3digo en entornos cliente/servidor.</li> <li>Generaci\u00f3n din\u00e1mica de p\u00e1ginas web.</li> <li>Lenguajes de programaci\u00f3n y tecnolog\u00edas asociadas en entorno servidor.</li> <li>Integraci\u00f3n con los lenguajes de marcas.</li> <li>Integraci\u00f3n con los servidores web.</li> <li>Herramientas y frameworks de programaci\u00f3n. en entorno servidor.</li> </ul> <p>Inserci\u00f3n de c\u00f3digo en p\u00e1ginas web:</p> <ul> <li>Tecnolog\u00edas asociadas.</li> <li>Obtenci\u00f3n del lenguaje de marcas para mostrar en el cliente.</li> <li>Etiquetas para inserci\u00f3n de c\u00f3digo.</li> <li>Tipos de datos. Conversiones entre tipos de datos.</li> <li>Variables. Operadores. \u00c1mbitos de utilizaci\u00f3n.</li> </ul> <p>Programaci\u00f3n basada en lenguajes de marcas con c\u00f3digo embebido:</p> <ul> <li>Tomas de decisi\u00f3n.</li> <li>Bucles.</li> <li>Matrices (arrays).</li> <li>Tipos de datos compuestos.</li> <li>Funciones.</li> <li>Recuperaci\u00f3n y utilizaci\u00f3n de informaci\u00f3n proveniente del cliente web.</li> <li>Procesamiento de la informaci\u00f3n introducida en un formulario.</li> <li>Comentarios.</li> </ul> <p>Desarrollo de aplicaciones web utilizando c\u00f3digo embebido:</p> <ul> <li>Mantenimiento del estado.</li> <li>Almacenamiento y recuperaci\u00f3n de informaci\u00f3n en el cliente web.</li> <li>Seguridad: usuarios, perfiles, roles.</li> <li>Autentificaci\u00f3n de usuarios.</li> <li>Pruebas y depuraci\u00f3n.</li> </ul> <p>Generaci\u00f3n din\u00e1mica de p\u00e1ginas web:</p> <ul> <li>Mecanismos  de  separaci\u00f3n  de  la  l\u00f3gica  de  negocio.  Frameworks  web servidor.</li> <li>Controles de servidor.</li> <li>Mecanismos de generaci\u00f3n din\u00e1mica de la interface web.</li> <li>Programaci\u00f3n orientada a objetos. Patrones de dise\u00f1o.</li> <li>Prueba y documentaci\u00f3n del c\u00f3digo.</li> </ul> <p>Utilizaci\u00f3n de t\u00e9cnicas de acceso a datos:</p> <ul> <li>Establecimiento de conexiones.</li> <li>Recuperaci\u00f3n y edici\u00f3n de informaci\u00f3n.</li> <li>Utilizaci\u00f3n de conjuntos de resultados.</li> <li>Actualizaci\u00f3n y eliminaci\u00f3n de informaci\u00f3n proveniente de una base de datos.</li> <li>Utilizaci\u00f3n de otros or\u00edgenes de datos.</li> <li>Prueba y documentaci\u00f3n.</li> </ul> <p>Programaci\u00f3n de servicios web:</p> <ul> <li>Tecnolog\u00edas y protocolos implicados.</li> <li>Est\u00e1ndares y arquitecturas actuales. Formatos de intercambio de datos.</li> <li>Generaci\u00f3n de un servicio web.</li> <li>Interface de un servicio web.</li> <li>Consumo de un servicio web. Herramientas de prueba.</li> <li>Frameworks de documentaci\u00f3n.</li> </ul> <p>Generaci\u00f3n din\u00e1mica de p\u00e1ginas web interactivas:</p> <ul> <li>Tecnolog\u00edas y frameworks.</li> <li>Generaci\u00f3n din\u00e1mica de p\u00e1ginas interactivas.</li> <li>Obtenci\u00f3n remota de informaci\u00f3n.</li> <li>Modificaci\u00f3n de la estructura y contenido de la p\u00e1gina web.</li> </ul> <p>Desarrollo de aplicaciones web h\u00edbridas:</p> <ul> <li>Tecnolog\u00edas y frameworks.</li> <li>Reutilizaci\u00f3n de c\u00f3digo e informaci\u00f3n.</li> <li>Utilizaci\u00f3n de informaci\u00f3n proveniente de repositorios.</li> <li>Incorporaci\u00f3n de funcionalidades espec\u00edficas.</li> <li>Utilizaci\u00f3n de librer\u00edas de c\u00f3digo relacionadas con Big Data e inteligencia de negocios. Extracci\u00f3n, proceso y an\u00e1lisis de datos provenientes de repositorios.</li> <li>Prueba, depuraci\u00f3n y documentaci\u00f3n.</li> </ul>"},{"location":"index.html#unidades-didacticas-temporalizacion","title":"Unidades did\u00e1cticas / Temporalizaci\u00f3n","text":"<p>A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas. La primera evaluaci\u00f3n contendr\u00eda las unidades comprendidas entre la 1 y 5, y parte de la unidades 6. As\u00ed pues, desde la mitad de la  unidad 6 a la unidad 9 se ver\u00e1n en la segunda evaluaci\u00f3n.</p> Primera evaluaci\u00f3n <p>Duraci\u00f3n estimada: 72 sesiones</p> <ol> <li>Arquitecturas Web (4h)<ul> <li>Cliente/Servidor.</li> <li>MVC.</li> </ul> </li> <li>El lenguaje PHP (26h)<ul> <li>Condiciones y bucles.</li> <li>Arrays.</li> </ul> </li> <li>Orientaci\u00f3n a objetos con PHP (18h)<ul> <li>Clases y objetos</li> <li>Namespaces</li> <li>Excepciones</li> </ul> </li> <li>Programaci\u00f3n Web (12h)<ul> <li>Formularios.</li> <li>Cookies y sesi\u00f3n.</li> </ul> </li> <li>Herramientas Web (16h)<ul> <li>Composer.</li> <li>Uso de logs con Monolog.</li> <li>Webscraping.</li> <li>Documentaci\u00f3n con phpDocumentor.</li> <li>Pruebas con PhpUnit.</li> </ul> </li> </ol> Segunda evaluaci\u00f3n <p>Duraci\u00f3n estimada: 88 sesiones</p> <ol> <li>Acceso a datos (28h)<ul> <li>SQL</li> <li>PDO</li> <li>Ficheros CSV y PDF.</li> <li>ORM con Eloquent.</li> </ul> </li> <li>Frameworks PHP. Laravel b\u00e1sico (24h)<ul> <li>Rutas.</li> <li>Vistas.</li> <li>Migraciones e integraci\u00f3n con Eloquent.</li> </ul> </li> <li>Uso avanzado de Frameworks (22h)<ul> <li>Plantillas con Blade.</li> <li>Autenticaci\u00f3n y autorizaci\u00f3n.</li> <li>i18n.</li> </ul> </li> <li>Servicios REST (12h)<ul> <li>Producci\u00f3n y consumo.</li> <li>AJAX con JSON.</li> <li>Interacci\u00f3n con Vue.js.</li> </ul> </li> </ol>"},{"location":"index.html#evaluacion","title":"Evaluaci\u00f3n","text":"Instrumentos de calificaci\u00f3n <p>La nota de cada evaluaci\u00f3n se calcula mediante:</p> <ul> <li> <p>25% Trabajo en Clase / Actividades</p> <ul> <li>El trabajo en clase se eval\u00faa mediante la observaci\u00f3n del profesor.</li> <li>En cada trimestre habr\u00e1 alguna/s Tareas Evaluables, a partir de las c\u00faales se obtendr\u00e1 esta parte de la calificaci\u00f3n.  con calificaciones comprendidas entre 0 y 10 puntos:<ul> <li>Las calificaciones estar\u00e1n comprendidas entre 0 y 10 puntos.</li> <li>Es necesario entregar las tareas antes de la fecha m\u00e1xima, en caso contrario se considerar\u00e1 no entregada.</li> <li>Las tareas se podr\u00e1n recuperar en la fecha que el profesor determine, pero la calificaci\u00f3n ser\u00e1 de Apto o no Apto, en este caso.</li> <li>Para aprobar esta parte de la evaluaci\u00f3n es necesario obtener una nota media de 6 puntos.</li> </ul> </li> </ul> </li> <li> <p>75% Pruebas Teoria y Pr\u00e1ctica</p> <ul> <li>Una o dos pruebas por evaluaci\u00f3n.</li> <li>Recuperaci\u00f3n:<ul> <li>Para la recuperar la 1\u00aa evaluaci\u00f3n se har\u00e1 una prueba de recuperaci\u00f3n entre la 2\u00ba y 3\u00aa semana de Enero.</li> <li>Para recuperar la 2\u00aa evaluaci\u00f3n se har\u00e1 en la Evaluaci\u00f3n Final Ordinaria.</li> <li>En caso de no superar el curso en la Evaluaci\u00f3n Final Ordinaria, se podr\u00e1 recuperar en la Evaluaci\u00f3n Final Extraordinaria.</li> </ul> </li> </ul> </li> </ul> <p>La evaluaci\u00f3n ser\u00e1 continua.</p>"},{"location":"index.html#recursos","title":"Recursos","text":"Recursos del m\u00f3dulo Documentaci\u00f3nSoftwareCursos Openwebinars <ul> <li> <p>Tutoriales</p> <ul> <li>Tutorial para principiantes</li> </ul> </li> <li> <p>Referencias</p> <ul> <li>Documentaci\u00f3n oficional PHP</li> </ul> </li> <li> <p>Recopilatorio</p> <ul> <li>Awesome PHP</li> </ul> </li> </ul> <ul> <li>IDEs<ul> <li>Visual Studio Code</li> <li>PHPStorm</li> </ul> </li> <li>Administraci\u00f3n de bases de datos<ul> <li>DBeaver</li> </ul> </li> <li> <p>Entorno de desarrollo</p> <ul> <li>Laragon</li> <li>XAMPP</li> </ul> </li> <li> <p>Entorno de desarrollo en contenedores</p> <ul> <li>Docker: Devilbox</li> <li>Docker: Laradock</li> </ul> </li> </ul> <ul> <li>PHP:<ul> <li>PHP: fundamentos</li> <li>PHP: Ampliando conceptos</li> <li>PHP y MySQL: Creando sitios din\u00e1micos</li> </ul> </li> <li>Frameworks:<ul> <li>Desarrollo Web Moderno con Laravel: De la teor\u00eda a la pr\u00e1ctica</li> </ul> </li> </ul>"},{"location":"01arquitecturas.html","title":"Arquitecturas Web","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 4 sesiones</p> <p>Resultado de aprendizaje:</p> <ol> <li>Selecciona las arquitecturas y tecnolog\u00edas de programaci\u00f3n Web en entorno servidor, analizando sus capacidades y caracter\u00edsticas propias.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han caracterizado y diferenciado los modelos de ejecuci\u00f3n de c\u00f3digo en el servidor y en el cliente Web.</li> <li>Se han reconocido las ventajas que proporciona la generaci\u00f3n din\u00e1mica de p\u00e1ginas Web y sus diferencias con la inclusi\u00f3n de sentencias de guiones en el interior de las p\u00e1ginas Web.</li> <li>Se han identificado los mecanismos de ejecuci\u00f3n de c\u00f3digo en los servidores Web.</li> <li>Se han reconocido las funcionalidades que aportan los servidores de aplicaciones y su integraci\u00f3n con los servidores Web.</li> <li>Se han identificado y caracterizado los principales lenguajes y tecnolog\u00edas relacionados con la programaci\u00f3n Web en entorno servidor.</li> <li>Se han verificado los mecanismos de integraci\u00f3n de los lenguajes de marcas con los lenguajes de programaci\u00f3n en entorno servidor.</li> <li>Se han reconocido y evaluado las herramientas de programaci\u00f3n en entorno servidor.</li> </ol> Objetivos del tema <p>Se trata de que concozcas todos los elementos que se pueden encontrar en una aplicaci\u00f3n web y en la arqutectura web de un servicio, adem\u00e1s de los tipos de aplicaciones web que existen.</p> <ol> <li>Entender la diferencia entre la infraestructura internet y los servicios web</li> <li>Conocer las diferentes partes de una arquitectura web</li> <li>Entender los conceptos previos de las aplicaciones web.</li> <li>Comprender los tipos de aplicaciones web que se pueden desarrollar.</li> <li>Conocer las tecnolog\u00edas que se utilizan en el desarrollo de aplicaciones web y los tipos de lenguajes existentes m\u00e1s utilizados.</li> </ol> <p>Las arquitecturas web definen la forma en que las p\u00e1ginas de un sitio web est\u00e1n estructuradas y enlazadas entre s\u00ed. Las aplicaciones web se basan en en modelo cliente-servidor.</p>"},{"location":"01arquitecturas.html#internet-y-la-web-no-es-lo-mismo","title":"Internet y la Web (no es lo mismo)","text":"<ol> <li>Repaso (se ve en PAR - Planificaci\u00f3n y Administraci\u00f3n de Redes)</li> <li> <p>Son cosas diferentes:</p> <ol> <li>Internet (Infraestuctura)</li> <li>Web (Servicios)</li> </ol> </li> <li> <p>Infraestructura Internet: TCP/IP + Servicios</p> </li> <li>Recordar los est\u00e1ndares (y las organizaciones)</li> <li>El protocolo HTTP</li> </ol> Aprender conceptos m\u00e1s que c\u00f3digo <p>Esta la la clave principal para ser un buen programador. Aprender a programar es f\u00e1cil, pero entender los conceptos y saber aplicarlos es lo que te har\u00e1 destacar.</p> <p> </p>"},{"location":"01arquitecturas.html#modelo-cliente-servidor","title":"Modelo Cliente / Servidor","text":"Arquitectura Cliente Servidor <p>Uno o varios cliente acceden a un servidor. La nuevas arquitecturas sustituyen el servidor por un balanceador de carga de manera que N servidores dan respuesta a M clientes.</p> <p>En las aplicaciones web, el cliente es el navegador web.</p> <p>El cliente hace la petici\u00f3n (request normalmente mediante el protocolo GET mediante el puerto 80/443) y el servidor responde (response).</p>"},{"location":"01arquitecturas.html#pagina-web-dinamica","title":"P\u00e1gina web din\u00e1mica","text":"<p>Si la p\u00e1gina web \u00fanicamente contiene HTML + CSS se considera una p\u00e1gina est\u00e1tica. Para generar una p\u00e1gina din\u00e1mica, donde el contenido cambia, a d\u00eda de hoy tenemos dos alternativas:</p> <ul> <li>Utilizar un lenguaje de servidor que genere el contenido, ya sea mediante el acceso a una BD o servicios externos.</li> <li>Utilizar servicios REST de terceros o propios invocados desde JS.</li> </ul> P\u00e1gina web din\u00e1mica <p>Las tecnolog\u00edas empleadadas (y los perfiles de desarrollo asociados) para la generaci\u00f3n de p\u00e1ginas din\u00e1micas son:</p> Perfil Herramienta Tecnolog\u00eda Front-end / cliente Navegador Web HTML + CSS + JavaScript Back-end / servidor Servidor Web + Servidor Aplicaciones +  BBDD PHP, Python, Ruby, Java / JSP, .Net / .asp <p>Perfil Full-stack</p> <p>En las ofertas de trabajo cuando hacen referencia a un Full-stack developer, est\u00e1n buscando un perfil que domina tanto el front-end como el back-end.</p>"},{"location":"01arquitecturas.html#single-page-application","title":"Single Page Application","text":"<p>A d\u00eda de hoy, gran parte del desarrollo web est\u00e1 transicionando de una arquitectura web cliente-servidor cl\u00e1sica donde el cliente realiza una llamada al backend, por una arquitectura SPA donde el cliente gana mucho mayor peso y sigue una programaci\u00f3n reactiva que accede a servicios remotos REST que realizan las operaciones (comunicandose mediante JSON).</p> Arquitectura tradicional vs SPA SPA En detalle <p>Si quires profundizar en este tema de las aplicaciones SPA, puedes consultar los siguientes recursos:</p> <ul> <li>Aplicaciones SPA vs Aplicaciones MPA</li> <li>SPA Wikipedia</li> <li>\u00bfQu\u00e9 es una SPA en programaci\u00f3n?</li> </ul>"},{"location":"01arquitecturas.html#client-side-rendering-vs-server-side-rendering","title":"Client Side Rendering vs Server Side Rendering","text":"<p>En el desarrollo de aplicaciones web, se pueden distinguir dos formas de renderizar el contenido de una p\u00e1gina web:</p> <ul> <li>Client Side Rendering (CSR): El contenido de la p\u00e1gina se renderiza en el cliente, es decir, en el navegador del usuario. La p\u00e1gina se carga en blanco y, a medida que se van recibiendo los datos, se va mostrando el contenido. Es la t\u00e9cnica m\u00e1s utilizada en aplicaciones web modernas, ya que permite una mayor interactividad y una mejor experiencia de usuario.</li> <li>Server Side Rendering (SSR): El contenido de la p\u00e1gina se renderiza en el servidor y se env\u00eda al cliente ya renderizado. La p\u00e1gina se carga con todo el contenido visible, lo que permite una carga m\u00e1s r\u00e1pida y un mejor SEO. Es la t\u00e9cnica m\u00e1s utilizada en aplicaciones web tradicionales.</li> <li>Hybrid Rendering: Es una combinaci\u00f3n de las dos t\u00e9cnicas anteriores. La p\u00e1gina se renderiza en el servidor y en el cliente, lo que permite una carga r\u00e1pida y una mayor interactividad.</li> </ul>"},{"location":"01arquitecturas.html#comparativa","title":"Comparativa","text":"Caracter\u00edstica Client Side Rendering Server Side Rendering Carga inicial M\u00e1s lenta M\u00e1s r\u00e1pida Interactividad Mayor Menor SEO Menor Mayor Tiempo de carga Mayor Menor Experiencia de usuario Mejor Peor"},{"location":"01arquitecturas.html#tipos-de-aplicaciones-web","title":"Tipos de aplicaciones web","text":"Tipo de aplicaci\u00f3n Descripci\u00f3n Est\u00e1ticas Son p\u00e1ginas web que no cambian su contenido en funci\u00f3n de la interacci\u00f3n del usuario. Son p\u00e1ginas web que no requieren de una base de datos para funcionar. Din\u00e1micas Son p\u00e1ginas web que cambian su contenido en funci\u00f3n de la interacci\u00f3n del usuario. Son p\u00e1ginas web que requieren de una base de datos para funcionar. Interactivas Son p\u00e1ginas web que permiten al usuario interactuar con el contenido de la p\u00e1gina. Son p\u00e1ginas web que requieren de una base de datos para funcionar. Transaccionales Son p\u00e1ginas web que permiten al usuario realizar transacciones, como compras o reservas. Son p\u00e1ginas web que requieren de una base de datos para funcionar. Colaborativas Son p\u00e1ginas web que permiten a varios usuarios colaborar en la creaci\u00f3n de contenido. Son p\u00e1ginas web que requieren de una base de datos para funcionar. Adaptativas Son p\u00e1ginas web que se adaptan a las caracter\u00edsticas del dispositivo del usuario. Client Side Rendering vs Server Side Rendering <p>Para profundizar en este tema, puedes consultar los siguientes recursos:</p> <ul> <li>Client Side Rendering vs Server Side Rendering</li> <li>CSR vs SSR presentaci\u00f3n</li> </ul>"},{"location":"01arquitecturas.html#arquitectura-de-3-capas","title":"Arquitectura de 3 capas","text":"<p>Hay que distinguir entre capas f\u00edsicas (tier) y capas l\u00f3gicas (layer).</p> V\u00eddeo: N-Layers Vs N-Tiers <p>En este v\u00eddeo se explica la diferencia entre capas f\u00edsicas y l\u00f3gicas en una arquitectura de software.</p> <p></p>"},{"location":"01arquitecturas.html#tier","title":"Tier","text":"<p>Capa f\u00edsica de una arquitectura. Supone un nuevo elemento hardware separado f\u00edsicamente. Las capas f\u00edsicas m\u00e1s alejadas del cliente est\u00e1n m\u00e1s protegidas, tanto por firewalls como por VPN.</p> <p>Ejemplo de arquitectura en tres capas f\u00edsicas (3 tier):</p> <ul> <li>Servidor Web</li> <li>Servidor de Aplicaciones</li> <li>Servidor de base de datos</li> </ul> Arquitectura de tres capas f\u00edsicas <p>Cluster en tiers</p> <p>No confundir las capas con la cantidad de servidores. Actualmente se trabaja con arquitecturas con m\u00faltiples servidores en una misma capa f\u00edsica mediante un cluster, para ofrecer tolerancia a errores y escalabilidad horizontal.</p>"},{"location":"01arquitecturas.html#layer","title":"Layer","text":"<p>En cambio, las capas l\u00f3gicas (layers) organizan el c\u00f3digo respecto a su funcionalidad:</p> <ul> <li>Presentaci\u00f3n</li> <li>Negocio / Aplicaci\u00f3n / Proceso</li> <li>Datos / Persistencia</li> </ul> <p>Como se observa, cada una de las capas se puede implementar con diferentes lenguajes de programaci\u00f3n y/o herramientas.</p> Arquitectura de tres capas f\u00edsicas en tres l\u00f3gicas"},{"location":"01arquitecturas.html#mvc","title":"MVC","text":"<p>Model-View-Controller o Modelo-Vista-Controlador es un modelo de arquitectura que separa los datos y la l\u00f3gica de negocio respecto a la interfaz de usuario y el componente encargado de gestionar los eventos y las comunicaciones.</p> <p>Al separar los componentes en elementos conceptuales permite reutilizar el c\u00f3digo y mejorar su organizaci\u00f3n y mantenimiento. Sus elementos son:</p> <ul> <li>Modelo: representa la informaci\u00f3n y gestiona todos los accesos a \u00e9sta, tanto consultas como actualizaciones provenientes, normalmente, de una base de datos. Se accede via el controlador.</li> <li>Controlador: Responde a las acciones del usuario, y realiza peticiones al modelo para solicitar informaci\u00f3n. Tras recibir la respuesta del modelo, le env\u00eda los datos a la vista.</li> <li>Vista: Presenta al usuario de forma visual el modelo y los datos preparados por el controlador. El usuario interactura con la vista y realiza nuevas peticiones al controlador.</li> </ul> <p>Lo estudiaremos en m\u00e1s detalle al profundizar en el uso de los frameworks PHP.</p>"},{"location":"01arquitecturas.html#decisiones-de-diseno","title":"Decisiones de dise\u00f1o","text":"<ul> <li>\u00bfQu\u00e9 tama\u00f1o tiene el proyecto?</li> <li>\u00bfQu\u00e9 lenguajes de programaci\u00f3n conozco? \u00bfVale la pena el esfuerzo de aprender uno nuevo?</li> <li>\u00bfVoy a usar herramientas de c\u00f3digo abierto o herramientas propietarias? \u00bfCu\u00e1l es el coste de utilizar soluciones comerciales?</li> <li>\u00bfVoy a programar la aplicaci\u00f3n yo solo o formar\u00e9 parte de un grupo de programadores?</li> <li>\u00bfCuento con alg\u00fan servidor web o gestor de base de datos disponible o puedo decidir libremente utilizar el que crea necesario?</li> <li>\u00bfQu\u00e9 tipo de licencia voy a aplicar a la aplicaci\u00f3n que desarrolle?</li> </ul>"},{"location":"01arquitecturas.html#herramientas","title":"Herramientas","text":""},{"location":"01arquitecturas.html#servidor-web","title":"Servidor Web","text":"<p>Software que recibe peticiones HTTP (GET, POST, DELETE, ...). Devuelve el recurso solicitado (HTML, CSS, JS, JSON, im\u00e1genes, etc...)</p> <p>Un servidor web es una tecnolog\u00eda que aloja el c\u00f3digo y los datos de un sitio web. Al ingresar una URL en el navegador, la URL es en realidad el identificador de direcci\u00f3n del servidor web. El servidor web recibe la solicitud y devuelve el contenido de la p\u00e1gina web al navegador del usuario.</p> <p>Su navegador y servidor web se comunican de la siguiente manera:</p> <ol> <li>El navegador usa la URL para encontrar la direcci\u00f3n IP del servidor.</li> <li>El navegador env\u00eda una solicitud HTTP de informaci\u00f3n.</li> <li>El servidor web se comunica con un servidor de base de datos para encontrar los datos relevantes.</li> <li>El servidor web devuelve contenido est\u00e1tico, como p\u00e1ginas HTML, im\u00e1genes, videos o archivos, en una respuesta HTTP al navegador.</li> <li>A continuaci\u00f3n, el navegador le mostrar\u00e1 la informaci\u00f3n.</li> </ol> <p>Un sitio web que aloja contenido est\u00e1tico, como blogs, im\u00e1genes de encabezado o art\u00edculos, puede ejecutarse en un servidor web. Sin embargo, la mayor\u00eda de los sitios web y aplicaciones web son mucho m\u00e1s interactivos y requieren un servidor de aplicaciones.</p> En profundidad: Servidores Web Servidores Web mas popularesApache vs Nginx <p>Algunos de los servidores web m\u00e1s utilizados son los siguientes:</p> <ul> <li> <p>Servidor HTTP Apache <p>Es un servidor web gratuito y de c\u00f3digo abierto que se utiliza en muchos sistemas operativos, como Windows, Linux y Mac OS X. Apache es el software de servidor web m\u00e1s antiguo y uno de los m\u00e1s utilizados por los propietarios de p\u00e1ginas web, desarrolladores y proveedores de hosting, con una cuota de mercado de m\u00e1s del 31%.</p> <li> <p>NGINX</p> <p>Es un famoso software de servidor web de c\u00f3digo abierto que inicialmente s\u00f3lo funcionaba para el servicio web HTTP. Ahora tambi\u00e9n se utiliza como proxy inverso, balanceador de carga HTTP y proxy de correo electr\u00f3nico.</p> <p>NGINX es conocido por su velocidad y su capacidad para manejar m\u00faltiples conexiones, por lo que muchos sitios web de alto tr\u00e1fico utilizan sus servicios.</p> </li> <li> <p>IIS: (Internet Information Services) de Microsoft <p>IIS es un software de servidor web cerrado desarrollado por Microsoft y ampliamente utilizado en los sistemas operativos Windows.</p> <li> <p>Lighttpd <p>Es un software de servidor web gratuito y de c\u00f3digo abierto que es conocido por su velocidad y por requerir menos potencia de la CPU. Lighttpd tambi\u00e9n es popular por tener una peque\u00f1a huella de memoria.</p> <p>En el \u00e1mbito del hosting, los distintos hosts soportan diferentes tipos de servidores web. Por ejemplo, Hostinger soporta tanto Apache como NGINX, los dos servidores web l\u00edderes en el mercado.</p> <p>\u00bf Cu\u00e1l es la diferencia entre Apache y Nginx ?</p> <p>Similaridades</p> <ul> <li>Ambos son servidores web de c\u00f3digo abierto.</li> <li>Amplia comunidad de usuarios y desarrolladores.</li> <li>Permiten agregar funcionalidad a trav\u00e9s de m\u00f3dulos.</li> <li>Ambos permiten actuar como servidor proxy, permite pasar informaci\u00f3n a otras aplicaciones y devolver esta informaci\u00f3n al usuario (cliente).</li> <li>Procesamiento basado en eventos para conexiones simulateneas (\u00faltimas versiones de apache).</li> </ul> <p>Diferencias</p> Puntos Apache Nginx Configuraci\u00f3n Sintaxis XML Sintaxis estilo C Configuraci\u00f3n Fichero .htaccess configuraci\u00f3n distribuida en muchas carpetas Bloques de configuraci\u00f3n en un \u00fanico fichero Contenido din\u00e1mico Nativamente procesado con m\u00f3dulos, eliminando la necesidad de otras aplicaciones (PHP, Perl, Python, ...) Requiere de procesamiento externo a trav\u00e9s de otras aplicaciones Contenido est\u00e1tico Menos eficiente M\u00e1s eficiente (m\u00e1s del doble de r\u00e1pido) Cache y balanceo de carga A trav\u00e9s de m\u00f3dulos (conf. compleja) Capacidades nativas (sencilla) <p>Comparativa de servidores web</p> <p>https://w3techs.com/technologies/history_overview/web_server/ms/q</p>"},{"location":"01arquitecturas.html#servidor-de-aplicaciones","title":"Servidor de Aplicaciones","text":"<p>Un servidor de aplicaciones ampl\u00eda las capacidades de un servidor web, pues admite la generaci\u00f3n de contenido din\u00e1mico, la l\u00f3gica de la aplicaci\u00f3n y la integraci\u00f3n con varios recursos. Proporciona un entorno de tiempo de ejecuci\u00f3n en el que puede ejecutar el c\u00f3digo de la aplicaci\u00f3n e interactuar con otros componentes de software, como los sistemas de mensajer\u00eda y las bases de datos. Utiliza la l\u00f3gica empresarial para transformar los datos de manera m\u00e1s significativa que un servidor web.</p> <ul> <li> <p>Ofrece servicios adicionales a los de un servidor web:</p> <ul> <li>Clustering</li> <li>Balanceo de carga</li> <li>Tolerancia a fallos</li> <li>...</li> </ul> </li> <li> <p>Tomcat (http://tomcat.apache.org/) es el servidor de aplicaciones open source y multiplataforma de referencia para una arquitectura Java.</p> <ul> <li>Contiende un contenedor Web Java que interpreta Servlets y JSP.</li> </ul> </li> </ul> En profundidad: Servidores de Aplicaciones Diferencias claveResumenFuncionamiento conjunto <p>Servidor Web</p> <ul> <li>Un servidor web es un software que se ejecuta en un servidor y que responde a las solicitudes de los clientes a trav\u00e9s del protocolo HTTP.</li> <li>Un servidor web sirve contenido est\u00e1tico, como p\u00e1ginas HTML, im\u00e1genes y archivos.</li> <li>Los servidores web m\u00e1s populares son Apache y Nginx.</li> <li>Los servidores web son ideales para sitios web peque\u00f1os y est\u00e1ticos.</li> </ul> <p>Servidor de Aplicaciones</p> <ul> <li>Un servidor de aplicaciones es un software que se ejecuta en un servidor y que responde a las solicitudes de los clientes a trav\u00e9s de protocolos m\u00e1s complejos.</li> <li>Un servidor de aplicaciones sirve contenido din\u00e1mico, como aplicaciones web y servicios web.</li> <li>Los servidores de aplicaciones son ideales para aplicaciones web complejas y din\u00e1micas.</li> <li>Los servidores de aplicaciones m\u00e1s populares son Tomcat, JBoss y WebSphere.</li> </ul> Conceptos Servidor web Servidor de aplicaciones Tareas realizadas Los servidores web ofrecen respuestas a solicitudes sencillas. Un servidor de aplicaciones ofrece contenido m\u00e1s complejo de bases de datos, servicios y sistemas empresariales. Protocolos utilizados Los servidores web utilizan principalmente HTTP. Tambi\u00e9n admiten FTP y SMTP. Los servidores de aplicaciones admiten muchos protocolos. Tipos de contenidos Los servidores web ofrecen contenido est\u00e1tico, como p\u00e1ginas HTML, im\u00e1genes, videos y archivos. Los servidores de aplicaciones ofrecen contenido din\u00e1mico, como actualizaciones en tiempo real, informaci\u00f3n personalizada y atenci\u00f3n al cliente. Subprocesamiento m\u00faltiple No suele utilizar subprocesos m\u00faltiples. Utiliza subprocesos m\u00faltiples para procesar solicitudes de forma simult\u00e1nea. <p>Los servidores de aplicaciones y los servidores web trabajan juntos para administrar las solicitudes de los clientes y ofrecer el contenido correcto al usuario. El servidor web siempre recibe primero una nueva solicitud. Si puede producir la informaci\u00f3n por s\u00ed mismo, lo hace y env\u00eda una respuesta HTTP. Tambi\u00e9n comprueba que los datos que el usuario solicit\u00f3 no est\u00e9n ya en su cach\u00e9.</p> <p>Si el servidor web no puede acceder al contenido que el usuario necesita, reenv\u00eda la solicitud al servidor de aplicaciones. El servidor de aplicaciones procesa los datos y utiliza la l\u00f3gica empresarial para proporcionar la informaci\u00f3n correcta. A continuaci\u00f3n, devuelve la solicitud al servidor web, que la pasa al usuario. En ciertas arquitecturas, tambi\u00e9n puede configurar los servidores de aplicaciones para que gestionen las solicitudes HTTP por s\u00ed mismos.    </p> <p></p> <p>\ud83d\udca1Tanto los servidores web como los servidores de aplicaciones se estudian en profundidad en el m\u00f3dulo de \"Despliegue de Aplicaciones Web\".</p>"},{"location":"01arquitecturas.html#lenguajes-en-el-servidor","title":"Lenguajes en el servidor","text":"<p>Las aplicaciones que generan las p\u00e1ginas web se programan en alguno de los siguientes lenguajes:</p> <ul> <li>PHP</li> <li>JavaEE: Servlets / JSP</li> <li>Python</li> <li>ASP.NET \u2192 Visual Basic .NET / C#</li> <li>Ruby</li> <li>...</li> </ul>"},{"location":"01arquitecturas.html#javaee","title":"JavaEE","text":"<p>Java Enterprise Edition es la soluci\u00f3n Java para el desarrollo de aplicaciones enterprise. Ofrece una arquitectura muy completa y compleja, escalable y tolerante a fallos. Planteada para aplicaciones para grandes sistemas.</p> <p></p>"},{"location":"01arquitecturas.html#net","title":".NET","text":"<ul> <li>Plataforma de desarrollo de Microsoft</li> <li>Utiliza el lenguaje C# o Visual Basic .NET</li> <li>Utiliza el servidor de aplicaciones IIS</li> <li>Se basa en el framework .NET (.Net Core en la actualidad)</li> <li>Permite el desarrollo de aplicaciones web, de escritorio y m\u00f3viles</li> <li>Para la web, se utiliza ASP.NET, que es un framework para el desarrollo de aplicaciones web</li> <li>ASP.NET MVC (Modelo Vista Controlador)</li> <li>ASP.NET Web API (servicios web)</li> <li>ASP.NET SignalR (comunicaci\u00f3n en tiempo real)</li> <li>ASP.NET Blazor (Las aplicaciones web se desarrollan en C# y se ejecutan en el navegador)</li> </ul>"},{"location":"01arquitecturas.html#ruby","title":"Ruby","text":"<ul> <li>Lenguaje de programaci\u00f3n interpretado</li> <li>Desarrollado por Yukihiro Matsumoto en 1995</li> <li>Inspirado en Perl, Smalltalk, Eiffel, Ada y Lisp</li> <li>Framework Ruby on Rails</li> <li>Utilizado por GitHub, Twitter, Airbnb, Shopify, ...</li> </ul>"},{"location":"01arquitecturas.html#nodejs","title":"Node.js","text":"<ul> <li>Entorno de ejecuci\u00f3n de JavaScript en el servidor</li> <li>Basado en el motor V8 de Google</li> <li>Desarrollado por Ryan Dahl en 2009</li> <li>Utilizado por Netflix, Uber, LinkedIn, PayPal, ...</li> <li>Frameworks: Express, Koa, Hapi, Sails, Meteor, NestJS, ...</li> <li>Permite el desarrollo de aplicaciones web, de escritorio y m\u00f3viles</li> </ul>"},{"location":"01arquitecturas.html#php","title":"PHP","text":"<ul> <li>Lenguaje de prop\u00f3sito general dise\u00f1ado para el desarrollo de p\u00e1ginas web din\u00e1micas</li> <li>En un principio, lenguaje no tipado.</li> <li>Actualmente en la versi\u00f3n 8. Se recomienda al menos utilizar una versi\u00f3n superior a la 7.0.</li> <li>C\u00f3digo embebido en el HTML</li> <li>Instrucciones entre etiquetas <code>&lt;?php</code> y <code>?&gt;</code><ul> <li>Para generar codigo dentro de PHP, podemos usar la instrucci\u00f3n <code>echo</code></li> </ul> </li> <li>Multitud de librer\u00edas y frameworks:<ul> <li>Laravel, Symfony, Codeigniter, Zend</li> </ul> </li> </ul> <p>Su documentaci\u00f3n es bastante completa: https://www.php.net/manual/es/index.php</p> <p>El siguiente mapa mental muestra un resumen de sus elementos:</p> Elementos del lenguaje PHP <p>Durante las siguientes unidades vamos a estudiar PHP en profundidad.</p> <p>Actividades</p> <ol> <li> <p>40 preguntas sobre Internet Kahoot</p> </li> <li> <p>Trabajo sobre servidores web</p> <ol> <li>Busca en internet la historia de Apache y redacta un resumen de la misma (con tus palabras), varios parr\u00e1fos.</li> <li>Busca en internet la historia de Nginx..</li> </ol> </li> <li> <p>Busca en internet cuales son los tres frameworks PHP m\u00e1s utilizados, y indica:</p> <ul> <li>Nombre y URL</li> <li>A\u00f1o de creaci\u00f3n</li> <li>\u00daltima versi\u00f3n</li> </ul> </li> <li> <p>Busca tres ofertas de trabajo de desarrollo de software en Infojobs o Manfred que citen PHP y anota:</p> <ul> <li>Empresa + puesto + frameworks PHP + requ\u00edsitos + sueldo + enlace a la oferta.</li> </ul> </li> <li> <p>Tecnolog\u00edas Web</p> <ol> <li>\u00bf Donde puede ver las especificaciones de HTML ?</li> <li>\u00bf Y de CSS ?</li> <li>\u00bf Y de Javascript ?</li> <li>\u00bf C\u00faal es la \u00faltima versi\u00f3n de cada uno de ellos ?</li> <li>\u00bf Sabr\u00edas distinguir un servidor web de un servidor de aplicaciones ?</li> <li>El servidor de aplicaciones, el web y el de base de datos, \u00bftienen que estar en la mimsa m\u00e1quina ? \u00bfen la misma red?</li> </ol> </li> </ol>"},{"location":"01arquitecturas.html#puesta-en-marcha","title":"Puesta en marcha","text":"<p>Para poder trabajar con un entorno de desarrollo local, hemos de preparar nuestro entorno de desarrollo con todo lo necesario, y esto no es trivial al principio.</p> <p>Este es un punto muy importante, ya vamos a necesitar una serie de recursos, tanto IDEs (y sus plugins) como el propio PHP, BDs, servidores web y aplicaciones, etc. para poder trabajar en el curso. Otro punto clave es el sistema operativo, ya que no es lo mismo trabajar en Windows que en Linux o en MacOS. Los entornos m\u00e1s comunes son Windows y Linux (MacOS), para los que existe m\u00e1s herramientas y recursos.</p> <p>\ud83d\udca1\u00bfPor qu\u00e9 necesito un entorno de desarrollo local? Este video explica la importancia de tener un entorno de desarrollo local y c\u00faal elegir para PHP.</p> <p>Entorno de desarrollo con Docker</p> <p>Docker es una herramienta muy importante en el desarrollo de software (y fundamental en Web), ya que nos permite crear contenedores con los servicios necesarios para trabajar, testear diferentes entornos sin afectar al entorno local, pero por su complejidad vamos a empezar con un entorno de desarrollo m\u00e1s sencillo, m\u00e1s automatizado y donde nos centremos en el c\u00f3digo y no en la infraestructura.</p> <p>Existen opciones ya implementadas para trabajar con Docker, como Laradock, DevilBox que utilizaremos m\u00e1s adelante en el curso.</p>"},{"location":"01arquitecturas.html#xampp","title":"XAMPP","text":"<p>XAMPP es una distribuci\u00f3n compuesta con el software necesario para desarrollar en entorno servidor. Se compone de las siguientes herramientas en base a sus siglas:</p> <ul> <li>X para el sistema operativo (de ah\u00ed que se conozca tamnbi\u00e9n como LAMP o WAMP).</li> <li>A para Apache.</li> <li>M para MySQL / MariaDB. Tambi\u00e9n incluye phpMyAdmin para la administraci\u00f3n de la base de datos desde un interfaz web.</li> <li>P para PHP.</li> <li>la \u00faltima P para Perl.</li> </ul> <p>Desde la propia p\u00e1gina se puede descargar el archivo ejecutable para el sistema operativo de nuestro ordenador. Se recomienda leer la FAQ de cada sistema operativo con instrucciones para su puesta en marcha.</p> <p>\ud83d\udd25 XAMP tiene ya unos a\u00f1os, y aunque es una soluci\u00f3n, no es la m\u00e1s sencilla ni m\u00e1s flexible, adem\u00e1s suele ser bastante opaca en cuanto a la configuraci\u00f3n de los servicios, y si da problemas, no es f\u00e1cil de solucionar.</p>"},{"location":"01arquitecturas.html#laragon","title":"Laragon","text":"<p>Laragon (https://laragon.org/) es una herramienta similar a XAMPP (solo para Windows) pero m\u00e1s moderna y con m\u00e1s opciones. Como dice su eslogan \"Productiva, Portable, R\u00e1pida, Efectiva y Sorprendente!!\".</p> <p>Otro punto importante es que Laragon sigue siendo mantenida, mientras que XAMPP no se actualiza desde hace tiempo.</p> <p>Pasos:</p> <ol> <li>Instalar Laragon</li> <li>Montar el entorno de desarrollo con Laragon</li> <li>Comprobar que todo funciona correctamente.</li> </ol>"},{"location":"01arquitecturas.html#entorno-de-desarrollo","title":"Entorno de desarrollo","text":"<p>En este curso vamos a emplear Visual Studio Code (https://code.visualstudio.com) como entorno de desarrollo (IDE), y m\u00e1s adelante tambi\u00e9n PhpStorm, que es sin duda la m\u00e1s usada y conocinda aunque es de pago (existe opci\u00f3n para estudiantes).</p> <p>VSCode es un editor de c\u00f3digo fuente que se complementa mediante extensiones. Para facilitar el trabajo a lo largo del curso vamos a utilizar las siguientes extensiones:</p> <ul> <li>PHP Intelephense</li> </ul> <p>\ud83d\udca1 Para PHP Intelephense es requerido desactivar la extensi\u00f3n propia que VSCode tiene para PHP.  1. Ir a extensiones, buscar por @builtin php, Desactvivar PHP Languaje Features, dejar PHP Languaje Basis para resaltar la sintaxis.</p> <p>En este tutorial (ingl\u00e9s) se explica c\u00f3mo configurar VSCode para trabajar con PHP.</p>"},{"location":"01arquitecturas.html#hola-mundo","title":"Hola Mundo","text":"<p>Y como no, nuestro primer ejemplo ser\u00e1 un Hola Mundo en PHP.</p> <p>Si nombramos el archivo como <code>index.php</code>, al acceder a <code>http://localhost</code> autom\u00e1ticamente cargar\u00e1 el resultado:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hola Mundo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n        echo \"Hola Mundo\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"01arquitecturas.html#referencias","title":"Referencias","text":"<ul> <li>Curso de introducci\u00f3n a Docker, por Sergi Garc\u00eda Barea : https://sergarb1.github.io/CursoIntroduccionADocker/</li> <li>Art\u00edculo Arquitecturas Web y su evoluci\u00f3n</li> </ul>"},{"location":"02.1_php_basico.html","title":"El lenguaje PHP","text":"<p>PHP es un lenguaje de programaci\u00f3n de prop\u00f3sito general, aunque su fuerte es el desarrollo web. </p> <p>Principales caracter\u00edsticas:</p> <ul> <li>Acr\u00f3nimo de Personal Home Page</li> <li>Sintaxis similar a C / Java</li> <li>Interpretado en el servidor</li> <li>Debilmente tipado (no es necesario declarar el tipo de dato de una variable antes de usarla)</li> </ul>"},{"location":"02.1_php_basico.html#tipado-dinamico-y-debil","title":"Tipado din\u00e1mico y debil","text":"<p>Un lenguaje es din\u00e1micamente tipado cuando es \u00e9l quien deduce el tipo de datos de las variables y no se lo tenemos que indicar nosotros. En el siguiente ejemplo vemos como PHP estar\u00eda deduciendo el tipo resultante de sumar un int y un string que contiene un entero:</p> <p>var_dump(1 + \"1\"); // Output: int(2)</p> <p>Al ser din\u00e1micamente tipado, adem\u00e1s de interpretado, PHP no tiene un proceso de compilaci\u00f3n, si no que es en tiempo de ejecuci\u00f3n cuando PHP valida si una determinada variable tiene un determinado m\u00e9todo, o no. Esto se conoce como Duck Typing:</p> <p>M\u00e1s adelante trataremos el tema de las variables y su tipado.</p>"},{"location":"02.1_php_basico.html#codigo-embebido","title":"C\u00f3digo embebido","text":"<p>Los bloques de c\u00f3digo se escriben entre <code>&lt;?php</code> y <code>?&gt;</code>, mientras que las sentencias se separan mediante <code>;</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;title&gt;PHP f\u00e1cil&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;!-- Muestra una frase con HTML --&gt;\nHola mundo&lt;br&gt;\n&lt;!-- Muestra una frase con PHP --&gt;\n&lt;?php echo \"Es muy f\u00e1cil programar en PHP.\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>S\u00f3lo etiquetas de apertura</p> <p>Si nuestro c\u00f3digo s\u00f3lo va a contener c\u00f3digo PHP y nada de html, como por ejemplo, cuando codifiquemos clases o interfaces, s\u00f3lo pondremos la etiqueta de apertura, para as\u00ed indicar que es una archivo de php puro.</p> <p>Compilador online</p> <p>Podemos probar online sin tener que configurar nada en local.</p>"},{"location":"02.1_php_basico.html#generando-contenido","title":"Generando contenido","text":"<p>Tenemos tres posibilidades a la hora de generar contenido en nuestros documentos PHP:</p> <ul> <li><code>echo</code><code>expresi\u00f3n;</code></li> <li><code>print</code><code>(expresi\u00f3n);</code></li> <li><code>&lt;?=</code><code>expresi\u00f3n ?&gt;</code></li> </ul> <p>Las que vamos a utilizar son <code>echo</code> cuando lo hagamos dentro de un bloque de instrucciones y <code>&lt;?=</code> cuando s\u00f3lo vayamos a mostrar el valor de una variable dentro de un fragmento HTML.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;Echo y print&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;&lt;?php echo \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?= \"Este texto se mostrar\u00e1 en la p\u00e1gina web.\" ?&gt;&lt;/p&gt;\n&lt;p&gt;&lt;?php print(\"Este texto se mostrar\u00e1 en la p\u00e1gina web.\") ?&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#comentarios","title":"Comentarios","text":"<p>Podemos utilizar comentarios de una l\u00ednea o de bloque:</p> <pre><code>&lt;?php\n// Este es un comentario de una sola l\u00ednea\n/*\n  Este es\n  un comentario\n  que ocupa\n  varias l\u00edneas\n*/ \n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#errores","title":"Errores","text":"<p>Si hay un error de ejecuci\u00f3n, se produce un Fatal Error.</p> <pre><code>Fatal error: Uncaught Error: Call to undefined function plint() in C:\\xampp\\htdocs\\202echo.php:11\n Stack trace:\n #0 {main}\n    thrown in C:\\xampp\\htdocs\\202echo.php on line 11\n</code></pre> <p>Desde PHP 5 se lanzan como una excepci\u00f3n. M\u00e1s adelante veremos el uso de <code>try</code> / <code>catch</code>.</p>"},{"location":"02.1_php_basico.html#variables","title":"Variables","text":"<ul> <li>No es necesario declararlas previamente.</li> <li>Comienzan por <code>$</code>, por ejemplo <code>$nombre</code>. Tras el <code>$</code>, el siguiente caracter debe ser una letra en min\u00fascula (recomendaci\u00f3n) o gui\u00f3n bajo <code>_</code>. Luego ya se pueden poner n\u00fameros.</li> <li>Son case sensitive: <code>$var != $vAR</code></li> <li>No se declara su tipo, el tipado es din\u00e1mico. Se asigna en tiempo de ejecuci\u00f3n dependiendo del valor asignado.</li> <li>Conveniente inicializarlas, sino dan error.</li> </ul> <pre><code>&lt;?php\n$nombre = \"Aitor\";\n$nombreCompleto = \"Aitor Medrano\";\n$numero = 123;\n$numero2 = 456;\n$pi = 3.14;\n$suerte = true;\n$sinValor;\n\necho $sinValor;\n?&gt;\n</code></pre> <p>Aunque a priori no hay tipos de datos, internamente PHP trabaja con cuatro tipos escalares: boolean, integer, float y string y cuatro tipos compuestos: array, object, callable e iterable. Existe un tipo especial para null (m\u00e1s informaci\u00f3n en http://php.net/manual/es/language.types.null.php).</p> <p>\u00bfQu\u00e9 mostrar\u00e1 el siguiente c\u00f3digo?</p> <p>Indica qu\u00e9 mostrar\u00e1 el siguiente c\u00f3digo:</p> <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;?php\n\n    $bookName= \"Harry Potter\";\n    $read = false;\n\n    if ($read) {\n        $message = \"Has leido el libro $bookName\";\n    }\n\n    ?&gt;\n    &lt;h1&gt;\n        &lt;?php echo $message; ?&gt;  \n    &lt;/h1&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> En la l\u00ednea 17, \u00bfc\u00f3mo podr\u00edas simplificar esa expresi\u00f3n?</p>"},{"location":"02.1_php_basico.html#declaracion-de-tipos-antes-llamado-type-hinting","title":"Declaraci\u00f3n de Tipos (antes llamado Type Hinting)","text":"<p>A partir de PHP 5.0 tenemos la posibilidad de especificar el tipo de datos que contiene una determinada variable al ser recibida como argumento. Esto aporta cierta robustez a los contratos de nuestros m\u00e9todos y deja atr\u00e1s la posibilidad del Duck Typing tal. A pesar de ser un avance, segu\u00eda teniendo sus limitaciones: S\u00f3lo se pod\u00edan especificar clases o interfaces (POO), en ning\u00fan caso tipos primitivos del lenguaje.</p> <ul> <li>PHP 5.1 introdujo la posibilidad de especificar array como tipo de entrada</li> <li>PHP 7.0 introdujo soporte a primitivos como bool, string, int, y float</li> </ul> <p>Strit Types</p> <p>Otra funcionalidad al respecto de tipos incorporada en PHP 7.0 es la sentencia declare(strict_types=1);. Esta sentencia evita castings autom\u00e1ticos que hace PHP en caso de no especificar esta sentencia.</p> <p>Nullable Types</p> <p>PHP 7.1 introduce la posibilidad de especificar de forma expl\u00edcita que un determinado tipo puede ser null. Para ello se a\u00f1ade un s\u00edmbolo de interrogaci\u00f3n (?) en la declaraci\u00f3n del tipo.</p> <p>Todo estos puntos se ir\u00e1n viendo a lo largo estos primeros temas.</p> <p>+ sobre tipos</p> <p>En esta presentaci\u00f3n se explica mucho m\u00e1s en profundidad el tema del Tipado Stricto</p>"},{"location":"02.1_php_basico.html#constantes","title":"Constantes","text":"<p>Son variables cuyo valor no var\u00edan. Existen dos posibilidades:</p> <ul> <li><code>define(NOMBRE, valor);</code></li> <li><code>const NOMBRE; // PHP &gt; 5.3</code></li> </ul> <pre><code>&lt;?php\ndefine(\"PI\", 3.1416);\nconst IVA = 0.21;\n\necho PI, \" \", IVA; // No se pone el s\u00edmbolo dolar\n?&gt;\n</code></pre> <ul> <li>Se declaran siempre en MAY\u00daSCULAS</li> <li>Hay un conjunto de constantes ya predefinidas, tambi\u00e9n conocidas como magic constants: https://www.php.net/manual/es/language.constants.predefined.php</li> </ul>"},{"location":"02.1_php_basico.html#operadores","title":"Operadores","text":""},{"location":"02.1_php_basico.html#arimeticos","title":"Arim\u00e9ticos","text":"Ejemplo Nombre Resultado <code>-$a</code> Negaci\u00f3n Opuesto de <code>$a</code>. <code>$a + $b</code> Suma Suma de <code>$a</code> y <code>$b</code>. <code>$a - $b</code> Resta Diferencia de <code>$a</code> y <code>$b</code>. <code>$a * $b</code> Multiplicaci\u00f3n Producto de <code>$a</code> y <code>$b</code>. <code>$a / $b</code> Divisi\u00f3n Cociente de <code>$a</code> y <code>$b</code>. <code>$a % $b</code> M\u00f3dulo / Resto Resto de <code>$a</code> dividido por <code>$b</code>. <code>$a ** $b</code> Potencia Resultado de <code>$a</code> elevado a <code>$b</code>. PHP &gt;= 5.6. <p>En el caso de cadenas, si queremos concatenarlas, se utiliza el operador <code>.</code>:</p> <pre><code>&lt;?php\n$x = 33;\n$y = 11;\n$z = $x + $y;\necho \"La suma de 33 y 11 es \".44.\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".(33 + 11).\"&lt;br /&gt;\";\necho \"La suma de \".$x.\" y \".$y.\" es \".$z.\"&lt;br /&gt;\";\n?&gt;\n</code></pre> <p>Realmente, en vez de concatenar cadenas con variables, podemos imprimirlas directamente ya que se expanden autom\u00e1ticamente: <pre><code>&lt;?php\necho \"La suma de $x y $y es $z &lt;br /&gt;\";\n?&gt;\n</code></pre></p> <p>En ocasiones, necesitamos rodear el nombre de la variable entre llaves para poder unir m\u00e1s texto al resultado:</p> <pre><code>&lt;?php\n$color = \"rojo\";\necho \"El plural de $color el {$color}s\";\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos algunas funciones para el tratamiento de cadenas.</p>"},{"location":"02.1_php_basico.html#comparacion","title":"Comparaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a == $b</code> Igual <code>true</code> si <code>$a</code> es igual a <code>$b</code> tras de la conversi\u00f3n de tipos. <code>$a === $b</code> Id\u00e9ntico, Comparaci\u00f3n estricta <code>true</code> si <code>$a</code> es igual a <code>$b</code>, y son del mismo tipo de dato. <code>$a != $b</code>, <code>$a &lt;&gt; $b</code> Diferente <code>true</code> si <code>$a</code> no es igual a <code>$b</code> despu\u00e9s de la conversi\u00f3n de tipos. <code>$a !== $b</code> No id\u00e9ntico <code>true</code> si <code>$a</code> no es igual a <code>$b</code>, o si no son del mismo tipo. <code>$a &lt; $b</code> Menor que <code>true</code> si <code>$a</code> es estrictamente menor que <code>$b</code>. <code>$a &gt; $b</code> Mayor que <code>true</code> si <code>$a</code> es estrictamente mayor que <code>$b</code>. <code>$a &lt;= $b</code> Menor o igual que <code>true</code> si <code>$a</code> es menor o igual que <code>$b</code>. <code>$a &gt;= $b</code> Mayor o igual que <code>true</code> si <code>$a</code> es mayor o igual que <code>$b</code>. <code>$a &lt;=&gt; $b</code> Nave espacial Devuelve <code>-1</code>, <code>0</code> o <code>1</code> cuando <code>$a</code> es respectivamente menor, igual, o mayor que <code>$b</code>. PHP &gt;= 7. <code>$a ?? $b ?? $c</code> Fusi\u00f3n de null El primer operando de izquierda a derecha que exista y no sea <code>null</code>. <code>null</code> si no hay valores definidos y no son <code>null</code>. PHP &gt;= 7."},{"location":"02.1_php_basico.html#logicos","title":"L\u00f3gicos","text":"Ejemplo Nombre Resultado <code>$a and $b</code>, <code>$a &amp;&amp; $b</code> And (y) <code>true</code> si tanto <code>$a</code> como <code>$b</code> son <code>true</code>. <code>$a or $b</code>, <code>$a         |                     | $b</code> Or (o inclusivo) <code>true</code> si cualquiera de <code>$a</code> o <code>$b</code> es <code>true</code>. <code>$a xor $b</code> Xor (o exclusivo) <code>true</code> si <code>$a</code> o <code>$b</code> es <code>true</code>, pero no ambos. <code>!$a</code> Not (no) <code>true</code> si <code>$a</code> no es <code>true</code>."},{"location":"02.1_php_basico.html#asignacion","title":"Asignaci\u00f3n","text":"Ejemplo Nombre Resultado <code>$a = $b</code> Asignaci\u00f3n Asigna a <code>$a</code> el valor de <code>$b</code> <code>$a += $b</code> Asignaci\u00f3n de la suma Le suma a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a + $b</code> <code>$a -= $b</code> Asignaci\u00f3n de la resta Le resta a <code>$a</code> el valor de <code>$b</code>. Equivalente a <code>$a = $a - $b</code> <code>$a *= $b</code> Asignaci\u00f3n del producto Asigna a <code>$a</code> el producto de <code>$a</code> por <code>$b</code>. Equivalente a <code>$a = $a * $b</code> <code>$a /= $b</code> Asignaci\u00f3n de la divisi\u00f3n Asigna a <code>$a</code> el conciente de <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a / $b</code> <code>$a %= $b</code> Asignaci\u00f3n del resto Asigna a <code>$a</code> el resto de dividir <code>$a</code> entre <code>$b</code>. Equivalente a <code>$a = $a % $b</code> <code>$a .= $b</code> Concatenaci\u00f3n Concatena a <code>$a</code> la cadena <code>$b</code>. Equivalente a <code>$a = $a . $b</code> <code>$a++</code> Incremento Incrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a + 1</code> <code>$a--</code> Decremento Decrementa <code>$a</code> en una unidad. Equivalente a <code>$a = $a - 1</code> <p>Prioridad de los operadores</p> <p>Recuerda la prioridad. Primero los par\u00e9ntesis, luego la negaci\u00f3n (<code>!</code>), productos/divisiones, sumas/restas, comparaciones, l\u00f3gicos y por \u00faltimo se realiza la asignaci\u00f3n. M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.operators.precedence.php</p> <p>Autoevaluaci\u00f3n</p> <p>Si <code>$a=5</code> y <code>$b=4</code>, averigua el valor de <code>$c</code> si <code>$c = $a*2 &gt; $b+5 &amp;&amp; !($b&lt;&gt;4)</code></p>"},{"location":"02.1_php_basico.html#condiciones","title":"Condiciones","text":"<p>La condici\u00f3n simple se realiza mediante la instrucci\u00f3n <code>if</code>. Entre par\u00e9ntesis se pone la condici\u00f3n que se evalua a <code>true</code> o <code>false</code>. Si no se ponen llaves, en vez de abrir un bloque, se ejecutar\u00e1 s\u00f3lo la siguiente instrucci\u00f3n.</p> <p>Siempre llaves</p> <p>Es recomendable poner llaves siempre aunque en el momento de codificar s\u00f3lo haya una \u00fanica instrucci\u00f3n. De este modo, se queda preparado para a\u00f1adir m\u00e1s contenido en el futuro sin provocar bugs.</p> <pre><code>&lt;?php\n$hora = 8; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Suena el despertador.\";\n}\necho \"&lt;br&gt;\";\nif ($hora === 8)\n    echo \"Suena el despertador.\";\n?&gt;\n</code></pre> <p>Las condiciones compuesta mediante <code>if-else</code>:</p> <pre><code>&lt;?php\n$hora = 17; // La hora en formato de 24 horas\nif ($hora &lt;= 12) {\n    echo \"Son las \" . $hora . \" de la ma\u00f1ana\";\n} else {\n    echo \"Son las \" . ($hora - 12) . \" de la tarde\";\n}\n?&gt;\n</code></pre> <p>Las condiciones anidadas mediante <code>if-else if-else</code>:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nif ($hora === 8) {\n    echo \"Es la hora de desayunar.\";\n} else if ($hora === 14) {\n    echo \"Es la hora de la comida.\";\n} else if ($hora === 21) {\n    echo \"Es la hora de la cena.\";\n} else {\n    echo \"Ahora no toca comer.\";\n}\n?&gt;\n</code></pre> <p>La sentencia <code>switch</code> tambi\u00e9n permite trabajar con condiciones m\u00faltiples:</p> <pre><code>&lt;?php\n$hora = 14; // La hora en formato de 24 horas\nswitch ($hora) {\n    case 9:\n        echo \"Es la hora de desayunar.\";\n        break;\n    case 14:\n        echo \"Es la hora de la comida.\";\n        break;\n    case 21:\n        echo \"Es la hora de la cena.\";\n        break;\n    default:\n        echo \"Ahora no toca comer\";\n}\n?&gt;\n</code></pre> <p>No olvides el <code>break</code></p> <p>Un error muy com\u00fan es olvidar la instrucci\u00f3n <code>break</code> tras cada caso. Si no lo ponemos, ejecutar\u00e1 el siguiente caso autom\u00e1ticamente.</p> <p>Finalmente, tambi\u00e9n tenemos el operador ternario <code>condici\u00f3n ? valorTrue : valorFalse</code>:</p> <pre><code>&lt;?php\n$hora = 14;\n$formato = ($hora &gt; 12) ? 24 : 12;\necho \"El formato es de $formato horas\"\n?&gt;\n</code></pre> <p>Si queremos comprobar si una variable tiene valor y si no darle un valor determinado, usaremos el operador <code>?:</code> (se conoce como el operador Elvis - https://en.wikipedia.org/wiki/Elvis_operator) con la sint\u00e1xis <code>expresi\u00f3n ?: valorSiVacio</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET['nombre'] ?: \"desconocido\"\n?&gt;\n</code></pre> <p>Condicionales embebidos en HTML</p> <p>Lo visto anteriormente, est\u00e1 pensado m\u00e1s para c\u00f3digo PHP puro. Si queremos incluir condicionales en un documento HTML, lo haremos de la siguiente forma:</p> <pre><code>&lt;!DOCTYPE html&gt;\n...\n&lt;body&gt;\n    &lt;?php\n     $num1=5;\n     ....\n\n    ?&gt;\n    //Una opci\u00f3n es el Operador ternario, para condiciones simples, y evitando que las l\u00edneas no sean muy largas\n    &lt;p&gt;El n\u00famero es &lt;?php echo ($num1 &gt; 10) ? \"mayor que 10\" : \"menor o igual que 10\"; ?&gt;&lt;/p&gt;\n\n    //Otra opci\u00f3n es el if-else, para condiciones m\u00e1s complejas\n    // Los bloques if-else en una sola l\u00ednea, deben finalizar con `:` y no con `{}`.\n    //De esta forma el c\u00f3digo queda m\u00e1s limpio y legible.\n\n    &lt;?php if ($num1 &gt; 10) : ?&gt;  # (1)!\n        &lt;p&gt;El n\u00famero es mayor que 10&lt;/p&gt;\n    &lt;?php elseif ($num1 &gt; 30) : ?&gt;\n        &lt;p&gt;El n\u00famero es mayor que 30&lt;/p&gt;\n    &lt;?php else : ?&gt;\n        &lt;p&gt;El n\u00famero es menor o igual que 10&lt;/p&gt;\n    &lt;?php endif; ?&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#bucles","title":"Bucles","text":"<p>Mediante la instrucci\u00f3n <code>while</code>:</p> <pre><code>&lt;?php\n$i = 1;\nwhile ($i &lt;= 10) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n    $i++;\n}\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>do-while</code>:</p> <pre><code>&lt;?php\ndo {\n    $dado = rand(1, 6);\n    // rand() devuelve un valor aleatorio \n    echo \"Tirando el dado... \";\n    echo \"ha salido un \" . $dado . \".\";\n    echo \"&lt;br&gt;\";\n} while ($dado != 5);\necho \"\u00a1Bien! Saco una ficha de casa.\";\n?&gt;\n</code></pre> <p>Mediante la instrucci\u00f3n <code>for</code>:</p> <pre><code>&lt;?php\n// Bucle ascendente\nfor ($i = 1; $i &lt;= 10; $i++) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n\n// Bucle descendente\nfor ($i = 10; $i &gt;= 0; $i--) {\n    echo \"L\u00ednea \" . $i;\n    echo \"&lt;br&gt;\";\n}\n?&gt;\n</code></pre> <p>M\u00e1s adelante estudiaremos el bucle <code>foreach</code> para recorrer arrays.</p> <p>PHP, del mismo modo que Java y C, permite romper los bucles mediante la instrucci\u00f3n <code>break</code>. A su vez, <code>continue</code> permite saltar a la siguiente iteraci\u00f3n.</p> <p>Si puedes, evita <code>break</code> y <code>continue</code></p> <p>Personalmente, no me gusta su uso. Prefiero el uso de variables flag para controlar la salida de los bucles. Por ejemplo:</p> <pre><code>&lt;?php\n$salir = false;\nfor ($i = 1; $i &lt;= 10 &amp;&amp; !$salir; $i++) {\n  if ($i === 5) {\n    echo \"Salgo cuando i=5\";\n    $salir = true;\n  }\n}\n?&gt;\n</code></pre> <p>Bucloes embebidos en HTML</p> <p>Al igual que los condicionales, los bucles tambi\u00e9n se pueden incluir en un documento HTML, evitando el uso de echo para mostrar el contenido. Por ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n...\n&lt;body&gt;\n    &lt;?php\n     $num1=5;\n     ....\n\n    ?&gt;\n    // El bucle for, para una lista de elementos\n    &lt;ul&gt;\n        &lt;?php for ($i = 1; $i &lt;= 10; $i++) : ?&gt;\n            &lt;li&gt;Elemento &lt;?php echo $i; ?&gt;&lt;/li&gt;\n        &lt;?php endfor; ?&gt;\n    &lt;/ul&gt;\n\n    // El bucle while, para una lista de elementos\n    // Las variables de iteraci\u00f3n, se declar\u00e1n en la misma l\u00ednea, para que no se pierda la referencia, y se incrementan al final del bucle\n    &lt;ul&gt;\n        &lt;?php $i = 1; while ($i &lt;= 10) : ?&gt;\n            &lt;li&gt;Elemento &lt;?php echo $i; ?&gt;&lt;/li&gt;\n        &lt;?php $i++; endwhile; ?&gt;\n    &lt;/ul&gt;\n\n    // El bucle do-while, para una lista de elementos\n    &lt;ul&gt;\n        &lt;?php $i = 1; do : ?&gt;\n            &lt;li&gt;Elemento &lt;?php echo $i; ?&gt;&lt;/li&gt;\n        &lt;?php $i++; endwhile; ?&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n</code></pre> <p>Tambi\u00e9n se pueden mezclar condicionales y bucles en un mismo documento HTML, como en el siguiente ejemplo, donde se muestran las tablas de multiplicar en una lista desordenada, solo para los n\u00fameros pares:</p> <pre><code>&lt;!DOCTYPE html&gt;\n...\n&lt;body&gt;\n    &lt;?php\n     $num1=5;\n     ....\n\n    ?&gt;\n    &lt;ul&gt;\n        &lt;?php for ($i = 1; $i &lt;= 10; $i++) : ?&gt;\n            &lt;?php if ($i % 2 == 0) : ?&gt;\n                &lt;li&gt;Tabla del &lt;?= $i; ?&gt;&lt;/li&gt;\n                &lt;ul&gt;\n                    &lt;?php for ($j = 1; $j &lt;= 10; $j++) : ?&gt;\n                        &lt;li&gt;&lt;?= $i . \" x \" . $j . \" = \" . ($i * $j); ?&gt;&lt;/li&gt;\n                    &lt;?php endfor; ?&gt;\n                &lt;/ul&gt;\n            &lt;?php endif; ?&gt;\n        &lt;?php endfor; ?&gt;\n    &lt;/ul&gt;\n\n&lt;/body&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#arrays","title":"Arrays","text":"<p>Para almacenar datos compuestos, podemos utilizar tanto arrays sencillos como arrays asociativos (similares a un mapa). En realidad todos los arrays son mapas ordenados compuestos de pares clave-valor.</p> <p>Cuidado con mezclar tipos</p> <p>Como el tipado es din\u00e1mico, nuestros arrays pueden contenedor datos de diferentes tipos. No se recomienda mezclar los tipos.</p> <p>Del mismo modo que Java, se definen mediante corchetes, son 0-index, y se puede asignar un valor a un posici\u00f3n determinada:</p> <pre><code>&lt;?php\n$frutas = array(\"naranja\", \"pera\", \"manzana\");\n\n$frutas2 = [\"naranja\", \"pera\", \"manzana\"];\n\n$frutas3 = [];\n$frutas3[0] = \"naranja\";\n$frutas3[1] = \"pera\";\n$frutas3[] = \"manzana\"; // lo a\u00f1ade al final\n</code></pre> <p>Podemos obtener el tama\u00f1o del array mediante la funci\u00f3n <code>count(array)</code>. Para recorrer el array haremos uso de un bucle <code>for</code>:</p> <pre><code>&lt;?php\n$tam = count($frutas); // tama\u00f1o del array\n\nfor ($i=0; $i&lt;count($frutas); $i++) {\n    echo \"Elemento $i: $frutas[$i] &lt;br /&gt;\";\n}\n</code></pre> <p>Otra forma de recorrer los arrays, incluso m\u00e1s elegante, es hacer uso de <code>foreach</code>. Su sintaxis es <code>foreach (array as elemento)</code>:</p> <pre><code>&lt;?php\n// Mediante foreach no necesitamos saber el tama\u00f1o del array\nforeach ($frutas as $fruta) {\n    echo \"$fruta &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"02.1_php_basico.html#arrays-asociativos","title":"Arrays asociativos","text":"<p>Cada elemento es un par clave-valor. En vez de acceder por la posici\u00f3n, lo hacemos mediante una clave. As\u00ed pues, para cada clave se almacena un valor.</p> <p>A la hora de recorrer este tipo de arrays, mediante <code>foreach</code> separamos cada elemento en una pareja <code>clave =&gt; valor</code>:</p> <pre><code>&lt;?php\n$capitales = [\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\"];\n$capitalFrancia = $capitales[\"Francia\"]; // se accede al elemento por la clave, no la posici\u00f3n\n\n$capitales[\"Alemania\"] = \"Berl\u00edn\"; // a\u00f1adimos un elemento\n\necho \"La capital de Francia es $capitalFrancia &lt;br /&gt;\";\necho \"La capital de Francia es {$capitales[\"Francia\"]} &lt;br /&gt;\";\n\n$capitales[] = \"Madrid\"; // se a\u00f1ade con la clave 0 !!! \u00a1\u00a1\u00a1No asignar valores sin clave!!!\n\nforeach ($capitales as $valor) { // si recorremos un array asociativo, mostraremos los valores\n    echo \"$valor &lt;br /&gt;\";\n}\n\nforeach ($capitales as $pais =&gt; $ciudad) { // separamos cada elemento en clave =&gt; valor\n    echo \"$pais : $ciudad &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"02.1_php_basico.html#operaciones","title":"Operaciones","text":"<p>Las operaciones m\u00e1s importantes que podemos realizar con arrays son:</p> <ul> <li><code>print_r($array)</code>: muestra el contenido de todo el <code>$array</code>. Si queremos mostrar el contenido con un formato determinado, hemos de recorrer el array con <code>foreach</code>.</li> <li><code>var_dump($mixed)</code>: muestra el contenido del elemento recibido. Muestra m\u00e1s informaci\u00f3n que <code>print_r</code>.</li> <li><code>$elem = array_pop($array)</code>: elimina el \u00faltimo <code>$elemento</code></li> <li><code>array_push($array, $elem)</code>: a\u00f1ade un <code>$elemento</code> al final</li> <li><code>$booleano = in_array($elem, $array)</code>: averigua si <code>$elem</code> est\u00e1 en el <code>$array</code></li> </ul> PHPConsola <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n\narray_push($frutas, \"pi\u00f1a\");\nprint_r($frutas);\n\n$ultFruta = array_pop($frutas);\nif (in_array(\"pi\u00f1a\", $frutas)) {\n    echo \"&lt;p&gt;Queda pi\u00f1a&lt;/p&gt;\";\n} else {\n    echo \"&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\";\n}\nprint_r($frutas);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n  [3] =&gt; pi\u00f1a\n)\n&lt;p&gt;No queda pi\u00f1a&lt;/p&gt;\nArray\n(\n  [0] =&gt; naranja\n  [1] =&gt; pera\n  [2] =&gt; manzana\n)\n</code></pre> <ul> <li><code>$claves = array_keys($array)</code>: devuelve las claves del <code>$array</code> asociativo</li> <li><code>$tam = count($array)</code>: devuelve el tama\u00f1o de <code>$array</code></li> <li><code>sort($array)</code>: ordena los elementos del <code>$array</code></li> <li><code>isset($array[elemento])</code>: indica si existe/tiene valor elemento dentro del array</li> <li><code>unset($array[elemento])</code>: elimina el elemento del array (deja un hueco)</li> </ul> PHPConsola <pre><code>&lt;?php\n$capitales = [\n    \"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\"\n];\n\n$paises = array_keys($capitales);\nprint_r($paises);\nsort($paises);\nprint_r($paises);\n\nunset($capitales[\"Francia\"]);\nprint_r($capitales);\n</code></pre> <pre><code>Array\n(\n  [0] =&gt; Italia\n  [1] =&gt; Francia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [0] =&gt; Francia\n  [1] =&gt; Italia\n  [2] =&gt; Portugal\n)\nArray\n(\n  [Italia] =&gt; Roma\n  [Portugal] =&gt; Lisboa\n)\n</code></pre> <p>Al asignar un array a otro se realiza una copia. Cuidado con esta operaci\u00f3n que puede consumir muchos recursos.</p> PHPConsola <pre><code>&lt;?php\n$nombres = [\"Juan\", \"Ana\", \"Pedro\", \"Laura\"];\n$copia = $nombres;\nsort($nombres);\nprint_r($nombres);\nprint_r($copia);\n</code></pre> <pre><code>Array\n(\n    [0] =&gt; Ana\n    [1] =&gt; Juan\n    [2] =&gt; Laura\n    [3] =&gt; Pedro\n)\nArray\n(\n    [0] =&gt; Juan\n    [1] =&gt; Ana\n    [2] =&gt; Pedro\n    [3] =&gt; Laura\n)\n</code></pre> <p>Cuidado con la asignaci\u00f3n</p> <p>Si hacemos esto <code>$nombres_copia = [$nombres]</code>, no estamos copiando el array, sino que estamos creando un array con un \u00fanico elemento que es el array original. Es decir, anidando un array en otro. Para copiarlo, hemos de hacer <code>$nombres_copia = $nombres</code>.</p> <p>Agregar elementos a un Array</p> <p>Los elementos se pueden agregar al final, al principio, o en una posici\u00f3n determinada.</p> <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\necho \"Array original: \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Agregar al final\n$frutas[] = \"pi\u00f1a\"; // a\u00f1ade al final\necho \"Agregar al final con []= \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\narray_push($frutas, \"uva\"); // a\u00f1ade al final\necho \"Agregar al final con array_push: \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\narray_push($frutas, \"uva\", \"fresa\"); // a\u00f1ade varios al final\necho \"Agregar varios al final con array_push: \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Agregar al principio\narray_unshift($frutas, \"fresa\"); // a\u00f1ade al principio\necho \"Agregar varios al principio con array_unshift \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Agregar en una posici\u00f3n determinada\narray_splice($frutas, 2, 0, \"kiwi\"); // a\u00f1ade en la posici\u00f3n 2, un solo valor (el 0 indica que no se elimina nada)\necho \"Agregar en una posici\u00f3n 2 con array_splice \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Reemplazar un valor\n$frutas[1] = \"pl\u00e1tano\";  //reemplaza por el \u00edndice\necho \"Reemplazar por \u00edndice[1] con \u00edndice\" . print_r($frutas,true) . \"&lt;br&gt;\";\n\narray_splice($frutas, 2, 1, \"Aguacate\"); // a\u00f1ade en la posici\u00f3n 2, reemplaza un valor (el 1 indica que se elimina un valor)\necho \"Reemplazar en posici\u00f3n 2 con con array_splice \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\narray_splice($frutas, 1, 2, [\"Sandia\", \"Maracuya\"]); //reemplaza por la posici\u00f3n, varios valores (el 2 indica que se reemplazan dos valores)\necho \"Reemplazar en posici\u00f3n 1, 2 valores con con array_splice \" . print_r($frutas,true) . \"&lt;br&gt;\";\n?&gt;\n</code></pre> <p>Borrar un Array</p> <p>Para borrar complemente un array, se puede hacer de dos formas:</p> <ul> <li><code>$frutas = [];</code> //Asignar un array vac\u00edo</li> <li><code>unset($frutas);</code> //Eliminar la variable</li> </ul> <p>Para borrar elementos, se puede hacer de tres formas:</p> <ul> <li><code>unset($frutas[1]);</code> //Borra el elemento en la posici\u00f3n 1</li> <li><code>array_pop($frutas);</code> //Borra el \u00faltimo elemento</li> <li><code>array_splice($frutas, 1, 2);</code> //Borra desde la posici\u00f3n 1, 2 elementos</li> <li><code>array_splice($frutas, 1);</code> //Borra desde la posici\u00f3n 1 hasta el final</li> </ul> <p>En este ejemplo vemos todas las posibilidades:</p> <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\necho \"Array original: \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Borrar un elemento\nunset($frutas[1]); //borra el elemento en la posici\u00f3n 1\necho \"Borrar un elemento con unset \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Borrar varios elementos\n$frutas = [\"naranja\", \"pera\", \"manzana\", \"kiwi\", \"uva\"];\narray_splice($frutas, 1, 2); // borra desde la posici\u00f3n 1, 2 elementos\necho \"Borrar varios elementos con array_splice \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Borrar desde una posici\u00f3n hasta el final\n$frutas = [\"naranja\", \"pera\", \"manzana\", \"kiwi\", \"uva\"];\narray_splice($frutas, 1); // borra desde la posici\u00f3n 1 hasta el final\necho \"Borrar desde una posici\u00f3n hasta el final con array_splice \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\necho \"Array original: \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\n//Borrar todos los elementos\n$frutas = []; //asignar un array vac\u00edo\necho \"Borrar todos los elementos con asignaci\u00f3n =[]; \" . print_r($frutas,true) . \"&lt;br&gt;\";\n\nunset($frutas); //eliminar la variable\necho \"La variable ahora es: \" . print_r($frutas,true) . \"&lt;br&gt;\";  //Da error porque la variable ya no existe (Undefinied variable)\n?&gt;\n</code></pre> <p>Unir matrices</p> <p>Unir matrices es el concepto de combinar dos o m\u00e1s matrices en una sola, y se puede realizar de varias formas:</p> <ul> <li><code>array_merge($array1, $array2);</code> //Combina dos o m\u00e1s matrices</li> <li><code>$array1 + $array2;</code> //Combina dos matrices, pero si hay claves duplicadas, se conserva la clave y el valor del primer array</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n$frutas2 = [\"kiwi\", \"uva\"];\n$frutas3 = [\"fresa\", \"sandia\", \"melon\", \"coco\"];\n\necho \"Array frutas1 : \" . print_r($frutas,true) . \"&lt;br&gt;\";\necho \"Array frutas2: \" . print_r($frutas2,true) . \"&lt;br&gt;\";\necho \"Array frutras3: \" . print_r($frutas3,true) . \"&lt;br&gt;\";\n\n//Unir arrays\n$frutas4 = array_merge($frutas, $frutas2, $frutas3);\necho \"Unir arrays con array_merge: \" . print_r($frutas4,true) . \"&lt;br&gt;\"; \n\n//Utilizando el operador (+)\n$frutas5 = $frutas + $frutas2 + $frutas3;\necho \"Unir arrays con +: \" . print_r($frutas5,true) . \"&lt;br&gt;\";\necho \"Como se puede ver, el operador + no es la mejor opci\u00f3n para unir arrays, ya que al existir claves duplicadas, el primer array tiene las claves (0,1,2), esas se conservan del primer array y se descartan las del segundo y tercer array, excepto la \u00faltima clave del \u00faltimo array, que se conserva. &lt;br&gt;\";\n?&gt;\n</code></pre> <p>Operador Spread</p> <p>El operador Spread (<code>...</code>) se utiliza para descomponer un array en sus elementos. Se puede utilizar para pasar los elementos de un array a una funci\u00f3n (variadics), o para unir arrays, que es lo que vamos a ver en este ejemplo:</p> <pre><code>&lt;?php\n$frutas = [\"naranja\", \"pera\", \"manzana\"];\n$frutas2 = [\"kiwi\", \"uva\"];\n$frutas3 = [\"fresa\", \"sandia\", \"melon\", \"coco\"];\n\n$frutas4 = [...$frutas, ...$frutas2, ...$frutas3];  //De esta forma se aplana el array, no se anida\n\necho \"Unir arrays con Spread: \" . print_r($frutas4,true) . \"&lt;br&gt;\";\n\n?&gt;\n</code></pre> <p>Este operador es una forma mucho m\u00e1s clara de copiar un Array, se entiende mejor que la asignaci\u00f3n directa. <code>$copia = $frutas</code>.</p> <p>Existen much\u00edsimas m\u00e1s funciones para trabajar con arrays. Puedes consultar roda la informaci\u00f3n en la documentaci\u00f3n oficial.</p> <p>Art\u00edculos para profundizar en las operaciones con arrays</p> <ul> <li>Un art\u00edculo muy completo (en ingl\u00e9s) de C\u00f3mo trabajar con arrays en PHP de la manera correcta.  </li> <li>Otro art\u00edculo recomendable (en ingl\u00e9s) es C\u00f3mo ordenar arrays en PHP.</li> </ul>"},{"location":"02.1_php_basico.html#arrays-bidimensionales","title":"Arrays bidimensionales","text":"<p>Consiste en un array de arrays, ya sean arrays secuenciales o asociativos. Puede haber N dimensiones.</p> <pre><code>&lt;?php\n$persona[\"nombre\"] = \"Bruce Wayne\";\n$persona[\"telefonos\"] = [\"966 123 456\", \"636 636 636\"]; // array de arrays ordinarios\n$persona[\"profesion\"] = [\n    \"dia\" =&gt; \"fil\u00e1ntropo\", \n    \"noche\" =&gt; \"caballero oscuro\"\n    ]; // array de arrays asociativos\n\necho $persona['nombre'].\" por la noche trabaja de \".$persona['profesion']['noche'];\n</code></pre> <p>Combinando los arrays asociativos en varias dimensiones podemos almacenar la informaci\u00f3n como si fuera una tabla:</p> <pre><code>&lt;?php\n$menu1 = [\n    \"Plato1\" =&gt; \"Macarrones con queso\", \n    \"Plato2\" =&gt; \"Pescado asado\", \n    \"Bebida\" =&gt; \"Coca-Cola\", \n    \"Postre\" =&gt; \"Helado de vainilla\"\n    ];\n$menu2 = [\"Plato1\" =&gt; \"Sopa\", \"Plato2\" =&gt; \"Lomo con patatas\", \"Bebida\" =&gt; \"Agua\", \"Postre\" =&gt; \"Arroz con leche\"];\n$menus = [$menu1, $menu2]; // creamos un array a partir de arrays asociativos\n\nforeach ($menus as $menudeldia) {\n  echo \"Men\u00fa del d\u00eda&lt;br/&gt;\";\n\n  foreach ($menudeldia as $platos =&gt; $comida) {\n    echo \"$platos: $comida &lt;br/&gt;\";\n  }\n}\n\n// Para acceder a un elemento concreto se anidan los corchetes\n$postre0 = $menus[0][\"Postre\"];\n</code></pre> <p>Tambi\u00e9n se pueden definir arrays bidimensionales de forma m\u00e1s directa:</p> <pre><code>&lt;?php\n$menus = [\n    [\"Macarrones con queso\", \"Pescado asado\", \"Coca-Cola\", \"Helado de vainilla\"],\n    [\"Sopa\", \"Lomo con patatas\", \"Agua\", \"Arroz con leche\"]\n];\n?&gt;\n</code></pre> <p>Y arrays asociativos directamente:</p> <pre><code>&lt;?php\n$menus = [\n    \"menu-dia\" =&gt; [\n        \"Plato1\" =&gt; \"Macarrones con queso\", \n        \"Plato2\" =&gt; \"Pescado asado\",\n        \"Bebida\" =&gt; \"Coca-Cola\", \n        \"Postre\" =&gt; \"Helado de vainilla\"\n        ],\n    \"menu-noche\" =&gt; [\n        \"Plato1\" =&gt; \"Sopa\",\n        \"Plato2\" =&gt; \"Lomo con patatas\",\n        \"Bebida\" =&gt; \"Agua\",\n        \"Postre\" =&gt; \"Arroz con leche\"\n        ]\n];\n\n//Acceder al postre del men\u00fa de la noche\necho $menus[\"menu-noche\"][\"Postre\"];\n\n//Recorrer los men\u00fas\nforeach ($menus as $menu) {\n    echo \"Men\u00fa&lt;br/&gt;\";\n    foreach ($menu as $plato =&gt; $comida) {  //$plato =&gt; $comida es la pareja clave =&gt; valor\n        echo \"$plato: $comida &lt;br/&gt;\";\n    }\n}\n?&gt;\n</code></pre> <p>Cuidado con la complejidad</p> <p>Aunque pueda parecer una buena idea crear este tipo de estructuras, es mejor utilizar objetos conjuntamente con arrays (posiblemente arrays de otros objetos) para crear estructuras complejas que permitan modelar mejor los problemas. En el tema de Programaci\u00f3n Orientada a Objetos veremos c\u00f3mo crear clases y objetos en PHP.</p>"},{"location":"02.1_php_basico.html#funciones","title":"Funciones","text":"<p>Al no declararse los tipos de datos, los par\u00e1metros de las funciones no tienen tipo ni se indica el tipo de dato que devuelven. El paso de par\u00e1metros se realiza por valor, es decir, se realiza una copia de la variable.</p> <pre><code>&lt;?php\nfunction nombreFuncion($par1, $par2, ...) {\n  // c\u00f3digo\n  return $valor;\n}\n\n$resultado = nombreFuncion($arg1, $arg2, \u2026);\n?&gt;\n</code></pre> <p>Por ejemplo:</p> <pre><code>&lt;?php\nfunction diaSemana() {\n    $semana = [ \"lunes\", \"martes\", \"mi\u00e9rcoles\",\n        \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\" ];\n    $dia = $semana[rand(0, 6)];\n    return $dia;\n}\n\n$diaCine = diaSemana();\necho \"El pr\u00f3ximo $diaCine voy al cine.\";\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#parametros-por-referencia","title":"Par\u00e1metros por referencia","text":"<p>Si queremos pasar un par\u00e1metro por referencia, en la declaraci\u00f3n de la funci\u00f3n, indicaremos los par\u00e1metros mediante el operador <code>&amp;</code> para indicar la direcci\u00f3n de memoria de la variable.</p> <pre><code>&lt;?php\nfunction duplicarPorValor($argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\nfunction duplicarPorReferencia(&amp;$argumento) {\n    $argumento = $argumento * 2;\n    echo \"Dentro de la funci\u00f3n: $argumento.&lt;br&gt;\";\n}\n\n$numero1 = 5;\necho \"Antes de llamar: $numero1.&lt;br&gt;\";\nduplicarPorValor($numero1);\necho \"Despu\u00e9s de llamar: $numero1.&lt;br&gt;\";\necho \"&lt;br&gt;\";\n\n$numero2 = 7;\necho \"Antes de llamar: $numero2.&lt;br&gt;\";\nduplicarPorReferencia($numero2);\necho \"Despu\u00e9s de llamar: $numero2.&lt;br&gt;\";\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#parametros-por-defecto-opcionales","title":"Par\u00e1metros por defecto / opcionales","text":"<p>Permiten asignar valores en la declaraci\u00f3n, y posteriormente, dejar el argumento en blanco.</p> <pre><code>&lt;?php\nfunction obtenerCapital($pais = \"todos\") {\n    $capitales = array(\"Italia\" =&gt; \"Roma\",\n    \"Francia\" =&gt; \"Paris\",\n    \"Portugal\" =&gt; \"Lisboa\");\n\n    if ($pais == \"todos\") {\n        return array_values($capitales);\n    } else {\n        return $capitales[$pais];\n    }\n}\n\nprint_r(obtenerCapital());\necho \"&lt;br/&gt;\";\necho obtenerCapital(\"Francia\");\n</code></pre> <p>En el caso de convivir con otro tipo de par\u00e1metros, los par\u00e1metros que tienen el valor asignado por defecto siempre se colocan al final.</p> <pre><code>&lt;?php\nfunction saluda($nombre, $prefijo = \"Sr\") {\n    echo \"Hola \".$prefijo.\" \".$nombre;\n}\n\nsaluda(\"Aitor\", \"Mr\");\nsaluda(\"Aitor\");\nsaluda(\"Marina\", \"Srta\");\n</code></pre>"},{"location":"02.1_php_basico.html#parametros-variables","title":"Par\u00e1metros variables","text":"<p>Podemos tener funciones donde en la declaraci\u00f3n no indiquemos la cantidad de datos de entrada.</p> <ul> <li><code>$arrayArgs = func_get_args();</code> \u2192 Obtiene un array con los par\u00e1metros</li> <li><code>$cantidad = func_num_args();</code> \u2192 Obtiene la cantidad de par\u00e1metros recibidos</li> <li><code>$valor = func_get_arg(numArgumento);</code> \u2192 Obtiene el par\u00e1metro que ocupa la posici\u00f3n <code>numArgumento</code>.</li> </ul> <p>Estas funciones no se pueden pasar como par\u00e1metro a otra funci\u00f3n (como funciones variable, que veremos m\u00e1s adelante). Para ello, debemos guardar previamente la funci\u00f3n en una variable.</p> <pre><code>&lt;?php\nfunction sumaParametros() {\n    if (func_num_args() == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        for ($i = 0; $i &lt; func_num_args(); $i++) {\n            $suma += func_get_arg($i);\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametros(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>Desde PHP 5.6, se puede utilizar el operador <code>...</code> (variadics) el cual \"disfraza\" los par\u00e1metros como un array:</p> <pre><code>&lt;?php\nfunction sumaParametrosMejor(...$numeros) {\n    if (count($numeros) == 0) {\n        return false;\n    } else {\n        $suma = 0;\n\n        foreach ($numeros as $num) {\n            $suma += $num;\n        }\n\n        return $suma;\n    }\n}\n\necho sumaParametrosMejor(1, 5, 9); // 15\n?&gt;\n</code></pre> <p>M\u00e1s usos de <code>...</code></p> <p>Tambi\u00e9n se puede utilizar para dividir un array en variables separadas para proporcionar argumentos</p> <pre><code>&lt;?php\nfunction suma($a, $b) {\n    return $a + $b;\n}\n\necho suma(...[1, 5]).\"&lt;br /&gt;\";\n\n$a = [1, 5];\necho suma(...$a);\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#argumentos-con-nombre","title":"Argumentos con nombre","text":"<p>Desde PHP 8.0 podemos pasar los argumentos con el nombre (adem\u00e1s de por posici\u00f3n, como hemos hecho hasta ahora). Los argumentos con nombre se pasan poniendo el nombre como prefijo del par\u00e1metros separado por dos puntos: <code>$resultado = funcion( arg1 : valor1, arg2 : valor2);</code></p> <p>Esta caracter\u00edstica complementa los parametros opcionales permitiendonos saltar su valor:</p> <pre><code>&lt;?php\nfunction funcionArgumentosNombre($a, $b = 2, $c = 4) {\n\u00a0\u00a0echo \"$a $b $c\";\n}\nfuncionArgumentosNombre(c: 3, a: 1); // \"1 2 3\"\n</code></pre> <p>Tanto los par\u00e1metros opcionales como los obligatorios pueden tener nombre, pero lo argumentos con nombre se tienen que poner despu\u00e9s de los que no lo tienen.</p> <pre><code>&lt;?php\nfuncionArgumentosNombre(1, c: 3); // \"1 2 3\"\n</code></pre>"},{"location":"02.1_php_basico.html#funciones-tipadas","title":"Funciones tipadas","text":"<p>Desde PHP7 en las funciones, tanto los par\u00e1metro como su devoluci\u00f3n, permiten la definici\u00f3n de tipos. Esto se conoce como strict_types (tipificaci\u00f3n estricta) y hay que definirlo en la primera l\u00ednea de cada archivo <code>.php</code> para que el propio interprete PHP compruebe los tipos y lance errores si los tipos son incorrectos, mediante la sentencia</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n</code></pre> <p>As\u00ed pues, vamos a  definir los tipos de los par\u00e1metros y de los valores devueltos mediante los tipos: <code>int</code>, <code>float</code>, <code>string</code>, <code>bool</code>, <code>object</code> y <code>array</code>.</p> <p>Si una funci\u00f3n no devuelve nada se indica mediante el tipo <code>void</code>.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\n$num = 33;\necho suma(10, 30);\necho suma(10, $num);\necho suma(\"10\", 30); // error por tipificaci\u00f3n estricta, sino dar\u00eda 40\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#alcance","title":"Alcance","text":"<p>Las variables definidas fuera de las funciones tienen alcance global: accesibles desde cualquier funci\u00f3n. Los par\u00e1metros de una funci\u00f3n y las variables declaradas dentro de una funci\u00f3n (se conocen como variables locales) s\u00f3lo son accesibles desde dentro de la misma funci\u00f3n \u2192 alcance de funci\u00f3n.</p> <p>En caso de conflicto, tienen prioridad las variables locales. Para evitar el conflicto, dentro de la funci\u00f3n, podemos declarar la variable como <code>global</code>.</p> Alcance localAlcance global <pre><code>&lt;?php\nfunction miCiudad() {\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de la funci\u00f3n: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de la funci\u00f3n: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <pre><code>&lt;?php\nfunction miCiudad() {\n    global $ciudad;\n    $ciudad = \"Elche\";\n    echo \"Dentro de la funci\u00f3n: $ciudad.&lt;br&gt;\";\n}\n\n$ciudad = \"Alicante\";\necho \"Antes de llamar: $ciudad.&lt;br&gt;\";\nmiCiudad();\necho \"Despu\u00e9s de llamar: $ciudad.&lt;br&gt;\"\n?&gt;\n</code></pre> <p>No globales</p> <p>Por favor, hay que evitar el uso de variables globales dentro de las funciones. En el caso de necesitarlas, es mejor pasarlas como par\u00e1metro a las funciones.</p>"},{"location":"02.1_php_basico.html#funciones-variable","title":"Funciones variable","text":"<ul> <li>Permite asignar una funci\u00f3n a una variable.</li> <li>Nombre de la funci\u00f3n entre comillas.</li> <li>Si una variable va seguida de par\u00e9ntesis, PHP buscar\u00e1 una funci\u00f3n con su valor.</li> </ul> <pre><code>&lt;?php\n$miFuncionSuma = \"suma\";\necho $miFuncionSuma(3,4); // invoca a la funci\u00f3n suma\n?&gt;\n</code></pre> <p>Funciones an\u00f3nimas</p> <p>PHP permite la definici\u00f3n y uso de funciones an\u00f3nimas, es decir, funciones que no tienen nombre, y se utilizan principalmente para gestionar los callbacks. Este tipo de funciones se utiliza mucho en Javascript para gestionar los eventos y promesas.</p> <pre><code>&lt;?php\n$anonima = function() {\n    echo \"Hola\";\n};\n$anonima();\n\n$anonimaConParametro = function($nombre) {\n    echo \"Hola \".$nombre;\n};\n$anonimaConParametro(\"Aitor\");\n\n// Uso de variables externas a la funci\u00f3n an\u00f3nima --&gt; `use`\n$mensaje = \"Hola\";\n$miClosure = function() use ($mensaje) {\n    echo $mensaje;\n};\n$miClosure();\n\n// Uso de par\u00e1metros\n$holaPHP = function($arg) use ($mensaje) {\n    echo $mensaje.\" \".$arg;\n};\n$holaPHP(\"PHP\");\n?&gt;\n</code></pre> <p>Desde PHP 7.4 se han introducido las funciones flecha (arrow functions) para simplificar su definici\u00f3n y uso.</p> <p>Ten\u00e9is m\u00e1s informaci\u00f3n sobre funciones an\u00f3nimas y flecha en el siguiente art\u00edculo (en ingl\u00e9s): Funciones an\u00f3nimas y flecha en PHP</p>"},{"location":"02.1_php_basico.html#biblioteca-de-funciones","title":"Biblioteca de funciones","text":"<p>Podemos agrupar un conjunto de funciones en un archivo, para permitir su reutilizaci\u00f3n. Posteriormente, se incluye con:</p> <ul> <li><code>include(archivo);</code> / <code>include_once(archivo);</code></li> <li><code>require(archivo);</code> / <code>require_once(archivo);</code></li> </ul> <p>\ud83d\udd25 Al <code>incluir</code> un archivo, todo su c\u00f3digo se <code>inserta</code> en el lugar donde se encuentra la instrucci\u00f3n, y las funciones, variables y clases definidas en el archivo incluido, estar\u00e1n disponibles en el archivo que lo incluye.</p> <p>Si no encuentra el archivo, <code>require</code> lanza un error fatal, <code>include</code> lo ignora Las funciones <code>_once</code> s\u00f3lo se cargan una vez, si ya ha sido incluida previamente, no lo vuelve a hacer, evitando bucles.</p> <p>Por ejemplo, colocamos las funciones en el archivo <code>biblioteca.php</code>:</p> <pre><code>&lt;?php\nfunction suma(int $a, int $b) : int {\n    return $a + $b;\n}\n\nfunction resta(int $a, int $b) : int {\n    return $a - $b;\n}\n?&gt;\n</code></pre> <p>Y posteriormente en otro archivo:</p> <pre><code>&lt;?php \ninclude_once(\"biblioteca.php\");\necho suma(10,20);\necho resta(40,20);\n?&gt;\n</code></pre> <p>POO: otra forma de organizar funciones</p> <p>En el tema de Programaci\u00f3n Orientada a Objetos veremos c\u00f3mo se pueden agrupar las funciones en clases, permitiendo as\u00ed una mejor organizaci\u00f3n y reutilizaci\u00f3n del c\u00f3digo.</p>"},{"location":"02.1_php_basico.html#plantillas-mediante-include","title":"Plantillas mediante <code>include</code>","text":"<p>Mediante el uso de la instrucci\u00f3n <code>include</code> tambi\u00e9n podemos separar fragmentos de c\u00f3digo PHP/HTML que queramos reutilizar en nuestros sitios web y crear un sistema muy sencillo de plantillas. Por ejemplo, vamos a separar una p\u00e1gina en tres partes, primero la parte superior en <code>encabezado.php</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;&lt;?= $titulo ?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n</code></pre> <p>La parte de abajo, por ejemplo, solo va a contener HTML y la colocamos en <code>pie.html</code>: <pre><code>&lt;footer&gt;Aitor Medrano&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>Y luego nos centramos \u00fanicamente en el contenido que cambia en <code>pagina.php</code>:</p> <pre><code>&lt;?php\n$titulo = \"P\u00e1gina con includes\";\ninclude(\"encabezado.php\");\n?&gt;\n&lt;body&gt;\n&lt;h1&gt;&lt;?= $titulo ?&gt;&lt;/h1&gt;\n&lt;?php\ninclude(\"pie.html\");\n?&gt;\n&lt;/body&gt;\n</code></pre> <p>M\u00e1s sobre plantillas</p> <p>A lo largo del m\u00f3dulo se tratar\u00e1 este tema con m\u00e1s profundidad, y ser\u00e1 una parte fundamental del mismo. Se ver\u00e1 c\u00f3mo se puede separar el c\u00f3digo de la vista (HTML) del procesamiento (controladores). Para ello se utilizar\u00e1 el concepto de <code>plantilla</code>. Los <code>template engines</code> como Twig o Blade permiten el uso avanzado de plantillas llevando su utilizaci\u00f3n a otro nivel. En Laravel, por ejemplo, se utiliza Blade como motor de plantillas.</p>"},{"location":"02.1_php_basico.html#funciones-predefinidas","title":"Funciones predefinidas","text":"<p>El lenguaje ofrece un abanico de funciones ya definidas, agrupadas por su funcionalidad: https://www.php.net/manual/es/funcref.php</p>"},{"location":"02.1_php_basico.html#cadenas","title":"Cadenas","text":"<p>Ya hemos visto que se pueden crear con comillas simples (<code>''</code>, sin interpretaci\u00f3n) o comillas dobles (<code>\"\"</code>, interpretan el contenido y las secuencias de escape <code>\\n</code>, <code>\\t</code>, <code>\\$</code>, <code>{</code>, \u2026 - magic quotes)</p> <pre><code>&lt;?php\n\"Me llamo $nombre\"\n\"Son 30 {$moneda}s\"\n?&gt;\n</code></pre> <p>Se acceden a los caracteres como si fuera un array.</p> <pre><code>&lt;?php\n$cadena = \u201cYo soy Batman\u201d;\n$ygriega = $cadena[0];\n?&gt;\n</code></pre> <p>Adem\u00e1s de <code>echo</code>, podemos mostrar las cadenas mediante la funci\u00f3n <code>printf</code>. Esta funci\u00f3n viene heredada del lenguaje C, y en la cadena se indica el tipo de dato a formatear y genera una salida formateada. Si quiero guardar el resultado en una variable, podemos utilizar <code>sprintf</code>.</p> <pre><code>&lt;?php\n$num = 33;\n$nombre = \"Larry Bird\";\nprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num); // %d -&gt; n\u00famero decimal, %s -&gt; string\n$frase = sprintf(\"%s llevaba el n\u00famero %d\", $nombre, $num);\necho $frase\n?&gt;\n</code></pre> <p>Ten\u00e9is muchos m\u00e1s ejemplos en https://www.w3schools.com/php/func_string_printf.asp</p>"},{"location":"02.1_php_basico.html#operaciones-basicas","title":"Operaciones b\u00e1sicas","text":"<p>Todas las funciones se pueden consultar en https://www.php.net/manual/es/ref.strings.php</p> <p>Las m\u00e1s importantes son:</p> <ul> <li><code>strlen</code>: obtiene la longitud de una cadena y devuelve un n\u00famero entero</li> <li><code>substr</code>: devuelve una subcadena de la cadena original</li> <li><code>str_replace</code>: reemplaza caracteres en una cadena</li> <li><code>strtolower</code> y <code>strtoupper</code>: Transforman una cadena de caracteres en la misma cadena en min\u00fasculas o may\u00fasculas respectivamente.</li> </ul> <pre><code>&lt;?php\n$cadena = \"El caballero oscuro\";\n$tam = strlen($cadena);\necho \"La longitud de '$cadena' es: $tam &lt;br /&gt;\";\n\n$oscuro = substr($cadena, 13); // desde 13 al final\n$caba = substr($cadena, 3, 4); // desde 3, 4 letras\n$katman = str_replace(\"c\", \"k\", $cadena);\necho \"$oscuro $caba ahora es $katman\";\n\necho \"Grande \".strtoupper($cadena);\n?&gt;\n</code></pre> <p>Si queremos trabajar con caracteres ASCII de forma individual, son \u00fatiles las funciones:</p> <ul> <li><code>chr</code>: obtiene el car\u00e1cter a partir de un ASCII</li> <li><code>ord</code>: obtiene el ASCII de un car\u00e1cter</li> </ul> <pre><code>&lt;?php\nfunction despues(string $letra): string {\n    $asciiLetra = ord($letra);\n    return chr($asciiLetra + 1);\n}\n\necho despues(\"B\");\n?&gt;\n</code></pre> <p>Si queremos limpiar cadenas, tenemos las funciones:</p> <ul> <li><code>trim</code>: elimina los espacios al principio y al final</li> <li><code>ltrim</code> / <code>rtrim</code> o <code>chop</code>: Elimina los espacios iniciales / finales de una cadena.</li> <li><code>str_pad</code>: rellena la cadenas hasta una longitud especificada y con el car\u00e1cter o caracteres especificados.</li> </ul> <pre><code>&lt;?php\n$cadena = \" Programando en PHP \";\n$limpia = trim($cadena); // \"Programando en PHP\"\n\n$sucia = str_pad($limpia, 23, \".\"); // \"Programando en PHP.....\"\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#comparando-y-buscando","title":"Comparando y buscando","text":"<p>La comparaci\u00f3n de cadenas puede ser con conversi\u00f3n de tipos mediante <code>==</code> o estricta con <code>===</code>. Tambi\u00e9n funcionan los operadores <code>&lt;</code> y <code>&gt;</code> si ambas son cadenas. Al comparar cadenas con valores numericos podemos utilizar:</p> <ul> <li><code>strcmp</code>: 0 iguales, &lt;0 si <code>a&lt;b</code> o &gt;0 si <code>a&gt;b</code></li> <li><code>strcasecmp</code>: las pasa a min\u00fasculas y compara</li> <li><code>strncmp</code> / <code>strncasecmp</code>: compara los N primeros caracteres</li> <li><code>strnatcmp</code>: comparaciones naturales</li> </ul> <pre><code>&lt;?php\n$frase1 = \"Alfa\";\n$frase2 = \"Alfa\";\n$frase3 = \"Beta\";\n$frase4 = \"Alfa5\";\n$frase5 = \"Alfa10\";\n\nvar_dump( $frase1 == $frase2 ); // true\nvar_dump( $frase1 === $frase2 ); // true\nvar_dump( strcmp($frase1, $frase2) ); // 0\nvar_dump( strncmp($frase1, $frase5, 3) ); // 0\nvar_dump( $frase2 &lt; $frase3 ); // true\nvar_dump( strcmp($frase2, $frase3) ); // -1\nvar_dump( $frase4 &lt; $frase5 ); // false\nvar_dump( strcmp($frase4, $frase5) ); // 4 \u2192 f4 &gt; f5\nvar_dump( strnatcmp($frase4, $frase5) ); // -1 \u2192 f4 &lt; f5\n?&gt;\n</code></pre> <p>Si lo que queremos es buscar dentro de una cadena, tenemos:</p> <ul> <li><code>strpos</code> / <code>strrpos</code>: busca en una cadena y devuelve la posici\u00f3n de la primera/\u00faltima ocurrencia.</li> <li><code>strstr</code> / <code>strchr (alias)</code>: busca una cadena y devuelve la subcadena a partir de donde la ha encontrado</li> <li><code>stristr</code>: ignora las may\u00fasculas</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$pos1 = strpos($frase, \",\"); // encuentra la primera coma\n$pos2 = strrpos($frase, \",\"); // encuentra la \u00faltima coma\n$trasComa = strstr($frase, \",\"); // \", eso dicen, a veces\"\n?&gt;\n</code></pre> <p>Si queremos averiguar que contiene las cadenas, tenemos un conjunto de funciones de comprobaciones de tipo, se conocen como las funciones ctype que devuelven un booleano:</p> <ul> <li><code>ctype_alpha</code> \u2192 letras</li> <li><code>ctype_alnum</code> \u2192 alfanum\u00e9ricos</li> <li><code>ctype_digit</code> \u2192 d\u00edgitos</li> <li><code>ctype_punct</code> \u2192 caracteres de puntuaci\u00f3n, sin espacios</li> <li><code>ctype_space</code> \u2192 son espacios, tabulador, salto de l\u00ednea</li> </ul> <pre><code>&lt;?php\n$prueba1 = \"hola\";\n$prueba2 = \"hola33\";\n$prueba3 = \"33\";\n$prueba4 = \",.()[]\";\n$prueba5 = \" ,.()[]\";\n\necho ctype_alpha($prueba1).\"&lt;br&gt;\"; // true\necho ctype_alnum($prueba2).\"&lt;br&gt;\"; // true\necho ctype_digit($prueba3).\"&lt;br&gt;\"; // true\necho ctype_punct($prueba4).\"&lt;br&gt;\"; // true\necho ctype_space($prueba5).\"&lt;br&gt;\"; // false\necho ctype_space($prueba5[0]).\"&lt;br&gt;\"; // true\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#trabajando-con-subcadenas","title":"Trabajando con subcadenas","text":"<p>Si queremos romper las cadenas en trozos, tenemos:</p> <ul> <li><code>explode</code>: convierte en array la cadena mediante un separador.</li> <li><code>implode</code> / <code>join</code>: pasa un array a cadena con un separador</li> <li><code>str_split</code> / <code>chunk_split</code>: pasa una cadena a una array/cadena cada X caracteres</li> </ul> <pre><code>&lt;?php\n$frase = \"Quien busca encuentra, eso dicen, a veces\";\n$partes = explode(\",\", $frase);\n\n$ciudades = [\"Elche\", \"Aspe\", \"Alicante\"];\n$cadenaCiudades = implode(\"&gt;\", $ciudades);\n\n$partes3cadena = chunk_split($frase, 3);\n// Qui \n// en \n// bus \n// ca \n// ...\n$partes3array = str_split($frase, 3);\n// [\"Qui\", \"en \", \"bus\", \"ca \", \"enc\", \u2026] \n?&gt;\n</code></pre> <p>Si queremos trabajar con tokens:</p> <ul> <li><code>strtok(cadena, separador)</code></li> <li>y dentro del bucle: <code>strtok(separador)</code></li> </ul> <p>Finalmente, para separarla en base al formato:</p> <ul> <li><code>sscanf</code>: al rev\u00e9s que <code>sprintf</code>, crea un array a partir de la cadena y el patr\u00f3n.</li> </ul> <p>Finalmente, otras operaciones que podemos realizar para trabajar con subcadenas son:</p> <ul> <li><code>substr_count</code>: n\u00famero de veces que aparece la subcadena dentro de la cadena</li> <li><code>substr_replace</code>: reemplaza parte de la cadena a partir de su posici\u00f3n, y opcionalmente, longitud</li> </ul> <pre><code>&lt;?php\n$batman = \"Bruce Wayne es Batman\";\n$empresa = substr($batman, 6, 5); // Wayne\n$bes = substr_count($batman, \"B\"); // 2\n// Bruce Wayne es camarero\n$camarero1 = substr_replace($batman, \"camarero\", 15);\n$camarero2 = substr_replace($batman, \"camarero\", -6); // quita 6 desde el final\n// Bruno es Batman\n$bruno = substr_replace($batman, \"Bruno\", 0, 11);\n?&gt;\n</code></pre> <p>Tambi\u00e9n disponemos de una serie de funciones que facilitan las codificaciones desde y hacia HTML:</p> <ul> <li><code>htmlentities</code>: convierte a entidades HTML, por ejemplo, <code>\u00e1</code> por <code>&amp;aacute;</code>,  <code>\u00f1</code> por <code>&amp;ntilde;</code>, <code>&lt;</code> por <code>&amp;lt;</code>, etc..</li> <li><code>htmlspecialchars</code>: idem pero solo con los caracteres especiales (<code>&amp;</code>, <code>\"</code>, <code>'</code>, <code>&lt;</code>, <code>&gt;</code>, ...)</li> <li><code>striptags</code>: elimina etiquetas HTML.</li> <li><code>nl2br</code>: cambia saltos de l\u00ednea por <code>&lt;br /&gt;</code>.</li> <li><code>rawurlencode</code> / <code>rawurldecode</code>: codifica/decodifica una URL (espacios, ...).</li> </ul> <p>Estas funciones las utilizaremos en la unidad 4.- Programaci\u00f3n Web.</p>"},{"location":"02.1_php_basico.html#matematicas","title":"Matem\u00e1ticas","text":"<p>Disponemos tanto de constantes como funciones ya definidas para trabajar con operaciones matem\u00e1ticas: https://www.php.net/manual/es/ref.math.php</p> <ul> <li>Constantes ya definidas<ul> <li><code>M_PI</code>, <code>M_E</code>, <code>M_EULER</code>, <code>M_LN2</code>, <code>M_LOG2E</code></li> <li><code>PHP_INT_MAX</code>, <code>PHP_FLOAT_MAX</code></li> </ul> </li> <li>Funciones de c\u00e1lculo<ul> <li><code>pow</code>, <code>sqrt</code>, <code>log</code>, <code>decbin</code>, <code>bindec</code>, <code>decoct</code>, <code>dechex</code>, <code>base_convert</code>, <code>max</code>, <code>min</code></li> </ul> </li> <li>Funciones trigonom\u00e9tricas<ul> <li><code>sin</code>, <code>cos</code>, <code>tan</code>, <code>deg2rad</code>, <code>rad2deg</code></li> </ul> </li> <li>Funciones para trabajar con n\u00fameros aleatorios<ul> <li><code>rand</code>, <code>mt_rand</code> (m\u00e1s r\u00e1pida)</li> </ul> </li> </ul> <p>Aunque la mayor\u00eda de ellas son muy espec\u00edficas de problemas matem\u00e1ticos / estad\u00edsticos, es muy com\u00fan que tengamos que redondear y/o formatear los c\u00e1lculos antes de mostrarlos al usuario.</p> <p>Mediante la funci\u00f3n <code>number_format(numero, cantidadDecimales, separadorDecimales, separadorMiles)</code> podermos pasar n\u00fameros a cadena con decimales y/o separadores de decimales y/o de miles.</p> <pre><code>&lt;?php\n$nf = 1234.5678;\necho number_format($nf, 2); // 1,234.57\necho number_format($nf, 2, \"M\", \"#\"); // 1#234M57\n?&gt;\n</code></pre> <p>Para redondear, tenemos <code>abs</code> para el valor absoluto y <code>round</code> para redondear, <code>ceil</code> para aproximaci\u00f3n por exceso y <code>floor</code> por defecto.</p> <pre><code>&lt;?php\n$num = 7.7;\n$siete = floor($num);\n$ocho = ceil($num);\n\n$otro = 4.49;\n$cuatro = round($otro);\n$cuatrocinco = round($otro, 1);\n$cinco = round($cuatrocinco);\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#tipos-de-datos","title":"Tipos de datos","text":"<p>Finalmente, para realizar conversiones de datos o si queremos trabajar con tipos de datos, tenemos las siguientes funciones:</p> <ul> <li><code>floatval</code>, <code>intval</code>, <code>strval</code>: devuelve una variable del tipo de la funci\u00f3n indicada</li> <li><code>settype</code>: fuerza la conversi\u00f3n</li> <li><code>gettype</code>: obtiene el tipo</li> <li><code>is_int</code>, <code>is_float</code>, <code>is_string</code>, <code>is_array</code>, <code>is_object</code>: devuelve un booleano a partir del tipo recibido</li> </ul> <pre><code>&lt;?php\n$uno = 1;\nvar_dump(is_int($uno)); // true\n$unofloat = floatval($uno);\nsettype($uno, \"string\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_string($uno)); // true\nsettype($uno, \"float\");\nvar_dump(is_int($uno)); // false\nvar_dump(is_float($uno)); // true\nvar_dump(is_int(intval($uno))); // true\n?&gt;\n</code></pre>"},{"location":"02.1_php_basico.html#formularios","title":"Formularios","text":"<p>Los formularios son los elementos de las p\u00e1ginas web que permiten a un usuario introducir informaci\u00f3n en una p\u00e1gina web. As\u00ed, los formularios nos permiten crear p\u00e1ginas web PHP interactivas en las que el contenido de la p\u00e1gina se adapta a la informaci\u00f3n proporcionada por el usuario.</p> <p>Conceptos importantes:</p> <ul> <li>Un formulario se compone de una serie de campos de entrada, etiquetas y botones de env\u00edo. </li> <li>Los campos de entrada pueden ser de varios tipos: texto, contrase\u00f1a, botones de radio, casillas de verificaci\u00f3n, men\u00fas desplegables, etc. - Cada campo de entrada se identifica mediante un nombre y un valor. </li> <li>Cuando el usuario env\u00eda el formulario, los datos introducidos en los campos de entrada se env\u00edan al servidor web, donde se procesan con un script PHP.</li> </ul> <p>Aqu\u00ed nos centraremos en c\u00f3mo procesar los datos no en c\u00f3mo se dise\u00f1an.</p> <p>En un formulario existen varios conceptos importantes:</p> <ul> <li>Action: es la URL a la que se enviar\u00e1n los datos del formulario. Si no se especifica, se enviar\u00e1n a la misma p\u00e1gina.</li> <li>Method: es el m\u00e9todo de env\u00edo de los datos. Puede ser <code>GET</code> o <code>POST</code>. En el caso de <code>GET</code>, los datos se env\u00edan en la URL, mientras que en el caso de <code>POST</code>, los datos se env\u00edan en el cuerpo de la petici\u00f3n.</li> <li>Input: es el campo de entrada de datos. Puede ser de varios tipos: texto, contrase\u00f1a, botones de radio, casillas de verificaci\u00f3n, men\u00fas desplegables, etc.</li> <li>Label: es la etiqueta que acompa\u00f1a al campo de entrada. Sirve para indicar al usuario qu\u00e9 tipo de informaci\u00f3n debe introducir en el campo.</li> <li>Name: es el nombre del campo de entrada. Se utiliza para identificar el campo de entrada en el script PHP que procesa los datos del formulario.</li> </ul>"},{"location":"02.1_php_basico.html#trabajando-con-formularios","title":"Trabajando con formularios","text":"<p>Si es una peetici\u00f3n tipo <code>GET</code> los datos se env\u00edan via URL con el formato <code>var1=valor1&amp;var2=valor2\u2026</code>. Por ejemplo: <code>ejemplo.php?nombre=Bruce+apellido1=Wayne</code>, donde cada par\u00e1metro se separa con <code>&amp;</code> y el nombre y el valor con <code>=</code>, y el nobre del par\u00e1metro es igual al valor del atributo <code>name</code> del campo de entrada.</p> <p>Codificaci\u00f3n de URL</p> <p>Los espacios en blanco se codifican como <code>+</code> o <code>%20</code>, y los caracteres especiales se codifican como <code>%xx</code>, donde <code>xx</code> es el c\u00f3digo ASCII del car\u00e1cter.</p> <p>Se divide en dos pasos:</p> <ol> <li>Generar un formulario con <code>action='archivo.php' method='GET'</code></li> <li>En el archivo <code>.php</code> (del lado servidor) leer los datos con <code>$_GET['nombreVar']</code></li> </ol> <p>Vamos a separar siempre que podamos el c\u00f3digo HTML del de PHP. Por ejemplo, el formulario lo colocamos en <code>saluda.html</code>:</p> <pre><code>&lt;form action=\"saluda.php\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt; \n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=\"submit\" value=\"enviar\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre> <p>Los datos se recogen a trav\u00e9s de variables superglobales, en este caso <code>$_GET</code> y <code>$_POST</code> (dependiendo del m\u00e9todo de env\u00edo).</p> <p>Recogemos los datos en <code>saluda.php</code>:</p> <pre><code>&lt;?php\n$nombre = $_GET[\"nombre\"];\n$apellido1 = $_GET[\"apellido1\"];\n\necho \"Hola $nombre $apellido1\";\n?&gt;\n</code></pre> <p>Si lo quisi\u00e9ramos realizar todo en un \u00fanico archivo (lo cual no es recomendable), podemos hacerlo as\u00ed:</p> <pre><code>&lt;form action=\"\" method=\"get\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre: &lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\"&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=\"apellido1\"&gt;Primer apellido:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"apellido1\" id=\"apellido1\"&gt;&lt;/p&gt;\n    &lt;input type=\"submit\" value=\"enviar\"&gt;\n&lt;/form&gt;\n&lt;p&gt;\n    &lt;?php\n    //isset() comprueba si una variable est\u00e1 definida y no es NULL\n    if(isset($_GET['nombre'])) {\n        $nombre = $_GET[\"nombre\"];\n        $apellido1 = $_GET[\"apellido1\"];\n\n        echo \"Hola $nombre $apellido1\";\n    }\n    ?&gt;\n&lt;/p&gt;\n</code></pre> <p>El trabajo con formularios lo estudiaremos en profundidad en la unidad 4, y veremos que adem\u00e1s de <code>GET</code>, podemos enviar los datos con <code>POST</code>.</p>"},{"location":"02.1_php_basico.html#referencias","title":"Referencias","text":"<ul> <li>Manual de PHP</li> <li>PHP en 2020, por Jes\u00fas Amieiro</li> <li>Apuntes de PHP de Bartolom\u00e9 Sintes, profesor del IES Abastos de Valencia</li> <li>Gu\u00eda de Estilo - PSR</li> <li>PHP - La manera correcta</li> </ul> <p>\u00a1No te limites a copiar y pegar! \u00a1Practica y experimenta con los ejercicios!</p>"},{"location":"02.2_php_avanzado.html","title":"PHP Avanzado","text":""},{"location":"02.2_php_avanzado.html#funciones-conceptos-avanzados","title":"Funciones: conceptos avanzados","text":"<p>En PHP existen diferentes formas de definir una funci\u00f3n:</p> <ul> <li>Asignada a una variable.</li> <li>De forma an\u00f3nima.</li> <li>Closure.</li> <li>Arrow functions.</li> </ul>"},{"location":"02.2_php_avanzado.html#funciones-variables","title":"Funciones variables","text":"<p>PHP busca una funci\u00f3n si se le pasa el nombre de una funci\u00f3n como una cadena. Por ejemplo, para llamar a una funci\u00f3n cuyo nombre est\u00e1 en una variable:</p> <pre><code>&lt;?php\n  function hello(){\n   echo \"Hello Nabil hasan\";\n  }\n  $var=\"Hello\";\n  $var(); // prints \"Hello Nabil hasan\"\n\n  //Otro ejemplo\n  function add($x, $y){\n    echo $x+$y;\n  }\n  $var=\"add\";\n  $var(10,20); // 30\n?&gt;  \n</code></pre>"},{"location":"02.2_php_avanzado.html#funciones-anonimas","title":"Funciones an\u00f3nimas","text":"<p>Las funciones an\u00f3nimas son funciones que no tienen nombre y se definen utilizando la palabra clave <code>function</code>. Por ejemplo, para definir una funci\u00f3n an\u00f3nima y llamarla posteriormente:</p> <p>Ejemplo: $var=function ($arg1, $arg2) { return $val; };</p> <p><pre><code>&lt;?php\n\n$multiply = function ($x, $y) {\n return $x * $y;\n};\necho $multiply(10, 20); // 200\n?&gt;\n</code></pre> En este caso la funci\u00f3n (NO TIENE NOMBRE) se asigna a la variable <code>$multiply</code> y se llama posteriormente.</p> <p>Esto tiene muchas aplicaciones, como pasar funciones como argumentos a otras funciones, devolver funciones de otras funciones, etc.</p> <pre><code>&lt;?php\n$add = function ($x, $y) {\n return $x + $y;\n};\n$subtract = function ($x, $y) {\n return $x - $y;\n};\n\nfunction calc($x, $y, $op) {\n return $op($x, $y);\n}\n\necho calc(10, 20, $add); // 30\necho calc(10, 20, $subtract); // -10\n?&gt;\n</code></pre> <p>Pero la forma m\u00e1s com\u00fan de usar funciones an\u00f3nimas es declaradas en el momento de pasarlas como argumentos a otras funciones, como en el siguiente ejemplo:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\n\n// Funci\u00f3n an\u00f3nima que filtra los n\u00fameros pares\n$even = array_filter($nums, function ($n) {\n return $n % 2 == 0;\n});\n\n// Funci\u00f3n an\u00f3nima que eleva al cuadrado\n$squared = array_map(function ($n) {\n return $n * $n;\n}, $nums);\n</code></pre>"},{"location":"02.2_php_avanzado.html#closures","title":"Closures","text":"<p>Una funci\u00f3n anonima no tiene acceso a las variables fuera de su \u00e1mbito, por lo que no puede utilizar variables definidas fuera de la funci\u00f3n. </p> <p>Si se quiere que una funci\u00f3n an\u00f3nima tenga acceso a variables definidas fuera de su \u00e1mbito, se puede utilizar un <code>closure</code>. Un closure es una funci\u00f3n an\u00f3nima que tiene acceso a las variables definidas en el \u00e1mbito en el que se define.</p> <p>Digamos que <code>encerramos</code> a la variable dentro de una <code>caja (closure)</code> y se queda con el valor que ten\u00eda en el momento de la creaci\u00f3n de la funci\u00f3n an\u00f3nima (sin importar si la variable cambia despu\u00e9s).</p> <p>Los closures han quedado obsoletos en PHP 7.4 y se recomienda utilizar las funciones flecha, ya que estas son m\u00e1s concisas, f\u00e1ciles de leer y lo m\u00e1s importante tienen acceso a las variables del \u00e1mbito padre.</p> <p>Un ejemplo de closure ser\u00eda:</p> <pre><code>&lt;?php\n$x = 10;\n$add = function ($y) use ($x) {\n return $x + $y;\n};\necho $add(20); // 30\n?&gt;\n</code></pre> <p>En este caso, la funci\u00f3n an\u00f3nima <code>$add</code> tiene acceso a la variable <code>$x</code> definida fuera de su \u00e1mbito.</p>"},{"location":"02.2_php_avanzado.html#funciones-callbacks","title":"Funciones Callbacks","text":"<p>Una funci\u00f3n de callback es una funci\u00f3n que se pasa como argumento a otra funci\u00f3n. La funci\u00f3n que recibe la funci\u00f3n de callback la ejecuta en un momento determinado.</p> <p>Tiene el nombre del <code>callback</code> porque la funci\u00f3n que recibe la funci\u00f3n de callback la <code>llama de vuelta</code> en un momento determinado. Su nombre viene principalmente de la programaci\u00f3n as\u00edncrona, donde se pasa una funci\u00f3n de callback a una funci\u00f3n as\u00edncrona y se llama de vuelta cuando la funci\u00f3n as\u00edncrona ha terminado.</p> <p>El ejemplo anteriro de <code>array_filter</code> y <code>array_map</code> son ejemplos de funciones que reciben funciones de callback.</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\n\n// Funci\u00f3n de callback que filtra los n\u00fameros pares\nfunction is_even($n) {\n return $n % 2 == 0;\n}\n\n$even = array_filter($nums, 'is_even');\n\n?&gt;\n</code></pre>"},{"location":"02.2_php_avanzado.html#arrow-functions","title":"Arrow functions","text":"<p>Las funciones <code>fecla</code> son una forma m\u00e1s concisa de definir funciones an\u00f3nimas. Se definen con la sintaxis <code>fn() =&gt; expresi\u00f3n</code>.  Estas funciones tienen acceso a las variables del \u00e1mbito padre, lo que las hace muy \u00fatiles para trabajar que los closures.</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\n\n// Funci\u00f3n flecha que filtra los n\u00fameros pares\n$even = array_filter($nums, fn($n) =&gt; $n % 2 == 0);\n\n// Funci\u00f3n flecha que eleva al cuadrado\n$squared = array_map(fn($n) =&gt; $n * $n, $nums);\n\n//Tambi\u00e9n se pueden escribir en varias l\u00edneas, pero hay que usar llaves y agregar la palabra clave return\n$even = array_filter($nums, fn($n) =&gt; {\n return $n % 2 == 0;\n});\n\n//si se quiere acceder a una variable del \u00e1mbito padre, se puede hacer directamente\n$x = 10;\n$add = fn($y) =&gt; $x + $y;\n\n?&gt;\n</code></pre> <p>Las funciones flecha son realmente \u00fatiles para trabajar con arrays, y en general aplicar procesos a cada elemento de una lista.</p>"},{"location":"02.2_php_avanzado.html#trabajo-avanzado-con-arrays","title":"Trabajo avanzado con arrays","text":""},{"location":"02.2_php_avanzado.html#generar-valores-numericos-en-sucesion-aritmetica","title":"Generar valores num\u00e9ricos en sucesi\u00f3n aritm\u00e9tica","text":"<p>Para generar un array con valores num\u00e9ricos en sucesi\u00f3n aritm\u00e9tica, se puede utilizar la funci\u00f3n <code>range()</code>. Esta funci\u00f3n recibe como par\u00e1metros el valor inicial, el valor final y el incremento. Por ejemplo, para generar un array con los n\u00fameros del 1 al 10:</p> <pre><code>&lt;?php\n$nums = range(1, 10); // Incremento de 1 por defecto\nprint_r($nums);\n?&gt;\n</code></pre> <p>Tambi\u00e9n se puede especificar el incremento, por ejemplo, para generar un array con los n\u00fameros pares del 2 al 10:</p> <pre><code>&lt;?php\n$nums = range(2, 10, 2);  // Incremento de 2\nprint_r($nums);\n?&gt;\n</code></pre>"},{"location":"02.2_php_avanzado.html#contar-elementos-de-un-array","title":"Contar elementos de un array","text":"<p>Para contar los elementos de un array, se puede utilizar la funci\u00f3n <code>count()</code>. Por ejemplo, para contar los elementos del array anterior:</p> <pre><code>&lt;?php\necho count($nums);\n?&gt;\n</code></pre> <p>Tambi\u00e9n se puede realizar de forma recursiva, es decir, si el array tiene arrays dentro, se contar\u00e1n todos los elementos de todos los arrays. Para ello, se puede utilizar la funci\u00f3n <code>count()</code> con el par\u00e1metro <code>COUNT_RECURSIVE</code>:</p> <pre><code>&lt;?php\n$nums = array(1, 2, array(3, 4, 5), 6, 7);\necho count($nums); // Muestra 5\necho count($nums, COUNT_RECURSIVE); // Muestra 8\n?&gt;\n</code></pre> <p>Otra opci\u00f3n es contar el n\u00ba de veces que aparece cada valor en un matriz, utilizando la funci\u00f3n <code>array_count_values()</code>:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5);\nprint_r(array_count_values($nums));\n?&gt;\n</code></pre> <p>PHP no tiene el concepto de Conjunto (Set) como otros lenguajes, un conjunto es un array sin duplicados. Se puede simular utilizando arrays y las funciones <code>array_unique()</code> y <code>array_values()</code>. La primera elimina los duplicados y la segunda reindexa el array:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5); // Array con duplicados\n$nums = array_values(array_unique($nums)); // Array sin duplicados\n\n//o con el operador ... (spread)\n$nums = [...array_unique($nums)]; // Array sin duplicados\n\nprint_r($nums);\n?&gt;\n</code></pre> <p>M\u00ednimo y m\u00e1ximo de un array</p> <p>Para obtener el valor m\u00ednimo y m\u00e1ximo de un array, se pueden utilizar las funciones <code>min()</code> y <code>max()</code>. Por ejemplo, para obtener el valor m\u00ednimo y m\u00e1ximo del array anterior:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5);\necho min($nums); // Muestra 1\necho max($nums); // Muestra 5\n?&gt;\n</code></pre> <p>Ordenar una matriz</p> <p>Para ordenar una matriz, se puede utilizar la funci\u00f3n <code>sort()</code>. Por ejemplo, para ordenar el array anterior:</p> <pre><code>&lt;?php\n$nums = array(5, 3, 1, 4, 2);\nsort($nums);\nprint_r($nums);\n?&gt;\n</code></pre> <p>Existen diferentes m\u00e9todos para ordenar matrices como:</p> <ul> <li><code>sort()</code>: Ordena un array de menor a mayor.</li> <li><code>rsort()</code>: Ordena un array de mayor a menor.</li> <li><code>asort()</code>: Ordena un array asociativo manteniendo la relaci\u00f3n entre clave y valor.</li> <li><code>ksort()</code>: Ordena un array asociativo por clave.</li> <li><code>arsort()</code>: Ordena un array asociativo de mayor a menor manteniendo la relaci\u00f3n entre clave y valor.</li> </ul> <p>Buscar un valor en un array</p> <p>Para buscar un valor en un array, se puede utilizar la funci\u00f3n <code>in_array()</code>. Por ejemplo, para buscar el valor 3 en el array anterior:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\nif (in_array(3, $nums)) {\n    echo \"El valor 3 est\u00e1 en el array\";\n} else {\n    echo \"El valor 3 no est\u00e1 en el array\";\n}\n\n//in_array acepta un tercer par\u00e1metro para comparar estrictamente que el valor sea del mismo tipo\nif (in_array(\"3\", $nums, true)) {\n    echo \"El valor '3' est\u00e1 en el array\";\n} else {\n    echo \"El valor '3' no est\u00e1 en el array\";\n}\n\n?&gt;\n</code></pre> <p>Si adem\u00e1s se quiere saber en qu\u00e9 posici\u00f3n est\u00e1 el valor, se puede utilizar la funci\u00f3n <code>array_search()</code>, que devuelve la posici\u00f3n del valor en el array, sino devuelve <code>false</code>:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\n$pos = array_search(3, $nums);\necho \"El valor 3 est\u00e1 en la posici\u00f3n $pos\";\n?&gt;\n</code></pre> <p>Extraer elementos aleatorios de un array</p> <p>Para extraer elementos aleatorios de un array, se puede utilizar la funci\u00f3n <code>array_rand()</code>. Por ejemplo, para extraer un elemento aleatorio del array anterior:</p> <pre><code>&lt;?php\n$nums = array(1, 2, 3, 4, 5);\n$rand_key = array_rand($nums);\necho \"Elemento aleatorio: $nums[$rand_key]\";\n\n//Podemos adem\u00e1s indicar la cantidad de elementos a extraer\n$rand_keys = array_rand($nums, 2);\necho \"Elementos aleatorios: $nums[$rand_keys[0]] y $nums[$rand_keys[1]]\";\n\n?&gt;\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html","title":"PHP: Evoluci\u00f3n del lenguaje a lo largo del tiempo","text":"<p>PHP ha evolucionado mucho en su sintaxis a lo largo del tiempo, desde su lanzamiento en 1995. En este articulo, se repasar\u00e1n las caracter\u00edsticas m\u00e1s recientes de PHP 7 y la \u00faltima versi\u00f3n PHP 8.x, con ejemplos de c\u00f3mo se hac\u00edan antes y c\u00f3mo se hacen ahora con la nueva sintaxis.</p> <p>Muchas de las caracter\u00edsticas, como la declaraci\u00f3n de tipos, las expresiones de flecha y las expresiones de coincidencia, han hecho que PHP sea m\u00e1s seguro y f\u00e1cil de leer. Tambi\u00e9n se han introducido nuevas caracter\u00edsticas, como las propiedades de solo lectura y las enumeraciones, que hacen que el c\u00f3digo sea f\u00e1cil de mantener y m\u00e1s amigo del desarrollador.</p> <p>Algunas de estas nuevas incorporaciones a la sintaxis es lo que se conocer como <code>az\u00facar sint\u00e1ctico</code>, que es una forma de escribir c\u00f3digo de manera m\u00e1s concisa y f\u00e1cil de leer, pero que no cambia la funcionalidad subyacente del c\u00f3digo. Ejemplos de esto son las expresiones de flecha, los argumentos con nombre, las propiedades de solo lectura, entre otros.</p>"},{"location":"02.3_php_versiones_evolucion.html#nuevas-caracteristicas-de-php-7","title":"Nuevas car\u00e1cter\u00edsticas de PHP 7","text":"<p>Desde su lanzamiento en 2015, PHP 7 ha sido un cambio de juego para el lenguaje. En este tutorial, repasar\u00e9 todas las funciones m\u00e1s recientes con ejemplos reales de cu\u00e1ndo podr\u00eda optar por usarlas.</p>"},{"location":"02.3_php_versiones_evolucion.html#tipos-de-retorno-escalares-y-de-declaracion-de-tipo-de-retorno","title":"Tipos de retorno escalares y de declaraci\u00f3n de tipo de retorno","text":"<p>PHP 7.0 introdujo la declaraci\u00f3n de tipo de retorno, lo que significa que puede especificar el tipo de valor que se espera que devuelva una funci\u00f3n. Esto es \u00fatil para garantizar que su c\u00f3digo sea m\u00e1s seguro y f\u00e1cil de entender. Veamos un ejemplo.</p> Antes...PHP 7.0 <pre><code>function sum($a, $b) {\n    return $a + $b;\n}\n</code></pre> <p><pre><code>function sum(int $a, int $b): int { # (1)!\n    return $a + $b;\n}\n</code></pre></p> <ol> <li>la funci\u00f3n <code>sum</code> espera dos argumentos de tipo entero y devuelve un entero. Esto hace que el c\u00f3digo sea m\u00e1s seguro y f\u00e1cil de entender.</li> </ol> <p>Dado que PHP es un lenguaje de tipificaci\u00f3n d\u00e9bil, ciertos valores para los tipos de par\u00e1metro y de retorno se emitir\u00e1n en funci\u00f3n del contexto. Si pasamos el valor \u201c3\u201d en una funci\u00f3n que tiene un par\u00e1metro declarado de tipo int, el int\u00e9rprete lo aceptar\u00e1 como un entero y no lanzar\u00e1 ning\u00fan error. Si no deseas esto, puede habilitar modo estricto a\u00f1adiendo una directiva de declarar.</p> <p><code>Declarar (tipos_estrictos = 1);</code></p> <p>Esto se establece en una base por archivo, por lo que si deseas habilitar el modo estricto en todos tus archivos, puedes hacerlo en tu archivo de configuraci\u00f3n <code>php.ini</code>.</p>"},{"location":"02.3_php_versiones_evolucion.html#declaraciones-de-importacion-de-grupo","title":"Declaraciones De Importaci\u00f3n De Grupo","text":"<p>Ahora, podemos agrupar las declaraciones de importaci\u00f3n para las clases que se originan desde el mismo espacio de nombres en la l\u00ednea de \u2018uso.\u2019 Esto deber\u00eda ayudar a alinear las declaraciones de una manera significativa o simplemente guardar algunos bytes en tus archivos.</p> Antes...PHP 7.0 <pre><code>use App\\Models\\User;\nuse App\\Models\\Post;\nuse App\\Models\\Comment;\n</code></pre> <pre><code>use App\\Models\\{User, Post, Comment};\n# o si preferimos en multiples lineas\nuse App\\Models\\{\n    User,\n    Post,\n    Comment\n};\n</code></pre> <p>PHP 7.0 introdujo una nueva sintaxis para la declaraci\u00f3n de espacio de nombres. Ahora puedes declarar m\u00faltiples espacios de nombres en una sola l\u00ednea. Veamos un ejemplo.</p> Antes...PHP 7.0 <pre><code>namespace App\\Models;\nuse App\\Models\\User;\nuse App\\Models\\Post;\nuse App\\Models\\Comment;\n</code></pre> <pre><code>namespace App\\Models {\n    use App\\Models\\{User, Post, Comment};\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#operador-coalescente-nulo","title":"Operador Coalescente Nulo","text":"<p>Esto resuelve un problema com\u00fan en la programaci\u00f3n PHP, donde queremos asignar un valor a una variable de otra variable, si esta \u00faltima est\u00e1 realmente configurada; de lo contrario proporcionarle un valor diferente a esta. Se utiliza com\u00fanmente cuando trabajamos con la entrada proporcionada por el usuario.</p> Antes...PHP 7.0 <pre><code>$name = isset($_GET['name']) ? $_GET['name'] : 'Guest';\n</code></pre> <p><pre><code>$name = $_GET['name'] ?? 'Guest';\n</code></pre> Esto tambi\u00e9n puede estar encadenado con un n\u00famero de variables:</p> <pre><code>$name = $_GET['name'] ?? $_POST['name'] ?? 'default';\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#operador-de-nave-espacial","title":"Operador De Nave Espacial","text":"<p>Este es un operador de comparaci\u00f3n que se introdujo en PHP 7.0. Es \u00fatil cuando desea comparar dos valores y obtener un resultado basado en la comparaci\u00f3n. Veamos un ejemplo.</p> Antes...PHP 7.0 <pre><code>if ($a &gt; $b) {\n    return 1;\n} elseif ($a == $b) {\n    return 0;\n} else {\n    return -1;\n}\n</code></pre> <p><pre><code>return $a &lt;=&gt; $b;  # (1)!\n</code></pre></p> <p>Este operador devuelve -1 si el valor de la izquierda es menor que el de la derecha, 0 si son iguales y 1 si el valor de la izquierda es mayor que el de la derecha.</p> <ol> <li>Los valores comparados pueden ser enteros, flotantes, cadenas o incluso matrices. Consulta la documentaci\u00f3n para tener una idea de c\u00f3mo se comparan los diferentes valores entre s\u00ed.</li> </ol>"},{"location":"02.3_php_versiones_evolucion.html#clases-anonimas","title":"Clases An\u00f3nimas","text":"<p>Las clases an\u00f3nimas son una forma de definir una clase sin un nombre. Esto es \u00fatil cuando solo necesita una clase para un prop\u00f3sito espec\u00edfico y no desea crear una clase separada. Veamos un ejemplo.</p> Antes...PHP 7.0 <pre><code>class Logger\n{\n    public function log($message)\n    {\n        echo $message;\n    }\n}\n\n$logger = new Logger();\n$logger-&gt;log('Hello, World!');\n</code></pre> <pre><code>$logger = new class {\n    public function log($message)\n    {\n        echo $message;\n    }\n};\n\n$logger-&gt;log('Hello, World!');\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#nuevas-funciones-en-php-71","title":"Nuevas funciones en PHP 7.1","text":"<p>PHP 7.1 se lanz\u00f3 en 2017 y trajo consigo una serie de nuevas funciones y mejoras. A continuaci\u00f3n, se presentan algunas de las caracter\u00edsticas m\u00e1s destacadas.</p>"},{"location":"02.3_php_versiones_evolucion.html#parametros-nullable","title":"Par\u00e1metros 'nullable'","text":"<p>Si en PHP7.0, se permit\u00edan declarar los tipos, en PHP 7.1 se permiti\u00f3 declarar los tipos nulos. Esto significa que puedes declarar un par\u00e1metro como nulo si no se pasa ning\u00fan valor. Veamos un ejemplo.</p> Antes...PHP 7.1 <pre><code>function getUser($id) {\n    if ($id) {\n        return User::find($id);\n    }\n}\n</code></pre> <p><pre><code>function getUser(?int $id) { # (1)!\n    if ($id) {\n        return User::find($id);\n    }\n}\n</code></pre></p>"},{"location":"02.3_php_versiones_evolucion.html#funciones-void","title":"Funciones <code>void</code>","text":"<p>Se introdujo el tipo de retorno <code>void</code>, que significa que una funci\u00f3n no devuelve ning\u00fan valor. Esto es \u00fatil cuando una funci\u00f3n no necesita devolver un valor. Veamos un ejemplo.</p> Antes...PHP 7.1 <pre><code>function log($message) {\n    echo $message;\n}\n</code></pre> <pre><code>function log($message): void {\n    echo $message;\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#constantes-visibles-en-namespaces","title":"Constantes visibles en namespaces","text":"<p>Se introdujeron tambi\u00e9n las constantes visibles en los espacios de nombres, incluyendo el soporte que permite la definici\u00f3n del nivel de visibilidad de las constantes de clase. Ahora, podr\u00e1n ser privadas, protegidas o p\u00fablicas, \u00fanica opci\u00f3n de visibilidad hasta PHP 7.0.</p> Antes...PHP 7.1 <pre><code>class User\n{\n    const STATUS_ACTIVE = 'active';\n    const STATUS_INACTIVE = 'inactive';\n}\n</code></pre> <pre><code>class User\n{\n    public const STATUS_ACTIVE = 'active';\n    protected const STATUS_INACTIVE = 'inactive';\n    private const STATUS_DELETED = 'deleted\n}\n\necho User::STATUS_ACTIVE; # 'active'\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#multicaptura-de-excepciones","title":"Multicaptura de excepciones","text":"<p>En PHP 7.1, se introdujo la capacidad de capturar m\u00faltiples excepciones en un solo bloque catch. Esto es \u00fatil cuando desea manejar diferentes tipos de excepciones de la misma manera, con lo que queda un c\u00f3digo m\u00e1s limpio. Veamos un ejemplo.</p> Antes...PHP 7.1 <pre><code>try {\n    // c\u00f3digo que puede lanzar una excepci\u00f3n\n} catch (Exception $e) {\n    // manejar la excepci\u00f3n\n} catch (CustomException $e) {\n    // manejar la excepci\u00f3n\n}\n</code></pre> <pre><code>try {\n    // c\u00f3digo que puede lanzar una excepci\u00f3n\n} catch (Exception | CustomException $e) { # (1)!\n    // manejar la excepci\u00f3n\n}\n</code></pre> <p>PHP 7.1 incluye m\u00e1s novedades, para conocer todas consultar la documentaci\u00f3n oficial.</p>"},{"location":"02.3_php_versiones_evolucion.html#nuevas-funciones-en-php-74","title":"Nuevas funciones en PHP 7.4","text":"<p>PHP 7.4 se lanz\u00f3 en 2017 y trajo consigo una serie de nuevas funciones y mejoras. A continuaci\u00f3n, se presentan algunas de las caracter\u00edsticas m\u00e1s destacadas.</p>"},{"location":"02.3_php_versiones_evolucion.html#tipo-de-objeto","title":"Tipo de objeto","text":"<p>En PHP 7.4, se introdujo el tipo de objeto, que permite declarar un tipo de objeto espec\u00edfico como tipo de par\u00e1metro o tipo de retorno. Esto es \u00fatil cuando desea asegurarse de que un par\u00e1metro o un valor de retorno sea una instancia de una clase espec\u00edfica. Veamos un ejemplo.</p> Antes...PHP 7.4 <pre><code>function getUser($id) {\n    return User::find($id);\n}\n</code></pre> <p><pre><code>function getUser(int $id): User { # (1)!\n    return User::find($id);\n}\n</code></pre></p> <p>Tambi\u00e9n se permite las propiedades tipadas en las clases, lo que significa que puedes declarar el tipo de una propiedad de clase. Esto es \u00fatil cuando desea asegurarse de que una propiedad de clase sea de un tipo espec\u00edfico. Veamos un ejemplo.</p> Antes...PHP 7.4 <pre><code>class User\n{\n    private $id;\n    protected $email;\n}\n</code></pre> <pre><code>class User\n{\n    private int $id; \n    protected string $email;\n}\n</code></pre> <p>Tambi\u00e9n se puede declarar propiedades de clase como nulas, lo que significa que la propiedad puede ser nula. Esto es \u00fatil cuando desea permitir que una propiedad de clase sea nula. Veamos un ejemplo.</p> Antes...PHP 7.4 <pre><code>class User\n{\n    private $address;\n}\n</code></pre> <pre><code>class User\n{\n    private ?Address $address; \n\n    public function setAddress(?Address $address): void {\n        $this-&gt;address = $address;\n    }\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#funciones-arrow","title":"Funciones <code>Arrow</code>","text":"<p>Arrow functions son una forma m\u00e1s concisa de definir funciones an\u00f3nimas en PHP. Son similares a las funciones an\u00f3nimas, pero con una sintaxis m\u00e1s corta y clara.</p> Antes...PHP 7.4 <pre><code>$numbers = [1, 2, 3, 4, 5];\n$squared = array_map(function ($n) {\n    return $n * $n;\n}, $numbers);\n</code></pre> <p><pre><code>$squared = array_map(fn($n) =&gt; $n * $n, $numbers);\n</code></pre></p> <ol> <li>La funci\u00f3n <code>fn</code> es una forma abreviada de definir funciones an\u00f3nimas en PHP. Es m\u00e1s concisa y clara que la sintaxis anterior.</li> </ol>"},{"location":"02.3_php_versiones_evolucion.html#funciones-covariantes-de-retorno","title":"Funciones <code>Covariantes de retorno</code>","text":"<p>En PHP 7.4, se introdujeron las covariantes de retorno, lo que significa que puede devolver un tipo m\u00e1s espec\u00edfico en una subclase que en la clase base. </p> Antes...PHP 7.4 <pre><code>class Animal {\n    public function eat(): Animal {\n        return new Animal();\n    }\n}\n\nclass Dog extends Animal {\n    public function eat(): Animal {\n        return new Dog();\n    }\n}\n</code></pre> <p><pre><code>class Animal {\n    public function eat(): self {\n        return new Animal();\n    }\n}\n\nclass Dog extends Animal {\n    public function eat(): self { #(1)!\n        return new Dog();\n    }\n}\n</code></pre></p> <ol> <li>La funci\u00f3n <code>eat</code> en la clase <code>Animal</code> y la clase <code>Dog</code> devuelven un tipo m\u00e1s espec\u00edfico en la subclase que en la clase base. <code>self</code> se refiere a la clase actual, lo que significa que la funci\u00f3n <code>eat</code> en la clase <code>Dog</code> devuelve una instancia de la clase <code>Dog</code>.</li> </ol>"},{"location":"02.3_php_versiones_evolucion.html#funciones-contravariantes-de-parametros","title":"Funciones <code>Contravariantes de par\u00e1metros</code>","text":"<p>En PHP 7.4, se introdujeron las contravariantes de par\u00e1metros, lo que significa que puede aceptar un tipo m\u00e1s gen\u00e9rico en una subclase que en la clase base.</p> Antes...PHP 7.4 <pre><code>class Animal {\n    public function eat(Animal $animal) {\n        // code\n    }\n}\n\nclass Dog extends Animal {\n    public function eat(Dog $dog) {\n        // code\n    }\n}\n</code></pre> <p><pre><code>class Animal {\n    public function eat(self $animal) {\n        // code\n    }\n}\n\nclass Dog extends Animal {\n    public function eat(Animal $dog) { #(1)!\n        // code\n    }\n}\n</code></pre></p> <ol> <li>La funci\u00f3n <code>eat</code> en la clase <code>Animal</code> acepta un tipo m\u00e1s gen\u00e9rico en la subclase que en la clase base. <code>self</code> se refiere a la clase actual, lo que significa que la funci\u00f3n <code>eat</code> en la clase <code>Animal</code> acepta una instancia de la clase <code>Animal</code>.</li> </ol>"},{"location":"02.3_php_versiones_evolucion.html#sintaxis-de-corto-circuito","title":"Sintaxis de corto circuito","text":"<p>En PHP 7.4, se introdujo la sintaxis de cortocircuito, que permite asignar un valor a una variable solo si la variable no est\u00e1 definida. Esto es \u00fatil cuando desea asignar un valor predeterminado a una variable si no est\u00e1 definida. Veamos un ejemplo.</p> Antes...PHP 7.4 <pre><code>if (! isset($name)) {\n    $name = 'Guest';\n}\n</code></pre> <p><pre><code>$name = $name ?? 'Guest';  #(1)!\n</code></pre></p> <ol> <li>Solo si $name no est\u00e1 definido, se asignar\u00e1 el valor 'Guest' a la variable $name, en caso contrario, conservar\u00e1 su valor.</li> </ol>"},{"location":"02.3_php_versiones_evolucion.html#desempaquetado-dentro-de-arrays","title":"Desempaquetado dentro de arrays","text":"<p>En PHP 7.4, se introdujo la capacidad de desempaquetar variables dentro de matrices. Esto es \u00fatil cuando desea asignar m\u00faltiples variables a una matriz. Veamos un ejemplo.</p> Antes...PHP 7.4 <pre><code>$parts = ['apple', 'banana'];\n$fruits = ['orange', $parts[0], $parts[1], 'pear'];\n</code></pre> <pre><code>$parts = ['apple', 'banana'];\n$fruits = ['orange', ...$parts, 'pear'];  #(1)!\n// ['orange', 'apple', 'banana', 'pear']\n</code></pre> <p>Para consultar todas las novedades de PHP 7.4, puedes visitar la documentaci\u00f3n oficial.</p>"},{"location":"02.3_php_versiones_evolucion.html#tipos-de-retorno-nulo","title":"Tipos de retorno nulo","text":"<p>Tambi\u00e9n se introdujeron los tipos de retorno nulo, lo que significa que puede especificar que una funci\u00f3n puede devolver un tipo espec\u00edfico o nulo. Esto es \u00fatil cuando una funci\u00f3n puede devolver un valor o nulo. Veamos un ejemplo.</p> Antes...PHP 7.1 <pre><code>function getUser($id) {\n    if ($id) {\n        return User::find($id);\n    }\n}\n</code></pre> <p><pre><code>function getUser($id): ?User { # (1)!\n    if ($id) {\n        return User::find($id);\n    }\n}\n</code></pre></p>"},{"location":"02.3_php_versiones_evolucion.html#nuevas-caracteristicas-de-php-8","title":"Nuevas car\u00e1cter\u00edsticas de PHP 8","text":"<p>Desde su lanzamiento a fines de 2020, PHP 8 ha sido un punto de inflexi\u00f3n. En este tutorial, repasar\u00e9 todas las funciones m\u00e1s recientes con ejemplos reales de cu\u00e1ndo podr\u00eda optar por usarlas.</p> <p>Me enamor\u00e9 del lenguaje PHP al principio de mi carrera y, desde entonces, lo he defendido como lenguaje cada vez que he tenido la oportunidad. Sin embargo, desde el lanzamiento de la versi\u00f3n 8.*, no he tenido que exagerar ni un solo detalle. En cambio, he podido confiar \u00fanicamente en los hechos con el lenguaje. Echemos un vistazo a algunas de las caracter\u00edsticas destacadas de la versi\u00f3n 8.0 de PHP.</p>"},{"location":"02.3_php_versiones_evolucion.html#promocion-de-pripiedades-en-constructores","title":"Promoci\u00f3n de pripiedades en constructores","text":"<p>Esta debe ser una de las funciones m\u00e1s \u00fatiles de la versi\u00f3n 8.0 y que m\u00e1s tiempo y pulsaciones de techa puede ahorrar. Vamos a desglosarla:</p> Antes...PHP 8.0 <pre><code>class Cliente\n{\n    private $url;\n\n    public function __construct($url)\n    {\n        $this-&gt;url = $url;\n    }\n}\n</code></pre> <pre><code>class Client\n{\n    public function __construct(\n        private string $url,\n    ) {}\n}\n</code></pre> <p>Ahora podemos establecer propiedades en nuestros objetos directamente en el constructor como argumento en lugar de tener que asignarlas manualmente. Ahora utilizo esta funci\u00f3n casi todo el tiempo, ya que ahorra esfuerzo, pero tambi\u00e9n mantiene las propiedades contenidas en el constructor, por lo que comprendes mucho m\u00e1s sobre tus objetos de inmediato, sin necesidad de desplazarte por la pantalla.</p>"},{"location":"02.3_php_versiones_evolucion.html#union-types","title":"Union Types","text":"<p>Otra caracter\u00edstica fant\u00e1stica que se lanz\u00f3 son los tipos de uni\u00f3n. Aqu\u00ed es donde una variable con sugerencia de tipo o un tipo de retorno puede ser uno o m\u00e1s tipos. Esto ha ayudado con el an\u00e1lisis est\u00e1tico, donde puede haber retornos condicionales dentro de un m\u00e9todo. Veamos un ejemplo.</p> Antes...PHP 8.0 <pre><code>class PostService\n{\n    public function all(): mixed\n    {\n        if (! Auth::check()) {\n            return [];\n        }\n\n        return Post::query()-&gt;get();\n    }\n}\n</code></pre> <pre><code>class PostService\n{\n    public function all(): array|Collection\n    {\n        if (! Auth::check()) {\n            return [];\n        }\n\n        return Post::query()-&gt;get();\n    }\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#argumentos-con-nombre","title":"Argumentos con nombre","text":"<p>Esta es una caracter\u00edstica que he estado esperando durante mucho tiempo. Ahora, en lugar de tener que recordar el orden de los argumentos de un m\u00e9todo, puedes pasarlos por nombre. Esto es especialmente \u00fatil cuando tienes m\u00e9todos con muchos argumentos y solo necesitas pasar uno o dos.</p> Antes ...PHP 8.0 <pre><code>class ProcessImage\n{\n    public static function handle(string $path, int $height, int $width, string $type, int $quality, int $compression): void\n    {\n        // logic for handling image processing\n    }\n}\n\nProcessImage::handle('/path/to/image.jpg', 500, 300, 'jpg', 100, 5);\n</code></pre> <pre><code>class ProcessImage\n{\n    public static function handle(string $path, int $height, int $width, string $type, int $quality, int $compression): void\n    {\n        // logic for handling image processing\n    }\n}\n\nProcessImage::handle(\n    path: '/path/to/image.jpg',\n    height: 500,\n    width: 300,\n    type: 'jpg',\n    quality: 100,\n    compression: 5,\n);\n</code></pre> <p>Como puede ver en el ejemplo anterior, si se colocan la altura y el ancho de forma incorrecta, se generar\u00edan efectos diferentes a los que podr\u00eda esperar. Dado que la clase y la implementaci\u00f3n est\u00e1n una al lado de la otra, es relativamente f\u00e1cil. Ahora imagine que este m\u00e9todo proviene de un paquete que instal\u00f3 y que puede no tener la mejor documentaci\u00f3n: el uso de argumentos con nombre le permite a usted y a cualquier otra persona que use su base de c\u00f3digo comprender el orden de estos argumentos para el m\u00e9todo. Sin embargo, esto debe usarse con precauci\u00f3n, ya que los autores de bibliotecas tienden a cambiar los nombres de los par\u00e1metros con mayor frecuencia y no siempre se consideran cambios importantes.</p>"},{"location":"02.3_php_versiones_evolucion.html#expresiones-con-match","title":"Expresiones con match","text":"<p>La expresi\u00f3n <code>match</code> es una versi\u00f3n m\u00e1s segura y concisa de la declaraci\u00f3n <code>switch</code>. En PHP 8.0, se introdujeron expresiones en <code>match</code>, que permiten la asignaci\u00f3n de variables en la expresi\u00f3n <code>match</code>. Veamos un ejemplo.</p> Antes ...PHP 8.0 <pre><code>switch (string $method) {\n    case 'GET':\n        $method = 'GET';\n        break;\n    case 'POST':\n        $method = 'POST';\n        break;\n    default:\n        throw new Exception(\"$method is not supported yet.\");\n}\n</code></pre> <pre><code>match (string $method) {\n    'GET' =&gt; $method = 'GET',\n    'POST' =&gt; $method = 'POST',\n    default =&gt; throw new Exception(\n        message: \"$method is not supported yet.\",\n    ),\n};\n</code></pre> Ejemplos m\u00e1s avanzados con <code>match</code> <p>La expresi\u00f3n <code>match</code> es m\u00e1s concisa y segura que la declaraci\u00f3n <code>switch</code>. Adem\u00e1s, las expresiones en <code>match</code> permiten la asignaci\u00f3n de variables en la expresi\u00f3n <code>match</code>, lo que hace que el c\u00f3digo sea m\u00e1s limpio y f\u00e1cil de leer.</p> <p>Otros ejemplos con <code>match</code>:</p> <pre><code>// Before PHP 8.0\nswitch ($status) {\n    case 'active':\n        $message = 'User is active';\n        break;\n    case 'inactive':\n        $message = 'User is inactive';\n        break;\n    default:\n        $message = 'User status is unknown';\n}\n</code></pre> <pre><code>// PHP 8.0\n$message = match ($status) {\n    'active' =&gt; 'User is active',\n    'inactive' =&gt; 'User is inactive',\n    default =&gt; 'User status is unknown',\n};\n</code></pre> <p><code>match</code> tambi\u00e9n puede comparar rangos de valores:</p> <pre><code>// Before PHP 8.0\nswitch ($age) {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n        $group = 'Toddler';\n        break;\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n        $group = 'Child';\n        break;\n    default:\n        $group = 'Unknown';\n}\n</code></pre> <pre><code>// PHP 8.0\n$group = match ($age) {\n    0, 1, 2, 3, 4 =&gt; 'Toddler',\n    5, 6, 7, 8, 9 =&gt; 'Child',\n    default =&gt; 'Unknown',\n};\n\n# o tambi\u00e9n\n\n$group = match (true) {\n    $age &gt;= 0 &amp;&amp; $age &lt;= 4 =&gt; 'Toddler',\n    $age &gt;= 5 &amp;&amp; $age &lt;= 9 =&gt; 'Child',\n    default =&gt; 'Unknown',\n};\n</code></pre> <p>Tambi\u00e9n es posible usar expresiones complejas en <code>match</code>:</p> <pre><code>$count = get_count();\n$size = match(true) {\n    $count &gt; 0 &amp;&amp; $count &lt;=10 =&gt; 'small',\n    $count &lt;=50 =&gt; 'medium',\n    $count &gt;50 =&gt; 'huge',\n};\n</code></pre> <p>Tambi\u00e9n con expresiones regulares:</p> <pre><code>// PHP 8.0\n$message = match (true) {\n    preg_match('/^foo/', $string) =&gt; 'String starts with foo',\n    preg_match('/bar$/', $string) =&gt; 'String ends with bar',\n    default =&gt; 'String does not start with foo or end with bar',\n};\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#uso-de-class-en-objetos","title":"Uso de ::class en objetos","text":"<p>En el pasado, cuando quer\u00edas pasar una cadena de clase a un m\u00e9todo, ten\u00edas que usar algo como get_class, lo que siempre parec\u00eda un poco in\u00fatil. El sistema ya sabe sobre la clase en ese momento, ya que ya la has cargado autom\u00e1ticamente o has creado una nueva instancia. Veamos un ejemplo:</p> Antes...PHP 8.0 <pre><code>// Before PHP 8.0\n$commandBus-&gt;dispatch(get_class($event), $payload);\n</code></pre> <pre><code>$commandBus-&gt;dispatch(\n    event: $event::class,\n    payload: $payload,\n);\n</code></pre> <p>Puede que no sea un dispositivo espectacular en t\u00e9rminos de caracter\u00edsticas, pero definitivamente es algo que uso y a lo que siempre recurrir\u00e9 cuando lo necesite.</p>"},{"location":"02.3_php_versiones_evolucion.html#nullsafe-operator","title":"Nullsafe Operator","text":"<p>El operador nullsafe es una de las caracter\u00edsticas m\u00e1s esperadas de PHP 8.0. Este operador permite acceder a propiedades y m\u00e9todos de un objeto que puede ser nulo sin generar un error. Veamos un ejemplo.</p> Antes de PHP 8.0PHP 8.0 <pre><code>// Before PHP 8.0\nif ($user !== null) {\n    $address = $user-&gt;getAddress();\n    if ($address !== null) {\n        $city = $address-&gt;getCity();\n        if ($city !== null) {\n            $cityName = $city-&gt;getName();\n        }\n    }\n}\n</code></pre> <pre><code>$cityName = $user?-&gt;getAddress()?-&gt;getCity()?-&gt;getName();\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#bloques-trycatch-sin-excepcion","title":"Bloques try/catch sin excepci\u00f3n","text":"<p>En PHP 8.0, ahora puedes usar bloques try/catch sin excepci\u00f3n. Esto es \u00fatil cuando no necesitas la excepci\u00f3n en s\u00ed, sino que solo necesitas manejar el error. Veamos un ejemplo.</p> Antes de PHP 8.0PHP 8.0 <pre><code>try {\n    $response = $this-&gt;sendRequest();\n} catch (RequestException $exception) {\n    Log::error('API request failed to send.');\n}\n</code></pre> <pre><code>try {\n    $response = $this-&gt;sendRequest();\n} catch (RequestException) {\n    Log::error('API request failed to send.');\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#enumeraciones","title":"Enumeraciones","text":"<p>Las enumeraciones son una forma de definir un conjunto de constantes con nombre. En PHP 8.1, se introdujeron las enumeraciones. Veamos un ejemplo.</p> PHP 8.0PHP 8.1 <pre><code>class Method\n{\n    public const GET = 'GET';\n    public const POST = 'POST';\n    public const PUT = 'PUT';\n    public const PATCH = 'PATCH';\n    public const DELETE = 'DELETE';\n}\n</code></pre> <pre><code>enum Method {\n    case GET;\n    case POST;\n    case PUT;\n    case PATCH;\n    case DELETE;\n}\n</code></pre> <p>El ejemplo anterior resalta las diferencias de sintaxis, que se han mejorado, pero \u00bfqu\u00e9 sucede con el uso real? Tomemos un ejemplo r\u00e1pido de una caracter\u00edstica que normalmente utilizar\u00eda en una integraci\u00f3n de API.</p> Antes de PHP 8.1PHP 8.1 <pre><code>trait SendsRequests\n{\n    public function send(string $method, string $uri, array $options = []): Response\n    {\n        if (! in_array($method, ['GET', 'POST', 'PATCH', 'PUT', 'DELETE'])) {\n            throw new InvalidArgumentException(\n                message: \"Method [$method] is not supported.\",\n            );\n        }\n\n        return $this-&gt;buildRequest()-&gt;send(\n            method: $method,\n            uri: $uri,\n            options: $options,\n        );\n    }\n}\n</code></pre> <pre><code>trait SendsRequests\n{\n    public function send(Method $method, string $uri, array $options = []): Response\n    {\n        return $this-&gt;buildRequest()-&gt;send(\n            method: $method-&gt;value,\n            uri: $uri,\n            options: $options,\n        );\n    }\n}\n</code></pre> <p>Otro ejemplo de uso de enumeraciones ser\u00eda en la validaci\u00f3n de datos.</p> Antes...PHP 8.1 <pre><code>public function validate(string $method): void\n{\n    if (! in_array($method, ['GET', 'POST', 'PATCH', 'PUT', 'DELETE'])) {\n        throw new InvalidArgumentException(\n            message: \"Method [$method] is not supported.\",\n        );\n    }\n}\n</code></pre> <pre><code>public function validate(Method $method): void\n{\n    // No need to validate the method here\n}\n</code></pre>"},{"location":"02.3_php_versiones_evolucion.html#unpacking-arrays","title":"Unpacking Arrays","text":"<p>En PHP 8.1, se introdujo la capacidad de desempaquetar matrices. Esto es \u00fatil cuando necesita pasar una matriz a un m\u00e9todo que acepta argumentos de forma individual. Veamos un ejemplo.</p> Antes...PHP 8.1 <pre><code>$this-&gt;sendRequest($data['method'], $data['uri'], $data['options']);\n</code></pre> <pre><code>$this-&gt;sendRequest(...$data);\n</code></pre> <p>En el ejemplo anterior, <code>$data</code> es una matriz que contiene los argumentos que se pasan al m\u00e9todo <code>sendRequest</code>. En lugar de pasar cada elemento de la matriz individualmente, puede desempaquetar la matriz con <code>...</code> y pasarla al m\u00e9todo.</p>"},{"location":"02.3_php_versiones_evolucion.html#propiedades-de-solo-lectura","title":"Propiedades de solo lectura","text":"<p>En PHP 8.1, se introdujeron las propiedades de solo lectura. Esto le permite definir propiedades que solo se pueden establecer una vez y no se pueden modificar despu\u00e9s de la inicializaci\u00f3n. Veamos un ejemplo.</p> PHP 8.0PHP 8.1 <pre><code>class User\n{\n    public string $name;\n\n    public function __construct(string $name)\n    {\n        $this-&gt;name = $name;\n    }\n}\n</code></pre> <pre><code>class User\n{\n    public readonly string $name;\n\n    public function __construct(string $name)\n    {\n        $this-&gt;name = $name;\n    }\n}\n</code></pre> <p>En el ejemplo anterior, la propiedad <code>$name</code> se declara como <code>readonly</code>, lo que significa que solo se puede establecer una vez en el constructor y no se puede modificar despu\u00e9s de la inicializaci\u00f3n.</p> <p>Este tipo de caracter\u00edstica permite programa en inmutabilidad, lo que puede hacer que su c\u00f3digo sea m\u00e1s seguro sin tener que reducir la visibilidad de las propiedades. Antes teniamos que cambiar las propiedades que quer\u00eda que fueran p\u00fablicas y que estuvieran protegidas o privadas, lo que significaba que luego ten\u00edamos que agregar <code>getters</code> a la clase, lo que parec\u00eda como agregar c\u00f3digo repetitivo que realmente no era necesario. </p> <p>Un ejemplo de esto ser\u00eda una clase de entidad que tiene propiedades que no deber\u00edan cambiar despu\u00e9s de la inicializaci\u00f3n.</p> PHP 8.0PHP 8.1 <pre><code>class Post\n{\n    public function __construct() {\n        protected string $title,\n        protected string $content,\n    }\n\n    public function getTitle(): string\n    {\n        return $this-&gt;title;\n    }\n\n    public function getContent(): string\n    {\n        return $this-&gt;content;\n    }\n}\n</code></pre> <pre><code>class Post\n{\n    public function __construct() {\n        public readonly string $title,\n        public readonly string $content,\n    }\n}\n</code></pre>"},{"location":"02_index.html","title":"Lenguaje PHP","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 26 sesiones</p> <p>Resultado de aprendizaje y criterios de evaluaci\u00f3n:</p> <ol> <li> <p>Escribe sentencias ejecutables por un servidor Web reconociendo y aplicando procedimientos de integraci\u00f3n del c\u00f3digo en lenguajes de marcas.</p> <ol> <li>Se han reconocido los mecanismos de generaci\u00f3n de p\u00e1ginas Web a partir de lenguajes de marcas con c\u00f3digo embebido.</li> <li>Se han identificado las principales tecnolog\u00edas asociadas.</li> <li>Se han utilizado etiquetas para la inclusi\u00f3n de c\u00f3digo en el lenguaje de marcas.</li> <li>Se ha reconocido la sintaxis del lenguaje de programaci\u00f3n que se ha de utilizar.</li> <li>Se han escrito sentencias simples y se han comprobado sus efectos en el documento resultante.</li> <li>Se han utilizado directivas para modificar el comportamiento predeterminado.</li> <li>Se han utilizado los distintos tipos de variables y operadores disponibles en el lenguaje.</li> <li>Se han identificado los \u00e1mbitos de utilizaci\u00f3n de las variables.</li> </ol> </li> </ol> <p>Resultado de aprendizaje:</p> <ol> <li>Escribe bloques de sentencias embebidos en lenguajes de marcas, seleccionando y utilizando las estructuras de programaci\u00f3n.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han utilizado mecanismos de decisi\u00f3n en la creaci\u00f3n de bloques de sentencias.</li> <li>Se han utilizado bucles y se ha verificado su funcionamiento.</li> <li>Se han utilizado \u201carrays\u201d para almacenar y recuperar conjuntos de datos.</li> <li>Se han creado y utilizado funciones.</li> <li>Se han utilizado formularios web para interactuar con el usuario del navegador Web.</li> <li>Se han empleado m\u00e9todos para recuperar la informaci\u00f3n introducida en el formulario.</li> <li>Se han a\u00f1adido comentarios al c\u00f3digo.</li> </ol> <p>El lenguaje PHP ha evolucionado mucho a lo largo de sus diferentes versiones, y en la actualidad es uno de los lenguajes de programaci\u00f3n m\u00e1s utilizados en el desarrollo de aplicaciones web. En este tema se estudiar\u00e1n los conceptos b\u00e1sicos de PHP, as\u00ed como caracter\u00edsticas m\u00e1s avanzadas y las nuevas sintaxis agregadas en las \u00faltimas versiones.</p>"},{"location":"02_index.html#introduccion-a-php","title":"Introducci\u00f3n a PHP","text":"<ul> <li>Acr\u00f3nimo de Personal Home Page</li> <li>Lenguaje de prop\u00f3sito general, aunque su fuerte es el desarollo web.</li> <li>Sintaxis similar a C / Java</li> <li>El c\u00f3digo se ejecuta en el servidor (en Apache mediante mod_php)</li> <li>El cliente recibe el resultado generado tras interpretar el c\u00f3digo en el servidor.</li> <li>El c\u00f3digo se almacena en archivo con extensi\u00f3n <code>.php</code>.</li> </ul> <p>La \u00faltima versi\u00f3n es la 8.3, de Agosto de 2024. La versi\u00f3n 7.0 sali\u00f3 en Diciembre de 2015. Adem\u00e1s de numerosas nuevas funcionalidades que iremos viendo durante el curso, tiene m\u00e1s de dos veces mejor rendimiento que PHP5.</p> <p>Su documentaci\u00f3n es extensa y est\u00e1 traducida: https://www.php.net/manual/es/.</p> Video: Evoluci\u00f3n PHP, presente y futuro de PHP <p></p>"},{"location":"02_index.html#contenidos-del-tema","title":"Contenidos del tema","text":"<ol> <li>PHP B\u00e1sico</li> <li>PHP Avanzado</li> <li>PHP Evoluci\u00f3n de su sintaxis, del pasado al presente</li> </ol>"},{"location":"02_index.html#guias","title":"Gu\u00edas","text":"<ol> <li>Instalar varias versiones de PHP en Windows</li> </ol>"},{"location":"03phpoo.html","title":"PHP Orientado a Objetos","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 18 sesiones</p> <p>Resultado de aprendizaje:</p> <ol> <li>Desarrolla aplicaciones Web identificando y aplicando mecanismos para separar el c\u00f3digo de presentaci\u00f3n de la l\u00f3gica de negocio.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han identificado las ventajas de separar la l\u00f3gica de negocio de los aspectos de presentaci\u00f3n de la aplicaci\u00f3n. </li> <li>Se han analizado tecnolog\u00edas y mecanismos que permiten realizar esta separaci\u00f3n y sus caracter\u00edsticas principales. </li> <li>Se han utilizado objetos y controles en el servidor para generar el aspecto visual de la aplicaci\u00f3n web en el cliente. </li> <li>Se han utilizado formularios generados de forma din\u00e1mica para responder a los eventos de la aplicaci\u00f3n Web. </li> <li>Se han escrito aplicaciones Web con mantenimiento de estado y separaci\u00f3n de la l\u00f3gica de negocio. </li> <li>Se han aplicado los principios de la programaci\u00f3n orientada a objetos. </li> <li>Se ha probado y documentado el c\u00f3digo.</li> </ol>"},{"location":"03phpoo.html#paradigma-de-la-programacion-orientada-a-objetos","title":"Paradigma de la Programaci\u00f3n Orientada a Objetos","text":"<p>La programaci\u00f3n orientada a objetos (POO) es un paradigma de programaci\u00f3n que utiliza objetos y sus interacciones para dise\u00f1ar aplicaciones y programas inform\u00e1ticos. Est\u00e1 basado en varias t\u00e9cnicas, incluyendo herencia, abstracci\u00f3n, polimorfismo y encapsulamiento.</p> <p>\ud83d\udca1La POO y la programaci\u00f3n estructura son dos de los paradigmas de programaci\u00f3n m\u00e1s comunes. La programaci\u00f3n estructurada se basa en la secuencia de instrucciones, mientras que la POO se basa en la interacci\u00f3n de objetos.</p> <p>La POO y la programaci\u00f3n estructura no son excluyentes, un programa basado en objetos seguir\u00e1 teniendo variables, bucles y sentencias condicionales, no obstante, la POO permite una mayor modularidad, reutilizaci\u00f3n del c\u00f3digo, ser\u00e1 m\u00e1s legible y escalable.</p> <p>PHP sigue un paradigma de programaci\u00f3n orientada a objetos (POO) basada en clases.</p>"},{"location":"03phpoo.html#clases-y-objetos","title":"Clases y Objetos","text":"<p>Un objeto en t\u00e9rminos de POO no se diferencia mucho de lo que conocemos como un objeto en la vida real. Pensemos por ejemplo en un coche. Nuestro coche ser\u00eda un objeto concreto de la vida real, igual que el coche del vecino, o el coche de un compa\u00f1ero de trabajo, o un deportivo que vimos por la calle el fin de semana pasado\u2026 Todos esos coches ser\u00edan objetos concretos que podemos ver y tocar. Usando la terminolog\u00eda de la POO dir\u00edamos que son instancias.</p> <p>Tanto mi coche como el coche del vecino tienen algo en com\u00fan, ambos son coches. En este caso mi coche y el coche del vecino ser\u00edan instancias (objetos) y coche (a secas) ser\u00eda una clase. La palabra coche define algo gen\u00e9rico, es una <code>abstracci\u00f3n</code>, no es un coche concreto sino que hace referencia a algo que tiene una serie de <code>propiedades</code> como matr\u00edcula, marca, modelo, color, etc. Este conjunto de propiedades se denominan <code>atributos o variables de instancia</code>.</p> <p>Puntos clave</p> <ul> <li>Clase: Concepto abstracto que denota una serie de cualidades, por ejemplo coche.</li> <li>Instancia: Objeto palpable, que se deriva de la concreci\u00f3n de una clase, por ejemplo mi coche.</li> <li>Atributos: Conjunto de caracter\u00edsticas que comparten los objetos de una clase, por ejemplo para la clase coche tendr\u00edamos matr\u00edcula, marca, modelo, color y n\u00famero de plazas..</li> </ul>"},{"location":"03phpoo.html#encapsulamiento-y-ocultacion","title":"Encapsulamiento y ocultaci\u00f3n","text":"<p>Uno de los pilares en los que se basa la Programaci\u00f3n Orientada a Objetos es el encapsulamiento. B\u00e1sicamente, el encapsulamiento consiste en definir todas las propiedades y el comportamiento de una clase dentro de esa clase; es decir, en la clase Coche estar\u00e1 definido todo lo concerniente a la clase Coche y en la clase Libro estar\u00e1 definido todo lo que tenga que ver con la clase Libro. El encapsulamiento parece algo obvio, casi de perogrullo, pero hay que tenerlo siempre muy presente al programar utilizando clases y objetos. En alguna ocasi\u00f3n puede que estemos tentados a mezclar parte de una clase con otra clase distinta para resolver un problema puntual. No hay que caer en esa trampa. Se deben escribir los programas de forma que cada cosa est\u00e9 en su sitio. Sobre todo al principio, cuando definimos nuestras primeras clases, debemos estar pendientes de que todo est\u00e1 definido donde corresponde.</p> <p>La ocultaci\u00f3n es una t\u00e9cnica que incorporan algunos lenguajes (entre ellos Java) que permite esconder los elementos que definen una clase, de tal forma que desde otra clase distinta no se pueden \u201cver las tripas\u201d de la primera. La ocultaci\u00f3n facilita, como veremos m\u00e1s adelante, el encapsulamiento.</p>"},{"location":"03phpoo.html#clases-en-php","title":"Clases en PHP","text":"<p>Las clases en PHP comienzan con una letra may\u00fascula. Es muy recomendable separar la implementaci\u00f3n de las clases del programa principal en ficheros diferentes. Desde el programa principal se puede cargar la clase mediante <code>include o include_once</code> seguido del nombre del fichero de clase (este tema se tratar\u00e1 m\u00e1s adelante). <code>El nombre de la clase debe coincidir con el nombre del fichero que la implementa (con la extensi\u00f3n .php)</code>.</p> <p>Para declarar una clase, se utiliza la palabra clave <code>class</code> seguido del nombre de la clase. Para instanciar un objeto a partir de la clase, se utiliza <code>new</code>:</p> <p>\u00bfC\u00f3mo se le pasan datos cuando una instancia es creada? a trav\u00e9s del <code>constructor</code>. Este m\u00e9todo es muy importante ya que se llamar\u00e1 siempre que se creen nuevos objetos de la clase y servir\u00e1 generalmente para inicializar los valores de los atributos. En PHP, el constructor de una clase se define con el nombre __construct()</p> <p>A continuaci\u00f3n tenemos un ejemplo muy sencillo. Se trata de la implementaci\u00f3n de la clase Persona. Esta clase tendr\u00e1 dos atributos: nombre y profesi\u00f3n.</p> <pre><code>&lt;?php\nclass Persona {\n    private $nombre;\n    private $profesion;\n    // Constructor\n    public function __construct($nom, $pro) {\n        $this-&gt;nombre = $nom;\n        $this-&gt;profesion = $pro;\n    }\n    public function presentarse() {\n        //Esto es con fines ilustrativos, no es recomendable mezclar HTML con PHP en el nivel de la clase\n        return \"Hola, me llamo \" . $this-&gt;nombre . \" y soy \" . $this-&gt;profesion;\n    }\n}\n</code></pre> <p>Los atributos se declaran privados y los m\u00e9todos p\u00fablicos, esto quiere decir que los atributos ser\u00e1n accesibles \u00fanicamente desde dentro de la clase y los m\u00e9todos desde dentro y fuera de la clase.</p> <p>Ahora para llamar a la clase Persona y crear un objeto de la misma, se hace de la siguiente forma:</p> <pre><code>&lt;?php\n//Se referencia al fichero donde est\u00e1 situada la clase. M\u00e1s adelante veremos una forma de hacerlo de forma m\u00e1s autom\u00e1tica.\ninclude_once 'Persona.php';\n\n$unTipo = new Persona(\"Pepe P\u00e9rez\", \"alba\u00f1il\");\n$unNota = new Persona(\"Rigoberto Pel\u00e1ez\", \"programador\");\n//Para llamar a un m\u00e9todo de la clase se utiliza -&gt; seguido del nombre del m\u00e9todo\necho $unTipo-&gt;presentarse();\necho $unNota-&gt;presentarse();\n\nvar_dump($unNota);\nvar_dump($unTipo);\n</code></pre>"},{"location":"03phpoo.html#niveles-de-acceso-a-las-propiedades-y-metodos","title":"Niveles de acceso a las propiedades y m\u00e9todos","text":"<p>Tanto las propiedades como los m\u00e9todos se definen con una visibilidad (quien puede acceder)</p> <ul> <li>Privado - <code>private</code>:  S\u00f3lo puede acceder la propia clase.</li> <li>Protegido - <code>protected</code>: S\u00f3lo puede acceder la propia clase o sus descendientes.</li> <li>P\u00fablico - <code>public</code>: Puede acceder cualquier otra clase.</li> </ul> <p>\ud83d\udca1 Este nivel de acceso se puede aplicar tanto a propiedades, como a m\u00e9todos (incluido el constructor).</p> <p>Para acceder a los m\u00e9todos o propiedades de una clase se utiliza el operador <code>-&gt;</code>.</p> <p>Cuando un proyecto crece, es normal modelar las clases mediante UML (\u00bfrecord\u00e1is Entornos de Desarrollo?). La clases se representan mediante un cuadrado, separando el nombre, de las propiedades y los m\u00e9todos:</p> <p></p> <p>Ficheros y clases</p> <p>Aunque se pueden declarar varias clases en el mismo archivo, es una mala pr\u00e1ctica. As\u00ed pues, lo recomendado es que cada fichero  contedr\u00e1 una sola clase y se nombrar\u00e1 con el nombre de la clase. Como toda regla, hay excepciones, pero en general, es una buena pr\u00e1ctica.</p>"},{"location":"03phpoo.html#objetos-como-parametros-o-valor-de-retorno","title":"Objetos como par\u00e1metros o valor de retorno","text":"<p>Es recomendable indicar en el tipo de los par\u00e1matros el tipo de objeto que se espera. Si ese objeto puede ser null o se puede devolver null como retorno se pone <code>?</code> delante del nombre de la clase. (tipos nullables)</p> <p>Los tipos nullables han sido muy comunes en otros lenguajes de programaci\u00f3n (Null Safety) desde su nacimiento, pero en PHP no llegaron hasta la versi\u00f3n 7.1.</p> <p>\ud83d\udd25 El poder comprobar que un objeto puede ser nulo o no, nos permite hacer comprobaciones m\u00e1s seguras y evitar errores de ejecuci\u00f3n.</p> <p>Objetos por referencia</p> <p>Los objetos que se env\u00edan y reciben como par\u00e1metros siempre se pasan por referencia.</p> <pre><code>&lt;?php\nfunction\u00a0maymen(array\u00a0$numeros)\u00a0:\u00a0?MayorMenor\u00a0{\n    $a\u00a0=\u00a0max($numeros);\n    $b\u00a0=\u00a0min($numeros);\n\n    $result\u00a0=\u00a0new\u00a0MayorMenor();\n    $result-&gt;setMayor($a);\n    $result-&gt;setMenor($b);\n\n    return\u00a0$result;\n}\n\n$resultado\u00a0=\u00a0\u00a0maymen([1,76,9,388,41,39,25,97,22]);\necho\u00a0\"&lt;br&gt;Mayor:\u00a0\".$resultado-&gt;getMayor();\necho\u00a0\"&lt;br&gt;Menor:\u00a0\".$resultado-&gt;getMenor();\n</code></pre>"},{"location":"03phpoo.html#constructor","title":"Constructor","text":"<p>El constructor de los objetos se define mediante el m\u00e9todo m\u00e1gico <code>__construct</code>. Puede o no tener par\u00e1metros, pero s\u00f3lo puede haber un \u00fanico constructor.</p> <pre><code>&lt;?php\nclass\u00a0Persona\u00a0{\n    private\u00a0string $nombre;\n\n    public\u00a0function\u00a0__construct(string $nom)\u00a0{\n        $this-&gt;nombre = $nom;\n    }\n\n    public\u00a0function\u00a0imprimir(){\n    \u00a0\u00a0echo\u00a0$this-&gt;nombre;\n    \u00a0\u00a0echo\u00a0'&lt;br&gt;';\n    }\n}\n\n$bruno\u00a0=\u00a0new\u00a0Persona(\"Bruno\u00a0D\u00edaz\");\n$bruno-&gt;imprimir();\n</code></pre>"},{"location":"03phpoo.html#constructores-en-php-8","title":"Constructores en PHP 8","text":"<p>Una de las grandes novedades que ofrece PHP 8 es la simplificaci\u00f3n de los constructores con par\u00e1metros, lo que se conoce como promoci\u00f3n de las propiedades del constructor.</p> <p>Para ello, en vez de tener que declarar las propiedades como privadas o protegidas, y luego dentro del constructor tener que asignar los par\u00e1metros a est\u00e1s propiedades, el propio constructor promociona las propiedades.</p> <p>Ve\u00e1moslo mejor con un ejemplo. Imaginemos una clase <code>Punto</code> donde queramos almacenar sus coordenadas:</p> <pre><code>&lt;?php\nclass Punto {\n    protected float $x;\n    protected float $y;\n    protected float $z;\n\n    public function __construct(\n        float $x = 0.0,\n        float $y = 0.0,\n        float $z = 0.0\n    ) {\n        $this-&gt;x = $x;\n        $this-&gt;y = $y;\n        $this-&gt;z = $z;\n    }\n}\n</code></pre> <p>En PHP 8, quedar\u00eda del siguiente modo (mucho m\u00e1s corto, lo que facilita su legibilidad):</p> <pre><code>&lt;?php\nclass Punto {\n    public function __construct(\n        protected float $x = 0.0,\n        protected float $y = 0.0,\n        protected float $z = 0.0,\n    ) {}\n}\n</code></pre> <p>El orden importa</p> <p>A la hora de codificar el orden de los elementos debe ser:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nclass NombreClase {\n    // propiedades\n\n    // constructor\n\n    // getters - setters\n\n    // resto de m\u00e9todos\n}\n?&gt;\n</code></pre>"},{"location":"03phpoo.html#metodos-magicos","title":"M\u00e9todos m\u00e1gicos","text":"<p>Todas las clases PHP ofrecen un conjunto de m\u00e9todos, tambi\u00e9n conocidos como magic methods que se pueden sobreescribir para sustituir su comportamiento. Algunos de ellos ya los hemos utilizado.</p> <p>Ante cualquier duda, es conveniente consultar la documentaci\u00f3n oficial.</p> <p>Los m\u00e1s destacables son:</p> <ul> <li><code>__construct()</code></li> <li><code>__destruct()</code> \u2192 se invoca al perder la referencia. Se utiliza para cerrar una conexi\u00f3n a la BD, cerrar un fichero, ...</li> <li><code>__toString()</code> \u2192 representaci\u00f3n del objeto como cadena. Es decir, cuando hacemos <code>echo $objeto</code> se ejecuta autom\u00e1ticamente este m\u00e9todo.</li> <li><code>__get(propiedad)</code>, <code>__set(propiedad, valor)</code> \u2192 Permitir\u00eda acceder a las propiedad privadas, aunque siempre es m\u00e1s legible/mantenible codificar los getter/setter.</li> <li><code>__isset(propiedad)</code>, <code>__unset(propiedad)</code> \u2192 Permite averiguar o quitar el valor a una propiedad.</li> <li><code>__sleep()</code>, <code>__wakeup()</code> \u2192 Se ejecutan al recuperar (unserialize^) o almacenar un objeto que se serializa (serialize), y se utilizan para permite definir qu\u00e9 propiedades se serializan.</li> <li><code>__call()</code>, <code>__callStatic()</code> \u2192 Se ejecutan al llamar a un m\u00e9todo que no es p\u00fablico. Permiten sobrecargan m\u00e9todos.</li> </ul>"},{"location":"03phpoo.html#getters-y-setters","title":"Getters y Setters","text":"<p>Los getters y setters son una forma de acceder a las propiedades de una clase de forma segura, este concepto viene heredado de otros lenguajes de programaci\u00f3n como Java, aunque no por ello tambi\u00e9n hay que utilizarlo en PHP.</p> <p>Por qu\u00e9 NO usar getters y setters en PHP. Patr\u00f3n Tell don't Ask</p> <p>Bajo este titular, la idea que subyace es que no tengo que utilizar el <code>get{Atributo}</code> para acceder o <code>set{Atributo}</code> para modificar una propiedad de una clase, siempre como norma general. De hecho es muy mala pr\u00e1ctica el hacer esto, principalmente los setters, por varios motivos:</p> <ul> <li>Mucho c\u00f3digo boilerplate: se generan muchos m\u00e9todos que no aportan nada, y solo ensucian la legibilidad del c\u00f3digo.</li> <li>Los setters rompen la l\u00f3gida de negocio, en lugar de cambiar propiedad a propiedad, se deber\u00eda cambiar el estado del objeto a trav\u00e9s de un m\u00e9todo que tenga coherencia, cambiando todas las propiedades que se requieran.</li> <li>Los setters, o propiedades de acceso al valor de los atributos, solo se deber\u00edan incluir si aportan algo, es decir, esa informaci\u00f3n que aportan no se puede sustituir por otra informaci\u00f3n m\u00e1s completa.</li> <li>Las funciones para obtener el valor del atributo (getters) no utilizar el patr\u00f3n <code>get{Atributo}</code>, sino que simplemente se llamen como el atributo que exponen.</li> <li>Depende del tipo de Clase/Objeto. Si es un objeto <code>an\u00e9mico</code>, es decir, solo se utiliza para agrupar informaci\u00f3n bajo un mismo nombre y no tiene comportamiento, tiene sentido utilizar propiedades que accedan a esa informaci\u00f3n, y los setters en principio se deber\u00edan asignar a trav\u00e9s de constructor.</li> </ul> <p>En resumen:</p> <ul> <li>Una clase se deber\u00edan construir con todos los datos necesarios para su correcto funcionamiento, a trav\u00e9s de su constructor.</li> <li>Solo se deber\u00eda cambiar su estado, a trav\u00e9s de m\u00e9todos que tengan sentido, y no a trav\u00e9s de setters.</li> <li>Para acceder a sus propiedades, se usen m\u00e9todos/propiedades que encapsulen una l\u00f3gica de negocio, y no simplemente para acceder a un valor independiente.</li> </ul> <p>Como bien dice <code>Margin Fowlers</code> en su libro <code>Refactoring</code>, Tell don't Ask, es decir, no preguntes por el estado de un objeto para cambiarlo, simplemente dile lo que tiene que hacer y que \u00e9l se encargue de hacerlo.</p> <p>En este \ud83d\udcf9 video se explica detalladamente este concepto.</p> <p>En el siguiente ejemplo, se tiene una clase <code>User</code> que tiene 3 atributos privados, se accede a su nombre y edad con propiedades sin <code>get</code> y se construye a trav\u00e9s del constructor y tien un m\u00e9todo para indicar <code>isAdult</code> y <code>isHisBirthday</code>.</p> <pre><code>&lt;?php\nclass User {\n    private string $name;\n    private int $age;\n    private bool $isAdult;\n\n    public function __construct(string $name, int $age) {\n        $this-&gt;name = $name;\n        $this-&gt;age = $age;\n        $this-&gt;isAdult = $age &gt;= 18;\n    }\n\n    public function name() : string {\n        return $this-&gt;name;\n    }\n\n    public function age() : int {\n        return $this-&gt;age;\n    }\n\n    //Se delega la responsabilidad de saber si es adulto a la clase, y no al que lo llama\n    public function isAdult() : bool {\n        return $this-&gt;isAdult;\n    }\n\n    //Se delega la responsabilidad de saber si es adulto a la clase, y no al que lo llama\n    public function isHisBirthday() : bool {\n        return date('d-m') === date('d-m', strtotime('today', strtotime('2022-01-01')));\n    }\n\n    public function __toString() : string {\n        return \"User: {$this-&gt;name} - {$this-&gt;age} years old\";\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#mejoras-en-php-8","title":"Mejoras en PHP 8","text":"<p>Propiedades de solo lectura</p> <p>Siguiendo con la idea del punto anterior, PHP 8 ha introducido nuevas mejoras que permiten no tener que utilizar los getters, y siguiendo la l\u00ednea de la inmutabilidad de los objetos, se pueden definir las propiedades como <code>readonly</code>:</p> <p>Si un atributo se define como <code>readonly</code>, se puede asignar el valor en el constructor, pero no se puede modificar despu\u00e9s, es decir, que ese atributo no se podr\u00e1 cambiar posteriormente en ning\u00fan momento.</p> <p>Este tipo de sintaxis es muy \u00fatil para definir propiedades inmutables, y que no se puedan cambiar una vez se han creado, ni siquiera dentro de la propia clase, una vez se han definido.</p> <p>De esta forma se pueden tener atributos p\u00fablicos, que solo se inicializan en el constructor, y que no se pueden modificar posteriormente, siendo accesibles desde fuera de la clase, sin posiblidad de modificaci\u00f3n.</p> <p>Propiedades readonly</p> <p>En el siguiente ejemplo, se tiene una clase <code>User</code> que tiene un atributo <code>uid</code> que es <code>readonly</code>, es decir, una vez se ha creado el objeto, no se puede modificar.</p> <pre><code>class User {\n    public readonly int $uid;\n\n    public function __construct(int $uid) {\n        $this-&gt;uid = $uid;\n    }\n}\n\n$user = new User(42);\n\necho $user-&gt;uid; // 42 -&gt; Dar\u00eda un error.  \n</code></pre> <p>Clases de solo lectura</p> <p>Tambi\u00e9n es posible indicar que una clase es de solo lectura, es decir, que una vez se ha creado un objeto de esa clase, no se puede modificar. Para ello, se utiliza la palabra clave <code>readonly</code> antes de la definici\u00f3n de la clase. Este tipo de clases son muy \u00fatiles para los llamados DTO (Data Transfer Object), que son objetos que se utilizan para transferir datos entre diferentes partes de la aplicaci\u00f3n, y que no contienen l\u00f3gica de negocio.</p> <p>Propiedades y clases readonly</p> <p>En el siguiente ejemplo, se define una clase <code>RepoDTO</code> que es de solo lectura, y contiene la informaci\u00f3n de un repositorio de GitHub. Un objeto de solo lectura, se puede definir de 2 formas:</p> <ul> <li>Todas las propiedades readonly</li> <li>Marcar la clase como readonly, y las propiedades normal</li> </ul> <pre><code>//A. Todoas las propiedades readonly\nfinal class RepoDTO\n{\n    public function __construct(\n        public readonly int $id,\n        public readonly string $name,\n        public readonly string $fullName,\n        public readonly bool $isPrivate,\n        public readonly string $description,\n        public readonly CarbonInterface $createdAt,\n    ) {\n        //\n    }\n}\n\n//B. Marcar la clase como readonly, y las propiedades normal\nfinal readonly class RepoDTO\n{\n    public function __construct(\n        public int $id,\n        public string $name,\n        public string $fullName,\n        public bool $isPrivate,\n        public string $description,\n        public CarbonInterface $createdAt,\n    ) {\n        //\n    }\n}\n\n//Uso de la clase\n$repo = new Repo(\n    id: 123,\n    name: 'short-url',\n    fullName: 'ash-jc-allen/short-url',\n    isPrivate: false,\n    description: 'A URL shortener',\n    createdAt: Carbon::now(),\n);\n\n$repo-&gt;name = 'short-url-2';  // Error\n</code></pre> En profundidad: Casos de uso para las propiedades <code>readonly</code> <p>Casos de uso para las propiedades <code>readonly</code>:</p> <p>DTOs: Data Transfer Object, son objetos que se utilizan para transferir datos entre diferentes partes de la aplicaci\u00f3n, y que no contienen l\u00f3gica de negocio.</p> <p>Value Objets Value Objetcs (el concepto proviene del mundo de DDD - Domain Driven Design) son objetos que representan un valor, y que no tienen identidad propia. Por ejemplo, un objeto que representa un rango de fechas, un objeto que representa un color o una moneda, etc.</p> <pre><code>final class DateRange\n{\n    public function __construct(\n        public readonly DateTime $start,\n        public readonly DateTime $end,\n    ) {}\n}\n\nclass Currency {\n    public readonly string $code;\n    public readonly float $value;\n\n    public function __construct(string $code, float $value) {\n        $this-&gt;code = $code;\n        $this-&gt;value = $value;\n    }\n}\n</code></pre> <p>Clases de Configuraci\u00f3n Inmutables</p> <p>Las clases de configuraci\u00f3n son un buen ejemplo de clases que deber\u00edan ser inmutables. Una vez que se ha creado un objeto de configuraci\u00f3n, no deber\u00eda cambiar durante la vida de la aplicaci\u00f3n.</p> <p><pre><code>class AppConfig {\n    public readonly string $appName;\n    public readonly bool $debugMode;\n\n    public function __construct(string $appName, bool $debugMode) {\n        $this-&gt;appName = $appName;\n        $this-&gt;debugMode = $debugMode;\n    }\n}\n\n$config = new AppConfig('MyApp', true);\n</code></pre> y en cualquier caso que se requiera la integridad de los datos, y que no se puedan modificar una vez se han creado.</p> <p>Promoci\u00f3n de propiedades</p> <p>En PHP 8, se ha introducido una nueva caracter\u00edstica que permite promocionar las propiedades de una clase directamente en el constructor, lo que simplifica la definici\u00f3n de las propiedades y su asignaci\u00f3n en el constructor.</p> <p>En lugar de tener que definir las propiedades de la clase, y luego asignarlas en el constructor, se pueden definir directamente en el constructor, y se asignan autom\u00e1ticamente.</p> <p>En muchas ocasiones, las clases son simples contenedores de informaci\u00f3n, sin l\u00f3gica, y son para este tipo de clases las que est\u00e1 pensado esta caracter\u00edstica, donde nos evita el Boilerplate de tener que definir las propiedades y asignarlas en el constructor, de esta forma se realiza todo en una sola l\u00ednea.</p> <p>Promoci\u00f3n de propiedades</p> <p>En el siguiente ejemplo, se tiene una clase <code>Punto</code> que tiene 3 propiedades <code>x</code>, <code>y</code> y <code>z</code>, que se definen directamente en el constructor, y se asignan autom\u00e1ticamente.</p> <pre><code>class Punto {\n    public function __construct(\n        public float $x = 0.0,\n        public float $y = 0.0,\n        public float $z = 0.0,\n    ) {}\n}\n\n$punto = new Punto(1.0, 2.0, 3.0);\necho $punto-&gt;x; // 1.0\n</code></pre> <p>Tambi\u00e9n se puede combinar con la promoci\u00f3n de propiedades <code>readonly</code>:</p> <pre><code>class Punto {\n    public function __construct(\n        public readonly float $x = 0.0,\n        public readonly float $y = 0.0,\n        public readonly float $z = 0.0,\n    ) {}\n}\n</code></pre> <p>Para m\u00e1s informaci\u00f3n revisa este Post</p>"},{"location":"03phpoo.html#clases-estaticas","title":"Clases est\u00e1ticas","text":"<p>Son aquellas que tienen propiedades y/o m\u00e9todos est\u00e1ticos (tambi\u00e9n se conocen como de clase, por que su valor se comparte entre todas las instancias de la misma clase).</p> <p>Se declaran con <code>static</code> y se referencian con <code>::</code>.</p> <ul> <li>Si queremos acceder a un m\u00e9todo est\u00e1tico, se antepone el nombre de la clase: <code>Producto::nuevoProducto()</code>.</li> <li>Si desde un m\u00e9todo queremos acceder a una propiedad est\u00e1tica de la misma clase, se utiliza la referencia <code>self</code>: <code>self::$numProductos</code></li> </ul> <pre><code>&lt;?php\nclass Producto {\n    const IVA = 0.23;\n    private static $numProductos = 0; \n\n    public static function nuevoProducto() {\n        self::$numProductos++;\n    }\n}\n\nProducto::nuevoProducto();\n$impuesto = Producto::IVA;\n</code></pre> <p>Tambi\u00e9n podemos tener clases normales que tengan alguna propiedad est\u00e1tica:</p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    const\u00a0IVA\u00a0=\u00a00.23;\n    private\u00a0static\u00a0$numProductos\u00a0=\u00a00;\u00a0\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0__construct(string\u00a0$cod)\u00a0{\n        self::$numProductos++;\n        $this-&gt;codigo\u00a0=\u00a0$cod;\n    }\n\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"El\u00a0producto\u00a0\".$this-&gt;codigo.\" es\u00a0el\u00a0n\u00famero\u00a0\".self::$numProductos;\n    }\n}\n\n$prod1\u00a0=\u00a0new\u00a0Producto(\"PS5\");\n$prod2\u00a0=\u00a0new\u00a0Producto(\"XBOX\u00a0Series\u00a0X\");\n$prod3\u00a0=\u00a0new\u00a0Producto(\"Nintendo\u00a0Switch\");\necho\u00a0$prod3-&gt;mostrarResumen();\n</code></pre> <p>M\u00e9todos est\u00e1ticos</p> <p>Al igual que las clases tambi\u00e9n se pueden definir m\u00e9todos est\u00e1ticos. Estos m\u00e9todos no pueden acceder a las propiedades de la clase, pero s\u00ed a las propiedades est\u00e1ticas.</p> <p>Para acceder a los m\u00e9todos est\u00e1ticos, se utiliza la misma sintaxis que para el acceso a las constantes definidas en una clase: <code>NombreClase::nombreMetodo()</code></p> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    const\u00a0IVA\u00a0=\u00a00.23;\n    private\u00a0static\u00a0$numProductos\u00a0=\u00a00;\u00a0\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0__construct(string\u00a0$cod)\u00a0{\n        self::$numProductos++;  //acceder a una propiedad est\u00e1tica\n        $this-&gt;codigo\u00a0=\u00a0$cod;\n    }\n\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"El\u00a0producto\u00a0\".$this-&gt;codigo.\" es\u00a0el\u00a0n\u00famero\u00a0\".self::$numProductos;\n    }\n\n    public\u00a0static\u00a0function\u00a0getNumeroProductos()\u00a0:\u00a0int\u00a0{\n        return\u00a0self::$numProductos;\n    }\n}\n\n//Instanciamos varios productos\n$prod1\u00a0=\u00a0new\u00a0Producto(\"PS5\");\n$prod3\u00a0=\u00a0new\u00a0Producto(\"Nintendo\u00a0Switch\");\n//Acceso al m\u00e9todo est\u00e1tico\necho\u00a0Producto::getNumeroProductos();\n</code></pre> <p>Problemas de los m\u00e9todos est\u00e1ticos</p> <p>Los m\u00e9todos est\u00e1ticos tiene varios problemas, y no son recomendables en la mayor\u00eda de los casos:</p> <ul> <li>Ruptura con el modelo purista de la POO.</li> <li>Acoplamiento. Lo que deriva en poca cambiabilidad y dificultan el testing</li> <li>Ocultaci\u00f3n de dependencias.</li> </ul>"},{"location":"03phpoo.html#this-vs-self","title":"$this vs self","text":"<p>En PHP, existe <code>this</code> como en otros lenguajes de programaci\u00f3n, pero tambi\u00e9n existe <code>self</code>. La diferencia entre ambos es que:</p> <ul> <li><code>$this</code> This hace referencia al objeto actual, es decir, cuando una clase s\u00ed tiene instancia. No se puede hacer referencia a m\u00e9todos est\u00e1ticos usando this pero si a m\u00e9todos p\u00fablicos, privados y protegidos.</li> <li><code>Self</code> hace referencia a la clase actual y se usando cuando instancia dicha clase, es decir se usan m\u00e9todos est\u00e1ticos.</li> </ul> <p>Ejemplos del uso de This y Self</p> <pre><code>class Saludos{\n\nstatic function textoSaludo(string $nombre): string {\n    return 'HOLA ' . $nombre;\n}\n\nstatic function mostrarSaludo(string $nombre){\n    //M\u00e9todo est\u00e1tico hace referencia a la clase actual, y a un m\u00e9todo est\u00e1tico \n    echo self::textoSaludo($nombre);\n}\n}\n\n//Acceso a un m\u00e9todo est\u00e1tico\nSaludos::mostrarSaludo('Gonzalo');\n\n\nclass Saludos2{\n\nprivate function textoSaludo(string $nombre): string {\n    return 'HOLA ' . $nombre;\n}\n\npublic function mostrarSaludo(string $nombre){\n    //M\u00e9todo de instancia hace referencia al objeto actual, y a un m\u00e9todo de instancia\n    echo $this-&gt;textoSaludo($nombre);\n}\n}\n\n//Aqui se instancia la clase, y se accede a un m\u00e9todo de instancia\n$saludos = new Saludos2();\n$saludos-&gt;mostrarSaludo('Gonzalo');\n</code></pre>"},{"location":"03phpoo.html#introspeccion","title":"Introspecci\u00f3n","text":"<p>Al trabajar con clases y objetos, existen un conjunto de funciones ya definidas por el lenguaje que permiten obtener informaci\u00f3n sobre los objetos:</p> <ul> <li><code>instanceof</code>: permite comprobar si un objeto es de una determinada clase</li> <li><code>get_class</code>: devuelve el nombre de la clase, tambi\u00e9n a trav\u00e9s de <code>$objeto::class</code></li> <li><code>get_declared_class</code>: devuelve un array con los nombres de las clases definidas</li> <li><code>class_alias</code>: crea un alias</li> <li><code>class_exists</code> / <code>method_exists</code> / <code>property_exists</code>: <code>true</code> si la clase / m\u00e9todo / propiedad est\u00e1 definida</li> <li><code>get_class_methods</code> / <code>get_class_vars</code> / <code>get_object_vars</code>: Devuelve un array con los nombres de los m\u00e9todos / propiedades de una clase / propiedades de un objeto que son accesibles desde d\u00f3nde se hace la llamada.</li> </ul> <p>Un ejemplo de estas funciones puede ser el siguiente:</p> <pre><code>&lt;?php\n$p\u00a0=\u00a0new\u00a0Producto(\"PS5\");\nif\u00a0($p\u00a0instanceof\u00a0Producto)\u00a0{\n    echo\u00a0\"Es\u00a0un\u00a0producto\";\n    echo\u00a0\"La\u00a0clase\u00a0es\u00a0\".get_class($p);\n\n    class_alias(\"Producto\",\u00a0\"Articulo\");\n    $c\u00a0=\u00a0new\u00a0Articulo(\"Nintendo\u00a0Switch\");\n    echo\u00a0\"Un\u00a0articulo\u00a0es\u00a0un\u00a0\".get_class($c);\n\n    print_r(get_class_methods(\"Producto\"));\n    print_r(get_class_vars(\"Producto\"));\n    print_r(get_object_vars($p));\n\n    if\u00a0(method_exists($p,\u00a0\"mostrarResumen\"))\u00a0{\n        $p-&gt;mostrarResumen();\n    }\n}\n</code></pre> <p>Clonado</p> <p>Al asignar dos objetos no se copian, se crea una nueva referencia. Si queremos una copia, hay que clonarlo mediante el m\u00e9todo <code>clone(object) : object</code></p> <p>Si queremos modificar el clonado por defecto, hay que definir el m\u00e9todo m\u00e1gico <code>__clone()</code> que se llamar\u00e1 despu\u00e9s de copiar todas las propiedades.</p> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/language.oop5.cloning.php</p>"},{"location":"03phpoo.html#herencia","title":"Herencia","text":"<p>La herencia es una de las caracter\u00edsticas m\u00e1s importantes de la POO. Si definimos una serie de atributos y m\u00e9todos para una clase, al crear una subclase, todos estos atributos y m\u00e9todos se 'pasan' a la subclase. La subclase puede a\u00f1adir nuevos atributos y m\u00e9todos (extender), o modificar los existentes (sobreescribir).</p> <p>\ud83d\udca1 PHP soporta herencia simple, de manera que una clase solo puede heredar de otra, no de dos clases a la vez. </p> <p>Para aplicar la herencia se utiliza la palabra clave <code>extends</code>. Si queremos que la clase A hereda de la clase B haremos:</p> <pre><code>class A extends B\n</code></pre> <p>El hijo hereda los atributos y m\u00e9todos p\u00fablicos y protegidos (no los privados).</p> <p>Por ejemplo, tenemos una clase <code>Producto</code> y una <code>Tv</code> que hereda de <code>Producto</code>:</p> <pre><code>&lt;?php\nclass Producto {\n    public $codigo;\n    public $nombre;\n    public $nombreCorto;\n    public $PVP;\n\n    public function mostrarResumen() {\n        return \"Prod:\" . $this-&gt;codigo;\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n}\n</code></pre> <p>Podemos utilizar las siguientes funciones para averiguar si hay relaci\u00f3n entre dos clases:</p> <ul> <li><code>get_parent_class(object): string</code></li> <li><code>is_subclass_of(object, string): bool</code></li> <li><code>instanceof</code>: para comprobar si un objeto es de una determinada clase (o de una clase de la que hereda).</li> </ul> <pre><code>&lt;?php\n$t = new Tv();\n$t-&gt;codigo = 33;\nif ($t instanceof Producto) {\n    echo $t-&gt;mostrarResumen();\n}\n\n$padre = get_parent_class($t);\necho \"&lt;br&gt;La clase padre es: \" . $padre;\n\n$objetoPadre = new $padre;\necho $objetoPadre-&gt;mostrarResumen();\n\nif (is_subclass_of($t, 'Producto')) {\n    echo \"&lt;br&gt;Soy un hijo de Producto\";\n}\n</code></pre>"},{"location":"03phpoo.html#sobreescribir-metodos","title":"Sobreescribir m\u00e9todos","text":"<p>Podemos crear m\u00e9todos en los hijos con el mismo nombre que el padre, cambiando su comportamiento. Para invocar a los m\u00e9todos del padre -&gt; <code>parent::nombreMetodo()</code></p> <pre><code>&lt;?php\nclass Tv extends Producto {\n   public $pulgadas;\n   public $tecnologia;\n\n   public function mostrarResumen() {\n      $resumenPadre = parent::mostrarResumen();\n      return $resumenPadre . \"TV \". $this-&gt;tecnologia . \" de \" . $this-&gt;pulgadas;\n   }\n}\n</code></pre>"},{"location":"03phpoo.html#constructor-en-hijos","title":"Constructor en hijos","text":"<p>En los hijos no se crea ning\u00fan constructor de manera autom\u00e1tica. Por lo que si no lo hay, se invoca autom\u00e1ticamente al del padre. En cambio, si lo definimos en el hijo, hemos de invocar al del padre de manera expl\u00edcita.</p> PHP7PHP8 <pre><code>&lt;?php\nclass Producto {\n    public string $codigo;\n\n    public\u00a0function\u00a0__construct(string $codigo) {\n        $this-&gt;codigo =\u00a0$codigo;\n    }\n\n    public function mostrarResumen() {\n        return \"Prod:\" . $this-&gt;codigo;\n    }\n}\n\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public\u00a0function\u00a0__construct(string\u00a0$codigo,\u00a0int\u00a0$pulgadas,\u00a0string\u00a0$tecnologia)\u00a0{\n        parent::__construct($codigo);\n        $this-&gt;pulgadas\u00a0=\u00a0$pulgadas;\n        $this-&gt;tecnologia\u00a0=\u00a0$tecnologia;\n    }\n\n    public function mostrarResumen() {\n        $resumenPadre = parent::mostrarResumen();\n        return $resumenPadre . \"TV \". $this-&gt;tecnologia . \" de \" . $this-&gt;pulgadas;\n    }\n}\n</code></pre> <pre><code>&lt;?php\nclass Producto {\n    public\u00a0function\u00a0__construct(private string $codigo) { }\n\n    public function mostrarResumen() {\n        echo \"&lt;p&gt;Prod:\".$this-&gt;codigo.\"&lt;/p&gt;\";\n    }        \n}\n\nclass Tv extends Producto {\n\n    public\u00a0function\u00a0__construct(\n        string\u00a0$codigo,\n        private int\u00a0$pulgadas,\n        private string\u00a0$tecnologia)\n    {\n        parent::__construct($codigo); //Se llama al constructor del padre\n    }\n\n    public function mostrarResumen() {\n        $resumenPadre = parent::mostrarResumen();\n        return $resumenPadre . \"TV \". $this-&gt;tecnologia . \" de \" . $this-&gt;pulgadas;\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#clases-abstractas","title":"Clases abstractas","text":"<p>Las clases abstractas son <code>plantillas (clases)</code> que no se pueden utilizar directamente, sino que es requerido hacerlo a trav\u00e9s de clases hijas (subclases), ya que no se permiten su instanciaci\u00f3n. Se define mediante la palabra clave abstract <code>abstract class NombreClase {</code>.  </p> <p>Una clase abstracta puede contener propiedades y m\u00e9todos no-abstractos, y/o m\u00e9todos abstractos.</p> <pre><code>&lt;?php\n//\u00a0Clase\u00a0abstracta\nabstract\u00a0class\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n    //\u00a0M\u00e9todo\u00a0abstracto\n    abstract\u00a0public\u00a0function\u00a0mostrarResumen();\n}\n</code></pre> <p>Cuando una clase hereda de una clase abstracta, obligatoriamente debe implementar los m\u00e9todos que tiene el padre marcados como abstractos.</p> <pre><code>&lt;?php\nclass Tv extends Producto {\n    public $pulgadas;\n    public $tecnologia;\n\n    public function mostrarResumen() { //obligado a implementarlo\n        echo \"&lt;p&gt;C\u00f3digo \".$this-&gt;getCodigo().\"&lt;/p&gt;\";\n        echo \"&lt;p&gt;TV \".$this-&gt;tecnologia.\" de \".$this-&gt;pulgadas.\"&lt;/p&gt;\";\n    }\n}\n\n$t = new Tv();\necho $t-&gt;getCodigo();\n</code></pre>"},{"location":"03phpoo.html#clases-finales","title":"Clases finales","text":"<p>Son clases opuestas a abstractas, ya que evitan que se pueda heredar una clase. Se denominan finales ya que con ellas finaliza la jerarqu\u00eda de clases.</p> <p>Se define mediante la palabra clave final <code>final class NombreClase {</code>. </p> <p>Puntos importantes</p> <ul> <li>Un m\u00e9todo <code>final</code> no puede ser sobrescrito por una clase hija.</li> <li>Una clase <code>final</code> no puede ser heredada.</li> <li>Y como es evidente, una clase <code>final</code> no puede ser <code>abstracta</code></li> </ul> <pre><code>&lt;?php\nclass\u00a0Producto\u00a0{\n    private\u00a0$codigo;\n\n    public\u00a0function\u00a0getCodigo()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;codigo;\n    }\n\n    final\u00a0public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string\u00a0{\n        return\u00a0\"Producto\u00a0\".$this-&gt;codigo;\n    }\n}\n\n// No podremos heredar de Microondas\nfinal\u00a0class\u00a0Microondas\u00a0extends\u00a0Producto\u00a0{\n    private\u00a0$potencia;\n\n    public\u00a0function\u00a0getPotencia()\u00a0:\u00a0int\u00a0{\n        return\u00a0$this-&gt;potencia;\n    }\n\n    // No podemos implementar mostrarResumen()\n}\n</code></pre>"},{"location":"03phpoo.html#composicion-vs-herencia","title":"Composici\u00f3n vs Herencia","text":"<p>Es una t\u00e9cnica de programaci\u00f3n que permite crear objetos complejos a partir de otros m\u00e1s simples. Se basa en la relaci\u00f3n \"tiene un\" en lugar de \"es un\".</p> <p>El problema de la herencia en los lenguajes de programaci\u00f3n m\u00e1s tradicionales es que no se puede heredar de m\u00e1s de una clase a la vez. La composici\u00f3n permite que un objeto contenga a otro, y as\u00ed se pueden reutilizar los m\u00e9todos de la clase contenida.</p> <p>La Herencia presenta varios problemas:</p> <ul> <li>Jerarqu\u00eda r\u00edgida: La herencia es una relaci\u00f3n permanente y a menudo r\u00edgida. No se puede cambiar en tiempo de ejecuci\u00f3n.</li> <li>inconsistencia: Al heredar se hereda todo, incluso lo que no se necesita. Esto puede dar lugar a casos incongruentes, ya que no tiene sentido en algunos casos ciertos m\u00e9todos o propiedades.</li> <li>Acoplamiento fuerte: La herencia crea una relaci\u00f3n fuerte entre las clases. Si cambia una clase, es probable que tenga que cambiar la otra.</li> <li>Complejidad: La herencia puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender, y tambi\u00e9n es dificil de conocer de d\u00f3nde proviene un m\u00e9todo o propiedad.  </li> </ul> <p>Frente a estos problemas, la composici\u00f3n ofrece una soluci\u00f3n m\u00e1s flexible y menos acoplada. En lugar de heredar de una clase, esta se <code>compone</code> de otras <code>funcionalidades</code>.</p> <p>Este tema es muy extenso y sale fuera del temario de este m\u00f3dulo, pero es importante que conozcas que existe y que es una t\u00e9cnica muy utilizada en el mundo de la programaci\u00f3n.</p> <p>Para m\u00e1s informaci\u00f3n, revisa este video.</p>"},{"location":"03phpoo.html#interfaces","title":"Interfaces","text":"<p>Permite definir un contrato con las firmas de los m\u00e9todos que una clase que lo (utilize) debe implementar o definir. Todos los m\u00e9todos deben ser <code>p\u00fablicos</code> y no puede contener <code>propiedades</code>.</p> <p>Se declaran con la palabra clave <code>interface</code> y luego las clases que cumplan el contrato lo realizan mediante la palabra clave <code>implements</code>.</p> <pre><code>&lt;?php\ninterface Nombreable {\n// declaraci\u00f3n de funciones\n}\nclass NombreClase implements NombreInterfaz {\n// c\u00f3digo de la clase\n</code></pre> <p>Se permite la herencia de interfaces. Adem\u00e1s, una clase puede implementar varios interfaces (en este caso, s\u00ed soporta la herecia m\u00faltiple, pero s\u00f3lo de interfaces).</p> <pre><code>&lt;?php\ninterface\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarResumen()\u00a0:\u00a0string;\n}\n\ninterface\u00a0MostrableTodo\u00a0extends\u00a0Mostrable\u00a0{\n    public\u00a0function\u00a0mostrarTodo()\u00a0:\u00a0string;\n}\n\ninterface\u00a0Facturable\u00a0{\n    public\u00a0function\u00a0generarFactura()\u00a0:\u00a0string;\n}\n\nclass\u00a0Producto\u00a0implements\u00a0MostrableTodo,\u00a0Facturable\u00a0{\n    //\u00a0Implementaciones\u00a0de\u00a0los\u00a0m\u00e9todos\n    // Obligatoriamente deber\u00e1 implementar public\u00a0function\u00a0mostrarResumen, mostrarTodo y generarFactura\n}\n</code></pre> <p>\u00bfC\u00faando usar <code>interfaces</code>?</p> <p>Son \u00fatiles cuando se quiere que m\u00faltiples clases tengan un comportamiento com\u00fan, y implementen (obligatoriamente) un conjunto de m\u00e9todos. Permiten una forma de <code>forzar</code> una estructura com\u00fan a trav\u00e9s de diferentes clases, sin necesidad de heredar de una clase com\u00fan, permitiendo el polimorfismo y la reutilizaci\u00f3n de c\u00f3digo.</p> <p>\ud83d\udd25 Las <code>interfaces</code> permiten herencia m\u00faltiple, es decir, una clase puede <code>heredar</code> de m\u00faltiples interfaces. </p> <p>Diferencias entre clases abstractas e interfaces</p> Clases Abstractas Interfaces Herencia vs Implementaci\u00f3n proporcionan una forma de definir m\u00e9todos y propiedades comunes que las subclases heredar\u00e1n. So definen un contrato que las clases deben cumplir implementando m\u00e9todos espec\u00edficos Modifidores de Acceso pueden tener m\u00e9todos y propiedades con diferentes modificadores de acceso (p\u00fablico, protegido, privado) solo pueden tener m\u00e9todos con acceso p\u00fablico M\u00faltiple herencia Solo herencia \u00fanica, donde una subclase solo puede heredar de una clase abstracta se pueden utilizar para la herencia m\u00faltiple, donde una clase puede implementar m\u00faltiples interfaces Implementaci\u00f3n de m\u00e9todos pueden tener m\u00e9todos abstractos (sin implementaci\u00f3n) y m\u00e9todos concretos (con implementaci\u00f3n) solo pueden tener firmas de m\u00e9todos sin detalles de implementaci\u00f3n Instanciaci\u00f3n no se pueden instanciar no se pueden instanciar <p>\u00bfC\u00faando usar <code>interfaces</code> o <code>Clases Abstractas</code>?</p> <p>No hay una regla clara sobre esto, pero en general, se recomienda usar interfaces cuando se quiere definir un contrato que las clases deben cumplir, pero no se necesita una implementaci\u00f3n com\u00fan. Por otro lado, las clases abstractas son \u00fatiles cuando se quiere proporcionar una implementaci\u00f3n com\u00fan para un conjunto de clases relacionadas.</p> <p>Las clases abstractas utilizan el mecanismo de <code>herencia</code> para transmitir ese comportamiento com\u00fan, mientras las interfaces es un contrato que las clases deben <code>implementar</code>, sin por ello implicar una relaci\u00f3n de <code>jerarqu\u00eda</code>. </p> <p>Las <code>interfaces</code> permiten que una clase se comporte de una manera espec\u00edfica (solo para esa comportamiento que la interfaz define), pero no impone nada m\u00e1s, el resto de la clase es libre de implementar como se quiera. De esta forma, las interfaces son muy \u00fatiles para aplicar el polilorfismo.</p> <p>Casos de uso m\u00e1s complejos</p> Clase Abstracta con interfacesExtendiendo e implementando a la vezHerencia m\u00faltiple de interfaces <p>Una clase abstracta puede implementar una interfaz, y las subclases de esa clase abstracta heredar\u00e1n la implementaci\u00f3n de la interfaz.</p> <pre><code>&lt;?php\ninterface A\n{\n    public function foo(string $s): string;\n\n    public function bar(int $i): int;\n}\n\n// An abstract class may implement only a portion of an interface.\n// Classes that extend the abstract class must implement the rest.\nabstract class B implements A\n{\n    public function foo(string $s): string\n    {\n        return $s . PHP_EOL;\n    }\n}\n\nclass C extends B\n{\n    public function bar(int $i): int\n    {\n        return $i * 2;\n    }\n}\n?&gt;\n</code></pre> <p>Una clase puede heredar de otra clase y, al mismo tiempo, implementar una o m\u00e1s interfaces.</p> <pre><code>&lt;?php\n\n    class One\n    {\n        /* ... */\n    }\n\n    interface Usable\n    {\n        /* ... */\n    }\n\n    interface Updatable\n    {\n        /* ... */\n    }\n\n    // The keyword order here is important. 'extends' must come first.\n    class Two extends One implements Usable, Updatable\n    {\n        /* ... */\n    }\n?&gt;\n</code></pre> <p>Se puede crear una jerarqu\u00eda de interfaces, donde una interfaz puede extender una o m\u00e1s interfaces.</p> <pre><code>&lt;?php\ninterface A\n{\n    public function foo();\n}\n\ninterface B\n{\n    public function bar();\n}\n\ninterface C extends A, B\n{\n    public function baz();\n}\n\nclass D implements C\n{\n    public function foo()\n    {\n    }\n\n    public function bar()\n    {\n    }\n\n    public function baz()\n    {\n    }\n}\n?&gt;\n</code></pre>"},{"location":"03phpoo.html#enumerados","title":"Enumerados","text":"<p>Los enumerados son una caracter\u00edstica fundamental en muchos lenguajes de programaci\u00f3n, ya que permiten evitar los <code>magic numbers</code> (n\u00fameros m\u00e1gicos) y los <code>magic strings</code> (cadenas m\u00e1gicas), y adem\u00e1s permiten agrupar valores relacionados bajo un mismo nombre.</p> <p>Esto tiene muchas ventajas:</p> <ul> <li>Limitar el rango de valores posibles que una variable puede tener.</li> <li>Mejorar la legibilidad del c\u00f3digo.</li> <li>Errores m\u00e1s f\u00e1ciles de detectar, ya que el IDE puede ofrecer autocompletado.</li> <li>Facilitar la refactorizaci\u00f3n del c\u00f3digo.</li> <li>y muchos m\u00e1s...</li> </ul> <p>Sin los enumerados, se podr\u00eda hacer algo similar con constantes:</p> <p><pre><code>&lt;?php\nclass Genero {\n    const PENDIENTE = 1;\n    const ACEPTADO = 2;\n    const RECHAZADO = 3;\n}\n\n$estado = Genero::PENDIENTE;\n</code></pre> pero el uso de constantes no es tan seguro como el uso de enumerados, ya que las constantes son simplemente valores que no tienen ninguna relaci\u00f3n entre s\u00ed.</p> <p>En PHP 8.1 se ha a\u00f1adido la posibilidad de definir enumerados mediante la palabra clave <code>enum</code>.</p> <p>Los enumerados realmente son clases que extienden de <code>Enum</code> y que contienen constantes p\u00fablicas y est\u00e1ticas, todas relacionadas entre s\u00ed, y que se pueden utilizar como si fueran valores primitivos.</p> <p>Un enumerado puede tener un <code>Backed Type</code> que es el tipo de dato que se utilizar\u00e1 para almacenar los valores del enumerado. Si no se especifica, se utilizar\u00e1 <code>int</code>. </p> <p>Esto es muy importante, ya que en muchas ocasiones en Base de Datos se almacenan el valor, pero ese valor  por si mismo no dice nada a un desarrollador. Por ejemplo, si en una tabla de usuarios se almacena el g\u00e9nero, si se almacena un 1, no se sabe si es hombre o mujer. Por eso, es importante que el valor almacenado sea un entero, pero que se pueda acceder a \u00e9l mediante un nombre m\u00e1s descriptivo.</p> <p>Para saber si un un valor que viene de la BD, o que tenemos almacenado en una variable, es un <code>Hombre</code> o una <code>Mujer</code>, se puede hacer de la siguiente manera:</p> <pre><code>&lt;?php\n$genero = 1; //Valor obtenido desde BD o de cualquier otro sitio\n\nif ($genero == 1) {\n    echo \"Hombre\";\n} else if ($genero == 2) {\n    echo \"Mujer\";\n}\n</code></pre> <p>Pero esto no es nada legible, tenemos que conferirle el significado a los valores, esto es lo que se conocer como <code>Magic Numbers</code>, n\u00fameros que tienen un significado especial en el c\u00f3digo, pero que puede cambiar en cualquier momento, y si eso ocurre tendriamos que cambiar todo el c\u00f3digo relacionado.</p> <p>Con los enumerados esto se soluciona, ya que podemos hacer lo siguiente:</p> <pre><code>&lt;?php\nenum Genero {\n    case HOMBRE;\n    case MUJER;\n    case OTROS;\n}\n?&gt;\n</code></pre> <p>En este caso el valor asociado a cada constante, se le asigna autom\u00e1ticamente, y es un entero que empieza en 0 y va incrementando en 1 por cada constante que se a\u00f1ade. Pero este comportamiento se puede cambiar, y se puede asignar un valor espec\u00edfico a cada constante, ya sea un entero o un string.</p> Valor tipo EnteroValor tipo String <pre><code>&lt;?php\nenum Genero: int {\n    case MUJER = 1;\n    case HOMBRE = 2;\n    case OTROS = 3;\n}\n\n$genero = Genero::MUJER;\n</code></pre> <pre><code>&lt;?php\nenum Genero: String {\n    case MUJER = \"M\";\n    case HOMBRE = \"H\";\n    case OTROS = \"O\";\n}\n\n$genero = Genero::MUJER;\n</code></pre> <p>Como se puede apreciar, el c\u00f3digo no cambiar\u00eda, pero la legibilidad del c\u00f3digo mejorar\u00eda. Si en un futuro se cambia el valor de <code>MUJER</code> de <code>1</code> a <code>2</code>, no habr\u00eda que cambiar nada m\u00e1s en el c\u00f3digo, ya que el valor de <code>MUJER</code> se obtiene mediante <code>Estado::MUJER</code>.</p> <p>Tambi\u00e9n los enumerados pueden tener m\u00e9todos, que se pueden utilizar para obtener informaci\u00f3n sobre el enumerado.</p> <pre><code>&lt;?php\nenum Genero {\n    case HOMBRE;\n    case MUJER;\n    case OTROS;\n\n    public function esHombre(): bool {\n        return $this == self::HOMBRE;\n    }\n\n    public function esMujer(): bool {\n        return $this == self::MUJER;\n    }\n\n    public function esOtros(): bool {\n        return $this == self::OTROS;\n    }\n}\n\n$genero = Genero::HOMBRE;\n\nif ($genero-&gt;esHombre()) {\n    echo \"Hombre\";\n} else if ($genero-&gt;esMujer()) {\n    echo \"Mujer\";\n} else if ($genero-&gt;esOtros()) {\n    echo \"Otros\";\n}\n</code></pre> <p>Adem\u00e1s tambi\u00e9n se pueden incluir dentro de Switch, Match, foreach, etc.</p> <pre><code>&lt;?php\nenum Genero {\n    case HOMBRE;\n    case MUJER;\n    case OTROS;\n}\n\n$genero = Genero::HOMBRE;\n\n//La ventaja de los enumerados es que el IDE nos ofrecer\u00e1 autocompletado, y te avisar\u00e1 si existe alg\u00fan tipo que no est\u00e1s incluyendo en el switch\nswitch ($genero) {\n    case Genero::HOMBRE:\n        echo \"Hombre\";\n        break;\n    case Genero::MUJER:\n        echo \"Mujer\";\n        break;\n    case Genero::OTROS:\n        echo \"Otros\";\n        break;\n}\n\n//Con match es m\u00e1s sencillo\nmatch ($genero) {\n    Genero::HOMBRE =&gt; \"Hombre\",\n    Genero::MUJER =&gt; \"Mujer\",\n    Genero::OTROS =&gt; \"Otros\",\n};\n\n//Tambi\u00e9n se pueden recorrer con foreach\nforeach (Genero::getValues() as $genero) {\n    echo $genero;\n}\n</code></pre> <p>En resumen, los enumerados son una herramienta muy potente que nos permite mejorar la legibilidad del c\u00f3digo, y evitar errores en el futuro.</p> <p>M\u00e1s informaci\u00f3n</p> <p>Para conocer m\u00e1s en profuncidad los enumerados, revisa esta gu\u00eda.</p>"},{"location":"03phpoo.html#namespaces","title":"Namespaces","text":"<p>Desde PHP 5.3 y tambi\u00e9n conocidos como Namespaces, permiten organizar las clases/interfaces, funciones y/o constantes de forma similar a los paquetes en Java, evitando conflictos de nombres, y que por tanto, puedan existir clases con el mismo nombre en diferentes namespaces.</p> <p>Recomendaci\u00f3n</p> <p>Un s\u00f3lo namespace por archivo y crear una estructura de carpetas respectando los niveles/subniveles (igual que se hace en Java)</p> <p>Se declaran en la primera l\u00ednea mediante la palabra clave <code>namespace</code> seguida del nombre del espacio de nombres asignado (cada subnivel se separa con la barra invertida <code>\\</code>):</p> <p>Por ejemplo, para colocar la clase <code>Producto</code> dentro del namespace <code>Dwes\\Ejemplos</code> lo har\u00edamos as\u00ed:</p> <pre><code>&lt;?php\nnamespace\u00a0Dwes\\Ejemplos;\n\nconst\u00a0IVA\u00a0=\u00a00.21;\n\nclass\u00a0Producto\u00a0{\n    public\u00a0$nombre;\n    \u00a0\u00a0\n    public\u00a0function\u00a0muestra()\u00a0:\u00a0void\u00a0{\n        echo\"&lt;p&gt;Prod:\"\u00a0.\u00a0$this-&gt;nombre\u00a0.\u00a0\"&lt;/p&gt;\";\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#acceso","title":"Acceso","text":"<p>Para referenciar a un recurso que contiene un namespace, primero hemos de tenerlo disponible haciendo uso de <code>include</code> o <code>require</code>. Si el recurso est\u00e1 en el mismo namespace, se realiza un acceso directo (se conoce como acceso sin cualificar).</p> <p>Los <code>namespace</code> son una forma de organizar las clases en niveles y subniveles, al igual que hacemos con las carpetas en el sistema de archivos.</p> <p>Para poder utilizarlos es necesario que entiendas la sintasis para definirlos y referenciarlos. </p>"},{"location":"03phpoo.html#declarar-un-namespace","title":"Declarar un Namespace","text":"<p>En su forma m\u00e1s simple, un espacio de nombres se declara al comienzo de un archivo PHP utilizando la palabra reservada <code>namespace</code>  seguida del nombre deseado del espacio de nombres. Debe ser la primera declaraci\u00f3n del archivo, antes de cualquier otro c\u00f3digo:</p> <p><pre><code>// Digamos que este es el archivo MyProject.php en la ra\u00edz del proyecto \n&lt;?php \n\nnamespace  MyProject ; \n\nclass  User  {}\n</code></pre> En el ejemplo anterior, la clase <code>User</code> forma paret del espacio de nombres <code>MyProject</code>, es como si hubieramos archivado esta esta clase en una carpeta llamada <code>MyProject</code>.</p> <p>Tambi\u00e9n se pueden anidar los espacios de nombres, de la misma forma que se hace con las carpetas en un sistema de archivos:</p> <p><pre><code>&lt;?php\n\nnamespace MyProject\\Database ;\n\nclass  Connection  {}\n</code></pre> Aqu\u00ed, la clase <code>Connection</code> se ubica dentro de un subespacio de nombres Database, debajo del espacio de nombres principal MyProject.</p> <p>\ud83d\udd25 En PHP, por lo general, el espacio de nombres debe coincidir con la estructura de carpetas en la que se ubica el archivo.</p>"},{"location":"03phpoo.html#importacion-de-namespaces","title":"Importaci\u00f3n de Namespaces","text":"<p>Cuando desea utilizar una clase o funci\u00f3n de un espacio de nombres, se puede realizar de varias formas:</p> <ol> <li> <p>Por su <code>nombre completo</code> (totalmente cualificado)</p> <pre><code>&lt;?php \n\nrequire_once ( \"app/User.php\" ); // Nos desharemos de eso m\u00e1s tarde... ;) \n\n// Digamos que este es el archivo index.php en la ra\u00edz del proyecto \n$user = new  \\MyProject\\User ; //Totalmente cualificado\n</code></pre> </li> <li> <p>Por su <code>nombre relativo</code> (parcialmente cualificado)</p> <p><pre><code>&lt;?php\n\nrequire_once ( \"app/Database/Connection.php\" ); // nos desharemos de \u00e9l m\u00e1s tarde ;) \n\nuse MyProject\\Database\\Connection; \n\n// Sin use, ser\u00eda necesario escribir el espacio de nombres completo \n$conn = new \\MyProject\\Database\\Connection ; \n\n// Ahora, gracias a la declaraci\u00f3n \"use\", podemos hacer lo siguiente: \n$conn = new Connection ;\n</code></pre> Si se requiere utilizar varias clases de un mismo espacio de nombres, se pueden importar todas a la vez:</p> <pre><code>use MyProject\\Database\\{Connection, QueryBuilder, RecordSet}; \n</code></pre> </li> <li> <p>Uso de <code>alias</code> para simplificar el acceso</p> <p>A veces los nombres de las clases son bastante largos, por lo que se pueden utilizar alias para simplificar el acceso a las clases:</p> <pre><code>require_once (\"app/Services/SomeDataProviderAuthService.php\" ) //ten paciencia... \n\nuse  MyProject\\Services\\SomeDataProviderAuthService as SomeDPAuth ; \n\n// Si no us\u00e1ramos alias, tendr\u00edamos que hacer: \n$conn = new  SomeDataProviderAuthService ; \n\n// pero gracias a los alias, podemos usar: \n$conn = new  SomeDPAuth ;\n</code></pre> </li> </ol> <p>To <code>use</code> or not to <code>use</code></p> <p>En resumen, <code>use</code> permite acceder sin cualificar a recursos que est\u00e1n en otro namespace. Si estamos en el mismo espacio de nombre, no necesitamos <code>use</code>.</p>"},{"location":"03phpoo.html#organizacion","title":"Organizaci\u00f3n","text":"<p>Todo proyecto, conforme crece, necesita organizar su c\u00f3digo fuente. Se plantea una organizaci\u00f3n en la que los archivos que interactuan con el navegador se colocan en el ra\u00edz, y las clases que definamos van dentro de un namespace (y dentro de su propia carpeta <code>src</code> o <code>app</code>).</p> Organizaci\u00f3n del c\u00f3digo fuente <p>Organizaci\u00f3n, includes y usos</p> <ul> <li>Colocaremos cada recurso en un fichero aparte.</li> <li>En la primera l\u00ednea indicaremos su namespace (si no est\u00e1 en el ra\u00edz).</li> <li>Si utilizamos otros recursos, haremos un <code>include_once</code> de esos recursos (clases, interfaces, etc...).<ul> <li>Cada recurso debe incluir todos los otros recursos que referencie: la clase de la que hereda, interfaces que implementa, clases utilizadas/recibidas como par\u00e1metros, etc...</li> </ul> </li> <li>Si los recursos est\u00e1n en un espacio de nombres diferente al que estamos, emplearemos <code>use</code> con la ruta completa para luego utilizar referencias sin cualificar.</li> </ul>"},{"location":"03phpoo.html#autoload","title":"Autoload","text":"<p>\u00bfNo es tedioso tener que hacer el <code>include</code> de las clases? El autoload viene al rescate.</p> <p>As\u00ed pues, permite cargar las clases (no las constantes ni las funciones) que se van a utilizar y evitar tener que hacer el <code>include_once</code> de cada una de ellas. Para ello, se utiliza la funci\u00f3n <code>spl_autoload_register</code></p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>\u00bfPor qu\u00e9 se llaman autoload?</p> <p>Porque antes se realizaba mediante el m\u00e9todo m\u00e1gico <code>__autoload()</code>, el cual est\u00e1 deprecated desde PHP 7.2</p> <p>Y \u00bfc\u00f3mo organizamos ahora nuestro c\u00f3digo aprovechando el autoload?</p> Organizaci\u00f3n con autoload <p>Para facilitar la b\u00fasqueda de los recursos a incluir, es recomendable colocar todas las clases dentro de una misma carpeta. Nosotros la vamos a colocar dentro de <code>app</code> (m\u00e1s adelante, cuando estudiemos Laravel veremos el motivo de esta decisi\u00f3n). Otras carpetas que podemos crear son <code>test</code> para colocar las pruebas PhpUnit que luego realizaremos, o la carpeta <code>vendor</code> donde se almacenar\u00e1n las librer\u00edas del proyecto (esta carpeta es un est\u00e1ndard dentro de PHP, ya que Composer la crea autom\u00e1ticamente).</p> <p>Como hemos colocado todos nuestros recursos dentro de <code>app</code>, ahora nuestro <code>autoload.php</code> (el cual colocamos en la carpeta ra\u00edz) s\u00f3lo va a buscar dentro de esa carpeta:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    include_once\u00a0\"app/\".$nombreClase.'.php';\n}\u00a0);\n?&gt;\n</code></pre> <p>Autoload y rutas err\u00f3neas</p> <p>En Ubuntu al hacer el include de la clase que recibe como par\u00e1metro, las barras de los namespace (<code>\\</code>) son diferentes a las de las rutas (<code>/</code>). Por ello, es mejor que utilicemos el fichero autoload:</p> <pre><code>&lt;?php\nspl_autoload_register(\u00a0function(\u00a0$nombreClase\u00a0)\u00a0{\n    $ruta = \"app\\\\\".$nombreClase.'.php';\n    $ruta = str_replace(\"\\\\\", \"/\", $ruta); // Sustituimos las barras\n    include_once\u00a0$ruta';\n}\u00a0);\n?&gt;\n</code></pre>"},{"location":"03phpoo.html#carga-automatica-con-composer","title":"Carga autom\u00e1tica con Composer","text":"<p><code>Composer</code> es una herramienta de administraci\u00f3n de dependencias para PHP (como npm en Node). Adem\u00e1s de administrar las dependencias de su proyecto, Composer tambi\u00e9n puede manejar la carga autom\u00e1tica de clases. Composer sigue la especificaci\u00f3n PSR-4, por lo que si sigue la convenci\u00f3n de nombres de archivos y espacios de nombres, Composer puede cargar autom\u00e1ticamente las clases de su proyecto.</p> <p>Esta configuraci\u00f3n se realiza dentro del fichero de configuraci\u00f3n de Composer <code>composer.json</code>:</p> <p><pre><code>{\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyProject\\\\\": \"app/\"\n        }\n    }\n}\n</code></pre> En este ejemplo, Composer buscar\u00e1 las clases del espacio de nombres <code>MyProject</code> en la carpeta <code>app/</code> del proyecto.</p> <p>Una vez realizado esto, se debe ejecutar el comando <code>composer dump-autoload</code> para que Composer genere el archivo <code>vendor/autoload.php</code> que se encargar\u00e1 de cargar autom\u00e1ticamente las clases.</p> <p>Este archivo <code>autoload.php</code> se incluir\u00e1 en el archivo principal de su proyecto (normalmente index.php), y se encargar\u00e1 de cargar autom\u00e1ticamente las clases cuando sea necesario.</p> <pre><code>require 'vendor/autoload.php';\n</code></pre> <p>Recuerda</p> <p>Composer se estudiar\u00e1 en profundidad m\u00e1s adelante en el curso.</p>"},{"location":"03phpoo.html#gestion-de-errores","title":"Gesti\u00f3n de Errores","text":"<p>PHP clasifica los errores que ocurren en diferentes niveles. Cada nivel se identifica con una constante. Por ejemplo:</p> <ul> <li><code>E_ERROR</code>: errores fatales, no recuperables. Se interrumpe el script.</li> <li><code>E_WARNING</code>: advertencias en tiempo de ejecuci\u00f3n. El script no se interrumpe.</li> <li><code>E_NOTICE</code>: avisos en tiempo de ejecuci\u00f3n.  </li> </ul> <p>Pod\u00e9is comprobar el listado completo de constantes de https://www.php.net/manual/es/errorfunc.constants.php</p> <p>Para la configuraci\u00f3n de los errores podemos hacerlo de dos formas:</p> <ul> <li>A nivel de <code>php.ini</code>:<ul> <li><code>error_reporting</code>: indica los niveles de errores a notificar<ul> <li><code>error_reporting = E_ALL &amp; ~E_NOTICE</code> -&gt; Todos los errores menos los avisos en tiempo de ejecuci\u00f3n.</li> </ul> </li> <li><code>display_errors</code>: indica si mostrar o no los errores por pantalla. En entornos de producci\u00f3n es com\u00fan ponerlo a <code>off</code></li> </ul> </li> <li>mediante c\u00f3digo con las siguientes funciones:<ul> <li><code>error_reporting(codigo)</code> -&gt; Controla qu\u00e9 errores notificar</li> <li><code>set_error_handler(nombreManejador)</code> -&gt; Indica que funci\u00f3n se invocar\u00e1 cada vez que se encuentre un error. El manejador recibe como par\u00e1metros el nivel del error y el mensaje</li> </ul> </li> </ul> <p>A continuaci\u00f3n tenemos un ejemplo mediante c\u00f3digo:</p> Funciones para la gesti\u00f3n de erroresConsola <pre><code>&lt;?php\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE\u00a0&amp;\u00a0~E_WARNING);\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n\nerror_reporting(E_ALL\u00a0&amp;\u00a0~E_NOTICE);\nset_error_handler(\"miManejadorErrores\");\n$resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\nrestore_error_handler();\u00a0//\u00a0vuelve\u00a0al\u00a0anterior\n\nfunction\u00a0miManejadorErrores($nivel,\u00a0$mensaje)\u00a0{\n    switch($nivel)\u00a0{\n        case\u00a0E_WARNING:\n            echo\u00a0\"&lt;strong&gt;Warning&lt;/strong&gt;:\u00a0$mensaje.&lt;br/&gt;\";\n            break;\n        default:\n            echo\u00a0\"Error\u00a0de\u00a0tipo\u00a0no\u00a0especificado:\u00a0$mensaje.&lt;br/&gt;\";\n    }\n}\n</code></pre> <pre><code>Error de tipo no especificado: Undefined variable: dividendo.\nError de tipo no especificado: Undefined variable: divisor.\nError de tipo Warning: Division by zero.\n</code></pre>"},{"location":"03phpoo.html#excepciones","title":"Excepciones","text":"<p>La gesti\u00f3n de excepciones forma parte desde PHP 5. Su funcionamiento es similar a Java, haciendo uso de un bloque <code>try / catch / finally</code>. Si detectamos una situaci\u00f3n an\u00f3mala y queremos lanzar una excepci\u00f3n, deberemos realizar <code>throw new Exception</code> (adjuntando el mensaje que lo ha provocado).</p> <pre><code>&lt;?php\ntry\u00a0{\n    if\u00a0($divisor\u00a0==\u00a00) {\n        throw\u00a0new\u00a0Exception(\"Divisi\u00f3n\u00a0por\u00a0cero.\");\n    }\n    $resultado\u00a0=\u00a0$dividendo\u00a0/\u00a0$divisor;\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n    echo\u00a0\"Se\u00a0ha\u00a0producido\u00a0el\u00a0siguiente\u00a0error:\u00a0\".$e-&gt;getMessage();\n}\n</code></pre> <p>La clase <code>Exception</code> es la clase padre de todas las excepciones. Su constructor recibe <code>mensaje[,codigoError][,excepcionPrevia]</code>.</p> <p>A partir de un objeto <code>Exception</code>, podemos acceder a los m\u00e9todos <code>getMessage()</code>y <code>getCode()</code> para obtener el mensaje y el c\u00f3digo de error de la excepci\u00f3n capturada.</p> <p>El propio lenguaje ofrece un conjunto de excepciones ya definidas, las cuales podemos capturar (y lanzar desde PHP 7). Se recomienda su consulta en la documentaci\u00f3n oficial.</p>"},{"location":"03phpoo.html#creando-excepciones","title":"Creando excepciones","text":"<p>Para crear una excepci\u00f3n, la forma m\u00e1s corta es crear una clase que \u00fanicamente herede de <code>Exception</code>.</p> <pre><code>&lt;?php\nclass\u00a0HolaExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre> <p>Si queremos, y es recomendable dependiendo de los requisitos, podemos sobrecargar los m\u00e9todos m\u00e1gicos, por ejemplo, sobrecargando el constructor y llamando al constructor del padre, o rescribir el m\u00e9todo <code>__toString</code> para cambiar su mensaje:</p> <pre><code>&lt;?php\nclass\u00a0MiExcepcion\u00a0extends\u00a0Exception\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct($msj,\u00a0$codigo\u00a0=\u00a00,\u00a0Exception\u00a0$previa\u00a0=\u00a0null)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0c\u00f3digo\u00a0propio\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent::__construct($msj,\u00a0$codigo,\u00a0$previa);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__\u00a0.\u00a0\":\u00a0[{$this-&gt;code}]:\u00a0{$this-&gt;message}\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0miFuncion()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Una\u00a0funci\u00f3n\u00a0personalizada\u00a0para\u00a0este\u00a0tipo\u00a0de\u00a0excepci\u00f3n\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n</code></pre> <p>Si definimos una excepci\u00f3n de aplicaci\u00f3n dentro de un namespace, cuando referenciemos a <code>Exception</code>, deberemos referenciarla mediante su nombre totalmente cualificado (<code>\\Exception</code>), o utilizando <code>use</code>:</p> Mediante nombre totalmente cualificadoMediante <code>use</code> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0\\Exception\u00a0{}\n</code></pre> <pre><code>&lt;?php\nnamespace \\Dwes\\Ejemplos;\n\nuse Exception;\n\nclass\u00a0AppExcepcion\u00a0extends\u00a0Exception\u00a0{}\n</code></pre>"},{"location":"03phpoo.html#excepciones-multiples","title":"Excepciones m\u00faltiples","text":"<p>Se pueden usar excepciones m\u00faltiples para comprobar diferentes condiciones. A la hora de capturarlas, se hace de m\u00e1s espec\u00edfica a m\u00e1s general.</p> <pre><code>&lt;?php\n$email\u00a0=\u00a0\"ejemplo@ejemplo.com\";\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0si\u00a0el\u00a0email\u00a0es\u00a0v\u00e1lido\n\u00a0\u00a0\u00a0\u00a0if(filter_var($email,\u00a0FILTER_VALIDATE_EMAIL)\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0MiExcepcion($email);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0//\u00a0Comprueba\u00a0la\u00a0palabra\u00a0ejemplo\u00a0en\u00a0la\u00a0direcci\u00f3n\u00a0email\n\u00a0\u00a0\u00a0\u00a0if(strpos($email,\u00a0\"ejemplo\")\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception(\"$email\u00a0es\u00a0un\u00a0email\u00a0de\u00a0ejemplo no v\u00e1lido\");\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0catch\u00a0(MiExcepcion\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;miFuncion();\n}\u00a0catch(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Autoevaluaci\u00f3n</p> <p>\u00bfQu\u00e9 pasar\u00eda al ejectuar el siguiente c\u00f3digo? <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0MainException\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\u00a0catch\u00a0(SubException\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0SubException\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre></p> <p>Si en el mismo <code>catch</code> queremos capturar varias excepciones, hemos de utilizar el operador <code>|</code>:</p> <pre><code>&lt;?php\nclass\u00a0MainException\u00a0extends\u00a0Exception\u00a0{}\nclass\u00a0SubException\u00a0extends\u00a0MainException\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0SubException(\"Lanzada\u00a0SubException\");\n}\u00a0catch\u00a0(MainException\u00a0|\u00a0SubException\u00a0$e\u00a0)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Capturada\u00a0Exception\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre> <p>Desde PHP 7, existe el tipo <code>Throwable</code>, el cual es un interfaz que implementan tanto los errores como las excepciones, y nos permite capturar los dos tipos a la vez:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0tu\u00a0codigo\n}\u00a0catch\u00a0(Throwable\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Forma\u00a0de\u00a0capturar\u00a0errores\u00a0y\u00a0excepciones\u00a0a\u00a0la\u00a0vez';\n}\n</code></pre> <p>Si s\u00f3lo queremos capturar los errores fatales, podemos hacer uso de la clase <code>Error</code>:</p> <pre><code>&lt;?php\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0Genera\u00a0una\u00a0notificaci\u00f3n\u00a0que\u00a0no\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$variableNoAsignada;\n\u00a0\u00a0\u00a0\u00a0//\u00a0Error\u00a0fatal\u00a0que\u00a0se\u00a0captura\n\u00a0\u00a0\u00a0\u00a0funcionQueNoExiste();\n}\u00a0catch\u00a0(Error\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error\u00a0capturado:\u00a0\"\u00a0.\u00a0$e-&gt;getMessage();\n}\n</code></pre>"},{"location":"03phpoo.html#relanzar-excepciones","title":"Relanzar excepciones","text":"<p>En las aplicaciones reales, es muy com\u00fan capturar una excepci\u00f3n de sistema y lanzar una de aplicaci\u00f3n que hemos definido nostros. Tambi\u00e9n podemos lanzar las excepciones sin necesidad de estar dentro de un <code>try/catch</code>.</p> <pre><code>&lt;?php\nclass\u00a0AppException\u00a0extends\u00a0Exception\u00a0{}\n\ntry\u00a0{\n\u00a0\u00a0\u00a0\u00a0//\u00a0C\u00f3digo\u00a0de\u00a0negocio\u00a0que\u00a0falla\n}\u00a0catch\u00a0(Exception\u00a0$e)\u00a0{\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0AppException(\"AppException:\u00a0\".$e-&gt;getMessage(), $e-&gt;getCode(),\u00a0$e);\n}\n</code></pre>"},{"location":"03phpoo.html#metodos-encadenados","title":"M\u00e9todos encadenados","text":"<p>Sigue el planteamiento de la programaci\u00f3n funcional, y tambi\u00e9n se conoce como method chaining. Plantea que sobre un objeto se realizan varias llamadas.</p> <pre><code>&lt;?php\n$p1\u00a0=\u00a0new\u00a0Libro();\n$p1-&gt;setNombre(\"Harry\u00a0Potter\");\n$p1-&gt;setAutor(\"JK\u00a0Rowling\");\necho\u00a0$p1;\n\n// Method chaining\n$p2\u00a0=\u00a0new\u00a0Libro();\n$p2-&gt;setNombre(\"Patria\")-&gt;setAutor(\"Aramburu\");\necho\u00a0$p2;\n</code></pre> <p>Para facilitarlo, vamos a modificar todos sus m\u00e9todos mutadores (que modifican datos, setters, ...) para que devuelvan una referencia a <code>$this</code>:</p> <pre><code>&lt;?php\nclass\u00a0Libro\u00a0{\n    private\u00a0string\u00a0$nombre;\n    private\u00a0string\u00a0$autor;\n\n    public\u00a0function\u00a0getNombre()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre;\n    }\n    public\u00a0function\u00a0setNombre(string\u00a0$nombre)\u00a0:\u00a0Libro\u00a0{\u00a0\n        $this-&gt;nombre\u00a0=\u00a0$nombre;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0getAutor()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;autor;\n    }\n    public\u00a0function\u00a0setAutor(string\u00a0$autor)\u00a0:\u00a0Libro\u00a0{\n        $this-&gt;autor\u00a0=\u00a0$autor;\n        return\u00a0$this;\n    }\n\n    public\u00a0function\u00a0__toString()\u00a0:\u00a0string\u00a0{\n        return\u00a0$this-&gt;nombre.\"\u00a0de\u00a0\".$this-&gt;autor;\n    }\n}\n</code></pre>"},{"location":"03phpoo.html#sintaxis-fluent-fluida","title":"Sintaxis Fluent (Fluida)","text":"<p>Este patr\u00f3n de dise\u00f1o se conoce como <code>Fluent Interface</code> y se utiliza para crear un c\u00f3digo m\u00e1s legible y f\u00e1cil de entender. Es como si se estuviera escribiendo una frase en ingl\u00e9s, donde cada m\u00e9todo es una palabra, y un conjunto de palabras forman una frase (una acci\u00f3n).</p> <p>Un ejemplo de esto ser\u00eda para realizar validaciones que lleva a cabo <code>Laravel</code>:</p> <pre><code>&lt;?php\n$rules = [\n    'id' =&gt; Rule::int()\n                -&gt;required(),\n\n    'name' =&gt; Rule::string()\n                    -&gt;required()\n                    -&gt;minLength(3)\n                    -&gt;toString(),\n\n    'email' =&gt; Rule::string()\n                    -&gt;required()\n                    -&gt;email()\n                    -&gt;toArray(),\n\n    'role_id' =&gt; Rule::modelExists(Role::class),\n];\n</code></pre> <p>En este ejemplo vemos como se encadenan los m\u00e9todos <code>int()</code>, <code>required()</code>, <code>string()</code>, <code>minLength(3)</code>, <code>toString()</code>, <code>toArray()</code>, <code>email()</code>, ... haciendo realmente legible el c\u00f3digo. Tambi\u00e9n el formato en multil\u00ednea ayuda a que sea m\u00e1s legible.</p> <p>En el caso de <code>name</code>, se est\u00e1 validando que sea un string, que sea requerido, que tenga una longitud m\u00ednima de 3 caracteres y que se convierta a string.</p> <p>Si no se utilizara el patr\u00f3n <code>Fluent Interface</code>, el c\u00f3digo ser\u00eda mucho m\u00e1s largo y menos legible.</p> <pre><code>&lt;?php\n$rules = [\n    'id' =&gt; Rule::int();\n    'name' =&gt; Rule::string();\n\n    'email' =&gt; Rule::string();\n    'role_id' =&gt; Rule::modelExists(Role::class);\n];\n\n$rules['name']-&gt;required();\n$rules['name']-&gt;minLength(3);\n$rules['name']-&gt;toString();\n\n$rules['email']-&gt;required();\n$rules['email']-&gt;email();\n$rules['email']-&gt;toArray();\n\n//...\n//Como se puede aprecer el c\u00f3digo es mucho m\u00e1s largo y menos legible\n</code></pre>"},{"location":"03phpoo.html#spl","title":"SPL","text":"<p>Standard PHP Library es el conjunto de funciones y utilidades que ofrece PHP, como:</p> <ul> <li>Estructuras de datos<ul> <li>Pila, cola, cola de prioridad, lista doblemente enlazada, etc... </li> </ul> </li> <li>Conjunto de iteradores dise\u00f1ados para recorrer estructuras agregadas<ul> <li>arrays, resultados de bases de datos, \u00e1rboles XML, listados de directorios, etc.</li> </ul> </li> </ul> <p>Pod\u00e9is consultar la documentaci\u00f3n en https://www.php.net/manual/es/book.spl.php o ver algunos ejemplos en https://diego.com.es/tutorial-de-la-libreria-spl-de-php</p> <p>Tambi\u00e9n define un conjunto de excepciones que podemos utilizar para que las lancen nuestras aplicaciones:</p> <ul> <li><code>LogicException</code> (<code>extends Exception</code>)<ul> <li><code>BadFunctionCallException</code></li> <li><code>BadMethodCallException</code></li> <li><code>DomainException</code></li> <li><code>InvalidArgumentException</code></li> <li><code>LengthException</code></li> <li><code>OutOfRangeException</code></li> </ul> </li> <li><code>RuntimeException</code> (<code>extends Exception</code>)<ul> <li><code>OutOfBoundsException</code></li> <li><code>OverflowException</code></li> <li><code>RangeException</code></li> <li><code>UnderflowException</code></li> <li><code>UnexpectedValueException</code></li> </ul> </li> </ul> <p>Tambi\u00e9n pod\u00e9is consultar la documentaci\u00f3n de estas excepciones en https://www.php.net/manual/es/spl.exceptions.php.</p>"},{"location":"03phpoo.html#referencias","title":"Referencias","text":"<ul> <li>Manual de PHP</li> <li>Manual de OO en PHP - www.desarrolloweb.com</li> </ul>"},{"location":"04web.html","title":"Programaci\u00f3n Web","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 12 sesiones</p> Resultado de aprendizaje Criterios de evaluaci\u00f3n 4. Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. a) Se han identificado los mecanismos disponibles para el mantenimiento de la informaci\u00f3n que concierne a un cliente web concreto y se han se\u00f1alado sus ventajas. b) Se han utilizado sesiones para mantener el estado de las aplicaciones Web.  c) Se han utilizado cookies para almacenar informaci\u00f3n en el cliente Web y para recuperar su contenido.  d) Se han identificado y caracterizado los mecanismos disponibles para la autentificaci\u00f3n de usuarios.  e) Se han escrito aplicaciones que integren mecanismos de autentificaci\u00f3n de usuarios.  f) Se han realizado adaptaciones a aplicaciones Web existentes como gestores de contenidos u otras.  g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo."},{"location":"04web.html#variables-de-servidor","title":"Variables de servidor","text":"<p>PHP almacena la informaci\u00f3n del servidor y de las peticiones HTTP en seis arrays globales:</p> <ul> <li><code>$_ENV</code>: informaci\u00f3n sobre las variables de entorno</li> <li><code>$_GET</code>: par\u00e1metros enviados en la petici\u00f3n GET</li> <li><code>$_POST</code>: par\u00e1metros enviados en el envio POST</li> <li><code>$_COOKIE</code>: contiene las cookies de la petici\u00f3n, las claves del array son los nombres de las cookies</li> <li><code>$_SERVER</code>: informaci\u00f3n sobre el servidor</li> <li><code>$_FILES</code>: informaci\u00f3n sobre los ficheros cargados via upload</li> </ul> <p>Si nos centramos en el array <code>$_SERVER</code> podemos consultar las siguientes propiedades:</p> <ul> <li><code>PHP_SELF</code>: nombre del script ejecutado, relativo al document root (p.ej: <code>/tienda/carrito.php</code>)</li> <li><code>SERVER_SOFTWARE</code>: (p.ej: Apache)</li> <li><code>SERVER_NAME</code>: dominio, alias DNS (p.ej: <code>www.elche.es</code>)</li> <li><code>REQUEST_METHOD</code>: GET</li> <li><code>REQUEST_URI</code>: URI, sin el dominio</li> <li><code>QUERY_STRING</code>: todo lo que va despu\u00e9s de <code>?</code> en la URL (p.ej: <code>heroe=Batman&amp;nombre=Bruce</code>)</li> </ul> <p>M\u00e1s informaci\u00f3n en https://www.php.net/manual/es/reserved.variables.server.php</p> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"PHP_SELF\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php\necho\u00a0$_SERVER[\"SERVER_SOFTWARE\"].\"&lt;br&gt;\";\u00a0//\u00a0Apache/2.4.46\u00a0(Win64)\u00a0OpenSSL/1.1.1g\u00a0PHP/7.4.9\necho\u00a0$_SERVER[\"SERVER_NAME\"].\"&lt;br&gt;\";\u00a0//\u00a0localhost\n\necho\u00a0$_SERVER[\"REQUEST_METHOD\"].\"&lt;br&gt;\";\u00a0//\u00a0GET\necho\u00a0$_SERVER[\"REQUEST_URI\"].\"&lt;br&gt;\";\u00a0//\u00a0/u4/401server.php?heroe=Batman\necho\u00a0$_SERVER[\"QUERY_STRING\"].\"&lt;br&gt;\";\u00a0//\u00a0heroe=Batman\n</code></pre> <p>Otras propiedades relacionadas:</p> <ul> <li><code>PATH_INFO</code>: ruta extra tras la petici\u00f3n. Si la URL es <code>http://www.php.com/php/pathInfo.php/algo/cosa?foo=bar</code>, entonces <code>$_SERVER['PATH_INFO']</code> ser\u00e1 <code>/algo/cosa</code>.</li> <li><code>REMOTE_HOST</code>: hostname que hizo la petici\u00f3n</li> <li><code>REMOTE_ADDR</code>: IP del cliente</li> <li><code>AUTH_TYPE</code>: tipo de autenticaci\u00f3n (p.ej: Basic)</li> <li><code>REMOTE_USER</code>: nombre del usuario autenticado</li> </ul> <p>Apache crea una clave para cada cabecera HTTP, en may\u00fasculas y sustituyendo los guiones por subrayados:</p> <ul> <li><code>HTTP_USER_AGENT</code>: agente (navegador)</li> <li><code>HTTP_REFERER</code>: p\u00e1gina desde la que se hizo la petici\u00f3n</li> </ul> <pre><code>&lt;?php\necho\u00a0$_SERVER[\"HTTP_USER_AGENT\"].\"&lt;br&gt;\";\u00a0//\u00a0Mozilla/5.0\u00a0(Windows\u00a0NT\u00a010.0;\u00a0Win64;\u00a0x64)\u00a0AppleWebKit/537.36\u00a0(KHTML,\u00a0like\u00a0Gecko)\u00a0Chrome/87.0.4280.88\u00a0Safari/537.36\n</code></pre>"},{"location":"04web.html#formularios","title":"Formularios","text":"<p>A la hora de enviar un formulario, debemos tener claro cuando usar GET o POST</p> <ul> <li> <p>GET: los par\u00e1metros se pasan en la URL</p> <ul> <li>&lt;2048 caracteres, s\u00f3lo ASCII</li> <li>Permite almacenar la direcci\u00f3n completa (marcador  / historial)</li> <li>Idempotente: dos llamadas con los mismos datos siempre debe dar el mismo resultado</li> <li>El navegador puede cachear las llamadas</li> </ul> </li> <li> <p>POST: par\u00e1metros ocultos (no encriptados)</p> <ul> <li>Sin l\u00edmite de datos, permite datos binarios.</li> <li>No se pueden cachear</li> <li>No idempotente \u2192 actualizar la BBDD</li> </ul> </li> </ul> <p>As\u00ed pues, para recoger los datos accederemos al array dependiendo del m\u00e9todo del formulario que nos ha invocado:</p> <pre><code>&lt;?php\n$par = $_GET[\"parametro\"]\n$par = $_POST[\"parametro\"]\n</code></pre> <p>Para los siguientes apartados nos vamos a basar en el siguiente ejemplo:</p> <pre><code>&lt;form action=\"formulario.php\" method=\"GET\"&gt;\n    &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"\" /&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\" /&gt;\n        &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\" /&gt;\n        &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n    &lt;/p&gt;\n\n    &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"04web.html#validacion","title":"Validaci\u00f3n","text":"<p>Respecto a la validaci\u00f3n, es conveniente siempre hacer validaci\u00f3n doble:</p> <ul> <li>En el cliente mediante JS</li> <li>En servidor, antes de llamar a negocio, es conveniente volver a validar los datos.</li> </ul> <pre><code>&lt;?php\nif\u00a0(isset($_GET[\"parametro\"]))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$par\u00a0=\u00a0$_GET[\"parametro\"];\n\u00a0\u00a0\u00a0\u00a0//\u00a0comprobar\u00a0si\u00a0$par\u00a0tiene\u00a0el\u00a0formato\u00a0adecuado,\u00a0su\u00a0valor,\u00a0etc...\n}\n</code></pre> <p>Librer\u00edas de validaci\u00f3n</p> <p>Existen diversas librer\u00edas que facilitan la validaci\u00f3n de los formularios, como son respect/validation o particle/validator. Cuando estudiemos Laravel profundizaremos en la validaci\u00f3n de forma declarativa.</p>"},{"location":"04web.html#parametro-multivalor","title":"Par\u00e1metro multivalor","text":"<p>Existen elementos HTML que env\u00edan varios valores:</p> <ul> <li><code>select multiple</code></li> <li><code>checkbox</code></li> </ul> <p>Para recoger los datos, el nombre del elemento debe ser un array.</p> <pre><code>&lt;select name=\"lenguajes[]\" multiple=\"true\"&gt;\n    &lt;option value=\"c\"&gt;C&lt;/option&gt;\n    &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n    &lt;option value=\"php\"&gt;PHP&lt;/option&gt;\n    &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"c\" /&gt; C&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"java\" /&gt; Java&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"php\" /&gt; Php&lt;br /&gt;\n&lt;input type=\"checkbox\" name=\"lenguajes[]\" value=\"python\" /&gt; Python&lt;br /&gt;\n</code></pre> <p>De manera que luego al recoger los datos:</p> <pre><code>&lt;?php\n$lenguajes = $_GET[\"lenguajes\"];\n\nforeach ($lenguajes as $lenguaje) {\n    echo \"$lenguaje &lt;br /&gt;\";\n}\n</code></pre>"},{"location":"04web.html#volviendo-a-rellenar-un-formulario","title":"Volviendo a rellenar un formulario","text":"<p>Un sticky form es un formulario que recuerda sus valores. Para ello, hemos de rellenar los atributos <code>value</code> de los elementos HTML con la informaci\u00f3n que conten\u00edan:</p> <pre><code>&lt;?php\nif (!empty($_POST['modulos']) &amp;&amp; !empty($_POST['nombre'])) {\n  // Aqu\u00ed se incluye el c\u00f3digo a ejecutar cuando los datos son correctos\n} else {\n  // Generamos el formulario\n  $nombre = $_POST['nombre'] ?? \"\";\n  $modulos = $_POST['modulos'] ?? [];\n  ?&gt;\n  &lt;form action=\"&lt;?php echo $_SERVER['PHP_SELF'];?&gt;\" method=\"POST\"&gt;\n   &lt;p&gt;&lt;label for=\"nombre\"&gt;Nombre del alumno:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"nombre\" id=\"nombre\" value=\"&lt;?= $nombre ?&gt;\" /&gt; \n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWES\" value=\"DWES\"\n    &lt;?php if(in_array(\"DWES\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWES\"&gt;Desarrollo web en entorno servidor&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;p&gt;&lt;input type=\"checkbox\" name=\"modulos[]\" id=\"modulosDWEC\" value=\"DWEC\"\n    &lt;?php if(in_array(\"DWEC\",$modulos)) echo 'checked=\"checked\"'; ?&gt; /&gt;\n    &lt;label for=\"modulosDWEC\"&gt;Desarrollo web en entorno cliente&lt;/label&gt;\n   &lt;/p&gt;\n   &lt;input type=\"submit\" value=\"Enviar\" name=\"enviar\"/&gt;\n  &lt;/form&gt;\n&lt;?php } ?&gt;\n</code></pre>"},{"location":"04web.html#subiendo-archivos","title":"Subiendo archivos","text":"<p>Se almacenan en el servidor en el array <code>$_FILES</code> con el nombre del campo del tipo <code>file</code> del formulario.</p> <pre><code>&lt;form enctype=\"multipart/form-data\" action=\"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;\"  method=\"POST\"&gt;\n    Archivo: &lt;input name=\"archivoEnviado\" type=\"file\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" name=\"btnSubir\" value=\"Subir\" /&gt;\n&lt;/form&gt;\n</code></pre> <p>Configuraci\u00f3n en <code>php.ini</code></p> <ul> <li><code>file_uploads</code>: on / off</li> <li><code>upload_max_filesize</code>: 2M</li> <li><code>upload_tmp_dir</code>: directorio temporal. No es necesario configurarlo, coger\u00e1 el predeterminado del sistema</li> <li><code>post_max_size</code>: tama\u00f1o m\u00e1ximo de los datos POST. Debe ser mayor a upload_max_filesize.</li> <li><code>max_file_uploads</code>: n\u00famero m\u00e1ximo de archivos que se pueden cargar a la vez.</li> <li><code>max_input_time</code>: tiempo m\u00e1ximo empleado en la carga (GET/POST y upload \u2192 normalmente se configura en 60)</li> <li><code>memory_limit</code>: 128M</li> <li><code>max_execution_time</code>: tiempo de ejecuci\u00f3n de un script (no tiene en cuenta el upload)</li> </ul> <p>Para cargar los archivos, accedemos al array <code>$_FILES</code>:</p> <pre><code>&lt;?php\nif (isset($_POST['btnSubir']) &amp;&amp; $_POST['btnSubir'] == 'Subir') {\n    if (is_uploaded_file($_FILES['archivoEnviado']['tmp_name'])) {\n        // subido con \u00e9xito\n        $nombre = $_FILES['archivoEnviado']['name'];\n        move_uploaded_file($_FILES['archivoEnviado']['tmp_name'], \"./uploads/{$nombre}\");\n\n        echo \"&lt;p&gt;Archivo $nombre subido con \u00e9xito&lt;/p&gt;\";\n    }\n}\n</code></pre> <p>Cada archivo cargado en <code>$_FILES</code> tiene:</p> <ul> <li><code>name</code>: nombre</li> <li><code>tmp_name</code>: ruta temporal</li> <li><code>size</code>: tama\u00f1o en bytes</li> <li><code>type</code>: tipo MIME</li> <li><code>error</code>: si hay error, contiene un mensaje. Si ok \u2192 0.</li> </ul>"},{"location":"04web.html#cabeceras-de-respuesta","title":"Cabeceras de respuesta","text":"<p>Debe ser lo primero a devolver. Se devuelven mediante la funci\u00f3n <code>header(cadena)</code>. Mediante las cabeceras podemos configurar el tipo de contenido, tiempo de expiraci\u00f3n, redireccionar el navegador, especificar errores HTTP, etc.</p> <pre><code>&lt;?php header(\"Content-Type: text/plain\"); ?&gt;\n&lt;?php header(\"Location: http://www.ejemplo.com/inicio.html\");\nexit(); \n</code></pre> <p>Se puede comprobar en las herramientas del desarrollador de los navegadores web mediante Developer Tools \u2192 Network \u2192 Headers.</p> <p>Es muy com\u00fan configurar las cabeceras para evitar consultas a la cach\u00e9 o provocar su renovaci\u00f3n:</p> <pre><code>&lt;?php\nheader(\"Expires: Sun, 31 Jan 2021 23:59:59 GMT\");\n// tres horas\n$now = time();\n$horas3 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 60 * 60 * 3);\nheader(\"Expires: {$horas3}\");\n// un a\u00f1o\n$now = time();\n$anyo1 = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\", $now + 365 * 86440);\nheader(\"Expires: {$anyo1}\");\n// se marca como expirado (fecha en el pasado)\n$pasado = gmstrftime(\"%a, %d %b %Y %H:%M:%S GMT\");\nheader(\"Expires: {$pasado}\");\n// evitamos cache de navegador y/o proxy\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \" . gmdate(\"D, d M Y H:i:s\") . \" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n</code></pre>"},{"location":"04web.html#gestion-del-estado","title":"Gesti\u00f3n del estado","text":"<p>HTTP es un protocolo stateless, sin estado. Por ello, se simula el estado mediante el uso de cookies, tokens o la sesi\u00f3n. El estado es necesario para procesos tales como el carrito de la compra, operaciones asociadas a un usuario, etc... El mecanismo de PHP para gestionar la sesi\u00f3n emplea cookies de forma interna. Las cookies se almacenan en el navegador, y la sesi\u00f3n en el servidor web.</p>"},{"location":"04web.html#cookies","title":"Cookies","text":"<p>Las cookies se almacenan en el array global <code>$_COOKIE</code>. Lo que coloquemos dentro del array, se guardar\u00e1 en el cliente. Hay que tener presente que el cliente puede no querer almacenarlas. </p> <p>Existe una limitaci\u00f3 de 20 cookies por dominio y 300 en total en el navegador.</p> <p>En PHP, para crear una cookie se utiliza la funci\u00f3n <code>setcookie</code>:</p> <pre><code>&lt;?php\nsetcookie(nombre [, valor [, expira [, ruta [, dominio [, seguro [, httponly ]]]]]]);\nsetcookie(nombre [, valor = \"\" [, opciones = [] ]] )\n?&gt;\n</code></pre> <p>Destacar que el nombre no puede contener espacios ni el caracter <code>;</code>. Respecto al contenido de la cookie, no puede superar los 4 KB.</p> <p>Por ejemplo, mediante cookies podemos comprobar la cantidad de visitas diferentes que realiza un usuario:</p> <pre><code>&lt;?php\n$accesosPagina\u00a0=\u00a00;\nif\u00a0(isset($_COOKIE['accesos']))\u00a0{\u00a0\n    $accesosPagina\u00a0=\u00a0$_COOKIE['accesos']; // recuperamos una cookie\n    setcookie('accesos',\u00a0++$accesosPagina); // le asignamos un valor\n}\n?&gt;\n</code></pre> <p>Inspeccionando las cookies</p> <p>Si queremos ver que contienen las cookies que tenemos almacenadas en el navegador, se puede comprobar su valor en Dev Tools \u2192 Application \u2192 Storage</p> <p>El tiempo de vida de las cookies puede ser tan largo como el sitio web en el que residen. Ellas seguir\u00e1n ah\u00ed, incluso si el navegador est\u00e1 cerrado o abierto.</p> <p>Para borrar una cookie se puede poner que expiren en el pasado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0\"\",\u00a01) // pasado\n</code></pre> <p>O que caduquen dentro de un periodo de tiempo deteminado:</p> <pre><code>&lt;?php\nsetcookie(nombre,\u00a0valor,\u00a0time() + 3600) // Caducan dentro de una hora\n</code></pre> Comunicaci\u00f3n con cookies <p>Se utilizan para:</p> <ul> <li>Recordar los inicios de sesi\u00f3n</li> <li>Almacenar valores temporales de usuario</li> <li>Si un usuario est\u00e1 navegando por una lista paginada de art\u00edculos, ordenados de cierta manera, podemos almacenar el ajuste de la clasificaci\u00f3n.</li> </ul> <p>La alternativa en el cliente para almacenar informaci\u00f3n en el navegador es el objeto LocalStorage.</p>"},{"location":"04web.html#sesion","title":"Sesi\u00f3n","text":"<p>La sesi\u00f3n a\u00f1ade la gesti\u00f3n del estado a HTTP, almacenando en este caso la informaci\u00f3n en el servidor. Cada visitante tiene un ID de sesi\u00f3n \u00fanico, el cual por defecto se almacena en una cookie denominada <code>PHPSESSID</code>. Si el cliente no tiene las cookies activas, el ID se propaga en cada URL dentro del mismo dominio. Cada sesi\u00f3n tiene asociado un almac\u00e9n de datos mediante el array global <code>$_SESSION</code>, en el cual podemos almacenar y recuperar informaci\u00f3n.</p> <p>La sesi\u00f3n comienza al ejecutar un script PHP. Se genera un nuevo ID y se cargan los datos del almac\u00e9n:</p> Comunicaci\u00f3n con sesi\u00f3n <p>Las operaciones que podemos realizar con la sesi\u00f3n son:</p> <pre><code>&lt;?php\nsession_start(); // carga la sesi\u00f3n\nsession_id() // devuelve el id\n$_SESSION[clave] = valor; // inserci\u00f3n\nsession_destroy(); // destruye la sesi\u00f3n\nunset($_SESSION[clave]; // borrado\n</code></pre> <p>Vamos a ver mediante un ejemplo como podemos insertar en un p\u00e1gina datos en la sesi\u00f3n para posteriormente en otra p\u00e1gina acceder a esos datos. Por ejemplo, en <code>sesion1.php</code> tendr\u00edamos</p> <pre><code>&lt;?php\nsession_start();\u00a0//\u00a0inicializamos\n$_SESSION[\"ies\"]\u00a0=\u00a0\"IES\u00a0Severo\u00a0Ochoa\";\u00a0//\u00a0asignaci\u00f3n\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Estamos\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n&lt;br\u00a0/&gt;\n&lt;a\u00a0href=\"sesion2.php\"&gt;Y\u00a0luego&lt;/a&gt;\n</code></pre> <p>Y posteriormente podemos acceder a la sesi\u00f3n en <code>sesion2.php</code>:</p> <pre><code>&lt;?php\nsession_start();\n$instituto\u00a0=\u00a0$_SESSION[\"ies\"];\u00a0//\u00a0recuperaci\u00f3n\necho\u00a0\"Otra\u00a0vez,\u00a0en\u00a0el\u00a0$instituto\u00a0\";\n?&gt;\n</code></pre> <p>Configurando la sesi\u00f3n en <code>php.ini</code></p> <p>Las siguiente propiedades de <code>php.ini</code> permiten configurar algunos aspectos de la sesi\u00f3n:</p> <ul> <li><code>session.save_handler</code>: controlador que gestiona c\u00f3mo se almacena (<code>files</code>)</li> <li><code>session.save_path</code>: ruta donde se almacenan los archivos con los datos (si tenemos un cluster, podr\u00edamos usar <code>/mnt/sessions</code> en todos los servidor de manera que apuntan a una carpeta compartida)</li> <li><code>session.name</code>: nombre de la sesi\u00f3n (<code>PHSESSID</code>)</li> <li><code>session.auto_start</code>: Se puede hacer que se autocargue con cada script. Por defecto est\u00e1 deshabilitado</li> <li><code>session.cookie_lifetime</code>: tiempo de vida por defecto</li> </ul> <p>M\u00e1s informaci\u00f3n en la documentaci\u00f3n oficial.</p>"},{"location":"04web.html#autentificacion-de-usuarios","title":"Autentificaci\u00f3n de usuarios","text":"<p>Una sesi\u00f3n establece una relaci\u00f3n an\u00f3nima con un usuario particular, de manera que podemos saber si es el mismo usuario entre dos peticiones distintas. Si preparamos un sistema de login, podremos saber quien utiliza nuestra aplicaci\u00f3n.</p> <p>Para ello, preparemos un sencillo sistema de autenticaci\u00f3n:</p> <ul> <li>Mostrar el formulario login/password</li> <li>Comprobar los datos enviados</li> <li>A\u00f1adir el login a la sesi\u00f3n</li> <li>Comprobar el login en la sesi\u00f3n para realizar tareas espec\u00edficas del usuario</li> <li>Eliminar el login de la sesi\u00f3n cuando el usuario la cierra.</li> </ul> <p>Vamos a ver en c\u00f3digo cada paso del proceso. Comenzamos con el archivo <code>index.php</code>:</p> <pre><code>&lt;form action='login.php' method='post'&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login&lt;/legend&gt;\n    &lt;div&gt;&lt;span class='error'&gt;&lt;?php echo $error; ?&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='usuario'&gt;Usuario:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='text' name='inputUsuario' id='usuario' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;label for='password'&gt;Contrase\u00f1a:&lt;/label&gt;&lt;br /&gt;\n        &lt;input type='password' name='inputPassword' id='password' maxlength=\"50\" /&gt;&lt;br /&gt;\n    &lt;/div&gt;\n    &lt;div class='fila'&gt;\n        &lt;input type='submit' name='enviar' value='Enviar' /&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n  &lt;/form&gt;\n</code></pre> <p>Al hacer submit nos lleva a <code>login.php</code>, el cual hace de controlador:</p> <pre><code>&lt;?php\n// Comprobamos si ya se ha enviado el formulario\nif (isset($_POST['enviar'])) {\n    $usuario = $_POST['inputUsuario'];\n    $password = $_POST['inputPassword'];\n\n    // validamos que recibimos ambos par\u00e1metros\n    if (empty($usuario) || empty($password)) {\n        $error = \"Debes introducir un usuario y contrase\u00f1a\";\n        include \"index.php\";\n    } else {\n        if ($usuario == \"admin\" &amp;&amp; $password == \"admin\") {\n            // almacenamos el usuario en la sesi\u00f3n\n            session_start();\n            $_SESSION['usuario'] = $usuario;\n            // cargamos la p\u00e1gina principal\n            include \"main.php\";\n        } else {\n            // Si las credenciales no son v\u00e1lidas, se vuelven a pedir\n            $error = \"Usuario o contrase\u00f1a no v\u00e1lidos!\";\n            include \"index.php\";\n        }\n    }\n}\n</code></pre> <p>Dependiendo del usuario que se haya logueado, vamos a ir a una vista o a otra. Por ejemplo, en <code>main.php</code> tendr\u00edamos:</p> <pre><code>&lt;?php\n    // Recuperamos la informaci\u00f3n de la sesi\u00f3n\n    if(!isset($_SESSION)) {\n        session_start();\n    }\n\n    // Y comprobamos que el usuario se haya autentificado\n    if (!isset($_SESSION['usuario'])) {\n       die(\"Error - debe &lt;a href='index.php'&gt;identificarse&lt;/a&gt;.&lt;br /&gt;\");\n    }\n?&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Listado de productos&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido &lt;?= $_SESSION['usuario'] ?&gt;&lt;/h1&gt;\n    &lt;p&gt;Pulse &lt;a href=\"logout.php\"&gt;aqu\u00ed&lt;/a&gt; para salir&lt;/p&gt;\n    &lt;p&gt;Volver al &lt;a href=\"main.php\"&gt;inicio&lt;/a&gt;&lt;/p&gt;\n    &lt;h2&gt;Listado de productos&lt;/h2&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Producto 1&lt;/li&gt;\n        &lt;li&gt;Producto 2&lt;/li&gt;\n        &lt;li&gt;Producto 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Finalmente, necesitamos la opci\u00f3n de cerrar la sesi\u00f3n que colocamos en <code>logout.php</code>:</p> <pre><code>&lt;?php\n// Recuperamos la informaci\u00f3n de la sesi\u00f3n\nsession_start();\n\n// Y la destruimos\nsession_destroy();\nheader(\"Location: index.php\");\n?&gt;\n</code></pre> <p>Autenticaci\u00f3n en producci\u00f3n</p> <p>En la actualidad la autenticaci\u00f3n de usuario no se realiza gestionando la sesi\u00f3n direcamente, sino que se realiza mediante alg\u00fan framekwork que abstrae todo el proceso o la integraci\u00f3n de mecanismos de autenticaci\u00f3n tipo OAuth, como  estudiaremos en la \u00faltima unidad mediante Laravel.</p>"},{"location":"04web.html#referencias","title":"Referencias","text":"<ul> <li>Cookies en PHP</li> <li>Manejo de sesiones en PHP</li> </ul>"},{"location":"05herramientas.html","title":"Herramientas","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 16 sesiones</p> Resultado de aprendizaje Criterios de evaluaci\u00f3n 4.- Desarrolla aplicaciones Web embebidas en lenguajes de marcas analizando e incorporando funcionalidades seg\u00fan especificaciones. g) Se han utilizado herramientas y entornos para facilitar la programaci\u00f3n, prueba y depuraci\u00f3n del c\u00f3digo. <p>En esta unidad vamos a estudiar algunas de las herramientas m\u00e1s utilizadas en PHP.</p>"},{"location":"05herramientas.html#composer","title":"Composer","text":"Logo Composer <p>Herramienta por excelencia en PHP para la gesti\u00f3n de librer\u00edas y dependencias, de manera que instala y las actualiza asegurando que todo el equipo de desarrollo tiene el mismo entorno y versiones. Adem\u00e1s, ofrece autoloading de nuestro c\u00f3digo, de manera que no tengamos que hacerlo nosotros \"a mano\".</p> <p>Est\u00e1 escrito en PHP, y pod\u00e9is consultar toda su documentaci\u00f3n en https://getcomposer.org/.</p> <p>Utiliza Packagist como repositorio de librer\u00edas.</p> <p>Funcionalmente, es similar a Maven (Java) / npm (JS).</p>"},{"location":"05herramientas.html#instalacion","title":"Instalaci\u00f3n","text":"<ul> <li> <p>Si estamos usando XAMPP, hemos de instalar Composer en el propio sistema operativo. Se recomienda seguir las instrucciones oficiales seg\u00fan el sistema operativo a emplear.</p> </li> <li> <p>si usamos Docker, necesitamos modificar la configuraci\u00f3n de nuestro contenedor. En nuestro caso, hemos decidido modificar el archivo <code>Dockerfile</code> y a\u00f1adir el siguiente comando:</p> <pre><code>COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer\n</code></pre> <p>Es importante que dentro del contenedor comprobemos que tenemos la v2:</p> <pre><code>composer -V\n</code></pre> </li> <li> <p>Si usamos Laravel Herd ya viene instalado por defecto.</p> </li> </ul> <p>Ver cap\u00edtulo: Composer y PSR-4</p> <p>En este cap\u00edtulo del curso \"Crear aplicaci\u00f3n Web\" se explica el concepto de Composer y c\u00f3mo utilizarlo para el autoload de clases.</p>"},{"location":"05herramientas.html#primeros-pasos","title":"Primeros pasos","text":"<p>Cuando creemos un proyecto por primera vez, hemos de inicializar el repositorio. Para ello, ejecutaremos el comando <code>composer init</code> donde:</p> <ul> <li>Configuramos el nombre del paquete, descripci\u00f3n, autor (nombre ), tipo de paquete (project), etc... <li>Definimos las dependencias del proyecto (<code>require</code>) y las de desarrollo (<code>require-dev</code>) de manera interactiva.<ul> <li>En las de desarrollo se indica aquellas que no se instalar\u00e1n en el entorno de producci\u00f3n, por ejemplo, las librer\u00edas de pruebas.</li> </ul> </li> <p>Tras su configuraci\u00f3n, se crear\u00e1 autom\u00e1ticamente el archivo <code>composer.json</code> con los datos introducidos y descarga las librer\u00edas en la carpeta <code>vendor</code>. La instalaci\u00f3n de las librer\u00edas siempre se realiza de manera local para cada proyecto.</p> <pre><code>{\n    \"name\": \"dwes/log\",\n    \"description\": \"Pruebas con Monolog\",\n    \"type\": \"project\",\n    \"require\": {\n        \"monolog/monolog\": \"^2.1\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Aitor Medrano\",\n            \"email\": \"a.medrano@edu.gva.es\"\n        }\n    ]\n}\n</code></pre> <p>A la hora de indicar cada librer\u00eda introduciremos:</p> <ul> <li>el nombre de la librer\u00eda, compuesta tanto por el creador o \"vendor\", como por el nombre del proyecto. Ejemplos: <code>monolog/monolog</code> o <code>laravel/installer</code>.</li> <li> <p>la versi\u00f3n de cada librer\u00eda. Tenemos diversas opciones para indicarla:</p> <ul> <li>Directamente: 1.4.2</li> <li>Con comodines: 1.*</li> <li>A partir de: &gt;= 2.0.3</li> <li>Sin rotura de cambios: ^1.3.2 // &gt;=1.3.2 &lt;2.0.0</li> </ul> </li> </ul>"},{"location":"05herramientas.html#actualizar-librerias","title":"Actualizar librer\u00edas","text":"<p>Podemos definir las dependencias via el archivo <code>composer.json</code> o mediante comandos con el formato <code>composer require vendor/package:version</code>. Por ejemplo, si queremos a\u00f1adir phpUnit como librer\u00eda de desarrollo, haremos:</p> <pre><code>composer require phpunit/phpunit \u2013dev\n</code></pre> <p>Tras a\u00f1adir nuevas librer\u00edas, hemos de actualizar nuestro proyecto:</p> <pre><code>composer update\n</code></pre> <p>Si creamos el archivo <code>composer.json</code> nosotros directamente sin inicializar el repositorio, hemos de instalar las dependencias:</p> <pre><code>composer install\n</code></pre> <p>Al hacer este paso (tanto instalar como actualizar), como ya hemos comentado, se descargan las librer\u00edas en dentro de la carpeta <code>vendor</code>. Es muy importante a\u00f1adir esta carpeta al archivo <code>.gitignore</code> para no subirlas a GitHub.</p> <p>Adem\u00e1s se crea el archivo <code>composer.lock</code>, que almacena la versi\u00f3n exacta que se ha instalado de cada librer\u00eda (este archivo no se toca).</p>"},{"location":"05herramientas.html#autoloadphp","title":"<code>autoload.php</code>","text":"<p>Composer crea de forma autom\u00e1tica en <code>vendor/autoload.php</code> el c\u00f3digo para incluir de forma autom\u00e1tica todas las librer\u00edas que tengamos configuradas en <code>composer.json</code>.</p> <p>Para utilizarlo, en la cabecera de nuestro archivos pondremos:</p> <pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n</code></pre> <p>En nuestro caso, de momento s\u00f3lo lo podremos en los archivos donde probamos las clases</p> <p>Si queremos que Composer tambi\u00e9n se encargue de cargar de forma autom\u00e1tica nuestras clases de dominio, dentro del archivo <code>composer.json</code>, definiremos la propiedad <code>autoload</code>:</p> <pre><code>\"autoload\": {\n    \"psr-4\": {\"Dwes\\\\\": \"app/Dwes\"}\n},\n</code></pre> <p>Posteriormente, hemos de volver a generar el autoload de Composer mediante la opci\u00f3n <code>dump-autoload</code> (o <code>du</code>):</p> <pre><code>composer dump-autoload\n</code></pre>"},{"location":"05herramientas.html#monolog","title":"Monolog","text":"<p>Vamos a probar Composer a\u00f1adiendo la librer\u00eda de Monolog a nuestro proyecto. Se trata de un librer\u00eda para la gesti\u00f3n de logs de nuestras aplicaciones, soportando diferentes niveles (info, warning, etc...), salidas (ficheros, sockets, BBDD, Web Services, email, etc) y formatos (texto plano, HTML, JSON, etc...).</p> <p>Para ello, incluiremos la librer\u00eda en nuestro proyecto con:</p> <pre><code>composer require monolog/monolog\n</code></pre> <p>Monolog 2 requiere al menos PHP 7.2, cumple con el estandar de logging PSR-3, y es la librer\u00eda empleada por Laravel y Symfony para la gesti\u00f3n de logs.</p> <p>Cuando usar un log</p> <ul> <li>Seguir las acciones/movimientos de los usuarios</li> <li>Registrar las transacciones</li> <li>Rastrear los errores de usuario</li> <li>Fallos/avisos a nivel de sistema</li> <li>Interpretar y coleccionar datos para posterior investigaci\u00f3n de patrones</li> </ul>"},{"location":"05herramientas.html#niveles","title":"Niveles","text":"<p>A continuaci\u00f3n mostramos los diferentes niveles de menos a m\u00e1s restrictivo:</p> <ul> <li>debug -100: Informaci\u00f3n detallada con prop\u00f3sitos de debug. No usar en entornos de producci\u00f3n.</li> <li>info - 200: Eventos interesantes como el inicio de sesi\u00f3n de usuarios.</li> <li>notice - 250: Eventos normales pero significativos.</li> <li>warning - 300: Ocurrencias excepcionales que no llegan a ser error.</li> <li>error - 400: Errores de ejecuci\u00f3n que permiten continuar con la ejecuci\u00f3n de la aplicaci\u00f3n pero que deben ser monitorizados.</li> <li>critical - 500: Situaciones importantes donde se generan excepciones no esperadas o no hay disponible un componente.</li> <li>alert - 550: Se deben tomar medidas inmediatamente. Ca\u00edda completa de la web, base de datos no disponible, etc... Adem\u00e1s, se suelen enviar mensajes por email.</li> <li>emergency - 600: Es el error m\u00e1s grave e indica que todo el sistema est\u00e1 inutilizable.</li> </ul>"},{"location":"05herramientas.html#hola-monolog","title":"Hola Monolog","text":"<p>Por ejemplo, en el archivo <code>pruebaLog.php</code> que colocar\u00edamos en el ra\u00edz, primero incluimos el autoload, importamos las clases a utilizar para finalmente usar los m\u00e9todos de Monolog:</p> <pre><code>&lt;?php\ninclude __DIR__ .\"/vendor/autoload.php\";\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n$log = new Logger(\"MiLogger\");\n$log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\");\n$log-&gt;info(\"Esto es un mensaje de INFO\");\n$log-&gt;warning(\"Esto es un mensaje de WARNING\");\n$log-&gt;error(\"Esto es un mensaje de ERROR\");\n$log-&gt;critical(\"Esto es un mensaje de CRITICAL\");\n$log-&gt;alert(\"Esto es un mensaje de ALERT\");\n</code></pre> <p>En todos los m\u00e9todos de registro de mensajes (<code>debug</code>, <code>info</code>, ...), adem\u00e1s del propio mensaje, le podemos pasar informaci\u00f3n como el contenido de alguna variable, usuario de la aplicaci\u00f3n, etc.. como segundo par\u00e1metro dentro de un array, el cual se conoce como array de contexto. Es conveniente hacerlo mediante un array asociativo para facilitar la lectura del log.</p> <pre><code>&lt;?php\n$log-&gt;warning(\"Producto no encontrado\", [$producto]);\n$log-&gt;warning(\"Producto no encontrado\", [\"datos\" =&gt; $producto]);\n</code></pre>"},{"location":"05herramientas.html#funcionamiento","title":"Funcionamiento","text":"<p>Cada instancia <code>Logger</code> tiene un nombre de canal y una pila de manejadores (handler). Cada mensaje que mandamos al log atraviesa la pila de manejadores, y cada uno decide si debe registrar la informaci\u00f3n, y si se da el caso, finalizar la propagaci\u00f3n. Por ejemplo, un <code>StreamHandler</code> en el fondo de la pila que lo escriba todo en disco, y en el tope a\u00f1ade un <code>MailHandler</code> que env\u00ede un mail s\u00f3lo cuando haya un error.</p>"},{"location":"05herramientas.html#manejadores","title":"Manejadores","text":"<p>Cada manejador tambien tiene un formateador (<code>Formatter</code>). Si no se indica ninguno, se le asigna uno por defecto. El \u00faltimo manejador insertado ser\u00e1 el primero en ejecutarse. Luego se van ejecutando conforme a la pila.</p> <p>Los manejadores m\u00e1s utilizados son:</p> <ul> <li><code>StreamHandler(ruta, nivel)</code></li> <li><code>RotatingFileHandler(ruta, maxFiles, nivel)</code></li> <li><code>NativeMailerHandler(para, asunto, desde, nivel)</code></li> <li><code>FirePHPHandler(nivel)</code></li> </ul> <p>Si queremos que los mensajes de la aplicaci\u00f3n salgan por el log del servidor,  en nuestro caso el archivo <code>error.log</code> de Apache utilizaremos como ruta la salida de error:</p> <pre><code>&lt;?php\n// error.log\n$log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::DEBUG));\n//Consola\n$log-&gt;pushHandler(new StreamHandler(\"php://stdout\", Logger::DEBUG));\n</code></pre> <p>FirePHP</p> <p>Por ejemplo, mediante <code>FirePHPHandler</code>, podemos utilizar <code>FirePHP</code>, la cual es una herramienta para hacer debug en la consola de Firefox. Tras instalar la extensi\u00f3n en Firefox, habilitar las opciones y configurar el Handler, podemos ver los mensajes coloreados con sus datos:</p> <pre><code>&lt;?php\n$log = new Logger(\"MiFirePHPLogger\");\n$log-&gt;pushHandler(new FirePHPHandler(Logger::INFO));\n\n$datos = [\"real\" =&gt; \"Bruce Wayne\", \"personaje\" =&gt; \"Batman\"];\n$log-&gt;debug(\"Esto es un mensaje de DEBUG\", $datos);\n$log-&gt;info(\"Esto es un mensaje de INFO\", $datos);\n$log-&gt;warning(\"Esto es un mensaje de WARNING\", $datos);\n// ...\n</code></pre> <p> Ejemplo de uso de FirePHP </p>"},{"location":"05herramientas.html#canales","title":"Canales","text":"<p>Se les asigna al crear el <code>Logger</code>. En grandes aplicaciones, se crea un canal por cada subsistema: ventas, contabilidad, almac\u00e9n. No es una buena pr\u00e1ctica usar el nombre de la clase como canal, esto se hace con un procesador.</p> <p>Para su uso, es recomiendo asignar el log a una propiedad privada a Logger, y posteriormente, en el constructor de la clase, asignar el canal, manejadores y formato.</p> <pre><code>&lt;?php\n$this-&gt;log = new Logger(\"MiApp\");\n$this-&gt;log-&gt;pushHandler(new StreamHandler(\"logs/milog.log\", Logger::DEBUG));\n$this-&gt;log-&gt;pushHandler(new FirePHPHandler(Logger::DEBUG));\n</code></pre> <p>Y dentro de los m\u00e9todos para escribir en el log:</p> <pre><code>&lt;?php\n$this-&gt;log-&gt;warning(\"Producto no encontrado\", [$producto]);\n</code></pre>"},{"location":"05herramientas.html#procesadores","title":"Procesadores","text":"<p>Los procesadores permiten a\u00f1adir informaci\u00f3n a los mensajes. Para ello, se apilan despu\u00e9s de cada manejador mediante el m\u00e9todo <code>pushProcessor($procesador)</code>.</p> <p>Algunos procesadores conocidos son <code>IntrospectionProcessor</code> (muestran la linea, fichero, clase y metodo desde el que se invoca el log), <code>WebProcessor</code> (a\u00f1ade la URI, m\u00e9todo e IP) o <code>GitProcessor</code> (a\u00f1ade la rama y el commit).</p> PHPConsola en formato texto <pre><code>&lt;?php\n$log = new Logger(\"MiLogger\");\n$log-&gt;pushHandler(new RotatingFileHandler(\"logs/milog.log\", 0, Logger::DEBUG));\n$log-&gt;pushProcessor(new IntrospectionProcessor());\n$log-&gt;pushHandler(new StreamHandler(\"php://stderr\", Logger::WARNING));\n// no usa Introspection pq lo hemos apilado despu\u00e9s, le asigno otro\n$log-&gt;pushProcessor(new WebProcessor());\n</code></pre> <pre><code>[2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":12,\"class\":null,\"function\":null}\n[2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {\"file\":\"C:\\\\xampp\\\\htdocs\\\\log\\\\procesador.php\",\"line\":13,\"class\":null,\"function\":null}\n</code></pre>"},{"location":"05herramientas.html#formateadores","title":"Formateadores","text":"<p>Se asocian a los manejadores con <code>setFormatter</code>. Los formateadores m\u00e1s utilizados son <code>LineFormatter</code>, <code>HtmlFormatter</code> o <code>JsonFormatter</code>.</p> PHPConsola en JSON <pre><code>&lt;?php\n$log = new Logger(\"MiLogger\");\n$rfh = new RotatingFileHandler(\"logs/milog.log\", Logger::DEBUG);\n$rfh-&gt;setFormatter(new JsonFormatter());\n$log-&gt;pushHandler($rfh);\n</code></pre> <pre><code>{\"message\":\"Esto es un mensaje de DEBUG\",\"context\":{},\"level\":100,\"level_name\":\"DEBUG\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747211+01:00\",\"extra\":{}}\n{\"message\":\"Esto es un mensaje de INFO\",\"context\":{},\"level\":200,\"level_name\":\"INFO\",\"channel\":\"MiLogger\",\"datetime\":\"2020-11-27T15:36:52.747538+01:00\",\"extra\":{}}\n</code></pre> <p>M\u00e1s informaci\u00f3n</p> <p>M\u00e1s informaci\u00f3n sobre manejadores, formateadores y procesadores en https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md</p>"},{"location":"05herramientas.html#uso-de-factorias","title":"Uso de Factor\u00edas","text":"<p>En vez de instanciar un log en cada clase, es conveniente crear una factor\u00eda (por ejemplo, siguiendo la idea del patr\u00f3n de dise\u00f1o Factory Method).</p> <p>Para el siguiente ejemplo, vamos a suponer que creamos la factor\u00eda en el namespace <code>Dwes\\Ejemplos\\Util</code>.</p> <pre><code>&lt;?php\nnamespace Dwes\\Ejemplos\\Util\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\nclass LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : Logger {\n        $log = new Logger($canal);\n        $log-&gt;pushHandler(new StreamHandler(\"logs/miApp.log\", Logger::DEBUG));\n\n        return $log;\n    }\n}\n</code></pre> <p>Si en vez de devolver un <code>Monolog\\Logger</code> utilizamos el interfaz de PSR, si en el futuro cambiamos la implementaci\u00f3n del log, no tendremos que modificar nuestro codigo. As\u00ed pues, la factor\u00eda ahora devolver\u00e1 <code>Psr\\Log\\LoggerInterface</code>:</p> <pre><code>&lt;?php\nnamespace Dwes\\Ejemplos\\Util\n\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Logger;\nuse Psr\\Log\\LoggerInterface;\n\nclass LogFactory {\n\n    public static function getLogger(string $canal = \"miApp\") : LoggerInterface {\n        $log = new Logger($canal);\n        $log-&gt;pushHandler(new StreamHandler(__DIR__ . \"/log/miApp.log\", Logger::DEBUG));\n\n        return $log;\n    }\n}\n</code></pre> <p>Finalmente, para utilizar la factor\u00eda, s\u00f3lo cambiamos el c\u00f3digo que ten\u00edamos en el constructor de las clases que usan el log, quedando algo asi:</p> <pre><code>&lt;?php\n\nnamespace Dwes\\Ejemplos\\Model;\n\nuse Dwes\\Ejemplos\\Util\\LogFactory;\nuse Monolog\\Logger;\n\nclass Cliente {\n\n    private $codigo; \n\n    private Logger $log;\n\n    function __construct($codigo){ \n        $this-&gt;codigo=$codigo; \n\n        $this-&gt;log = LogFactory::getLogger();\n    }\n\n    /// ... resto del c\u00f3digo\n}\n</code></pre> <p>Rotando ficheros de log</p> <p>El principal problema con logging en un archivo es que, con el tiempo, el archivo puede volverse demasiado grande y complicado de administrar, adem\u00e1s de ocupar una gran cantidad de almacenamiento. Este problema se resuelve tradicionalmente mediante la rotaci\u00f3n de archivos.</p> <p>Monolog tambi\u00e9n ofrece una soluci\u00f3n integrada para rotar registros, aunque no est\u00e1 pensada para su uso en entornos de producci\u00f3n. </p> <p>En el siguiente ejemplo, se ha utilizado un <code>RotatingFileHandler</code> que rotar\u00e1 el archivo de log si el fichero es m\u00e1s antiguo de 30 d\u00edas. Tambi\u00e9n es posible especificar otros criterios de rotaci\u00f3n, para ello consulta la documentaci\u00f3n de Monolog.</p> <pre><code>&lt;?php\n\n. . .\nuse Monolog\\Handler\\RotatingFileHandler;\n\n$rotating_handler = new RotatingFileHandler(__DIR__ . \"/log/debug.log\", 30, Level::Debug);\n$logger-&gt;pushHandler($rotating_handler);\n\n$logger-&gt;info(\"This file has been executed.\");\n?&gt;\n</code></pre> <p>Captura y logando excepciones</p> <p>En PHP las excepciones son controladoras por <code>try, catch, finally</code>. Si queremos logar una excepci\u00f3n, podemos hacerlo de la siguiente manera:</p> <pre><code>$logger = new Logger(\"exceptions\");\n\n$stream_handler = new StreamHandler(__DIR__ . \"/log/exception.log\", Level::Debug);\n$stream_handler-&gt;setFormatter(new JsonFormatter());\n\n$logger-&gt;pushHandler($stream_handler);\n\ntry {\n    $username = readline(\"Choose your username: \");\n    if (strlen($username) &lt; 6) {\n        throw new Exception(\"The username $username is too short.\");\n    }\n} catch (exception $e) {\n    // Log el mensaje de la excepci\u00f3n\n    $logger-&gt;error($e-&gt;getMessage());\n    //Si queremos logar todo el objeto de la excepci\u00f3n\n    $logger-&gt;error($e);\n    //Tambi\u00e9n es posible combinar las 2 opciones, logar el mensaje y el objeto de la excepci\u00f3n.\n    // array('exception' =&gt; $e) es un contexto adicional que se a\u00f1ade al log.\n    $logger-&gt;error($e-&gt;getMessage(), array('exception' =&gt; $e));\n}\n</code></pre> <p>Tratando con excepciones no capturadas</p> <p>Si una excepci\u00f3n no es capturada por un bloque <code>try, catch</code>, la excepci\u00f3n \"burbujear\u00e1\" hasta el script principal y si no existe un <code>block</code> en este nivel, PHP terminar\u00e1 la ejecuci\u00f3n del script inmediatamente con un error \"Fatal\".</p> <p>Podemos manejar este tipo de errores utilizando una funci\u00f3n an\u00f3nima y el m\u00e9todo <code>set_exception_handler</code> de PHP. <pre><code>&lt;?php\n...\n\nset_exception_handler(function($ex) {\n  $log-&gt;error(\"Fatal error ocurred: \" . $ex-&gt;getMessage(), array('exception' =&gt; $ex));\n})\n</code></pre></p> <p>Enviar logs a m\u00faltiples destinos</p> <p>Monolog permite enviar logs a m\u00faltiples destinos, normalmente a trav\u00e9s del tipo de severidad, podemos indicar un destino u otro. En el siguiente ejemplo, se env\u00edan los logs de nivel <code>DEBUG</code> a un fichero, los de nivel <code>NOTICE</code> a otro fichero y los de nivel <code>ALERT</code> a una base de datos.</p> <pre><code>&lt;?php\n\nrequire __DIR__ . \"/vendor/autoload.php\";\nrequire \"./DBHandler.php\";\n\nuse Monolog\\Level;\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\JsonFormatter;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Handler\\RotatingFileHandler;\n\n// New Logger instance\n$logger = new Logger(\"my_logger\");\n$formatter = new JsonFormatter();\n\n// Create new handler\n$rotating_handler = new RotatingFileHandler(__DIR__ . \"/log/debug.log\", 30, Level::Debug);\n$stream_handler = new StreamHandler(__DIR__ . \"/log/notice.log\", Level::Notice);\n$db_handler = new DBHandler(new PDO('sqlite:alert.sqlite'), Level::Alert);\n\n$stream_handler-&gt;setFormatter($formatter);\n$db_handler-&gt;setFormatter($formatter);\n$rotating_handler-&gt;setFormatter($formatter);\n\n// Push the handler to the log channel\n$logger-&gt;pushHandler($stream_handler);\n$logger-&gt;pushHandler($rotating_handler);\n$logger-&gt;pushHandler($db_handler);\n\n// Log the message\n$logger-&gt;info(\"This file has been executed.\");\n$logger-&gt;error(\"An error occurred.\");\n$logger-&gt;critical(\"This application is in critical condition!!\");\n$logger-&gt;emergency(\"This is an EMERGENCY!!!\");\n?&gt;\n</code></pre> <p>Aunque esta aproximaci\u00f3n est\u00e1 bien, en un sistema medianamente complejo puede ser muy complicado tener que monitorizar tantos lugares. En estos casos, es recomendable utilizar un sistema de monitorizaci\u00f3n de logs, como BetterStack, Loggly, Papertrail o Logstash.</p> <p>En este ejemplo, vamos a utilizar la plataforma BetterStack para enviar los logs de nuestra aplicaci\u00f3n. Para ello, sigue los siguientes pasos:</p> <ol> <li> <p>Instalar la librer\u00eda cliente de BetterStack en tu proyecto:</p> <pre><code>composer require logtail/monolog-logtail\n</code></pre> </li> <li> <p>Configurar el logger de Monolog con BetterStack.</p> <pre><code>use Monolog\\Logger;\nuse Logtail\\Monolog\\LogtailHandlerBuilder;\n\n$logger = new Logger(\"example-app\");\n//Reempalzar $SOURCE_TOKEN por el token de tu proyecto en BetterStack\n$handler = LogtailHandlerBuilder::withSourceToken(\"$SOURCE_TOKEN\")\n-&gt;build();\n$logger-&gt;pushHandler($handler);\n</code></pre> </li> <li> <p>Utilizar el logger de Monolog como de costumbre.</p> <pre><code>$logger-&gt;info(\"This file has been executed.\");\n$logger-&gt;error(\"An error occurred.\");\n$logger-&gt;critical(\"This application is in critical condition!!\");\n$logger-&gt;emergency(\"This is an EMERGENCY!!!\");\n</code></pre> </li> </ol> <p>Para obtener un <code>token</code> de BetterStack, simplemente registrar una cuenta (tienen un plan gratuito) y obteneer un token para tu proyecto desde el siguiente enlace.</p> <p>Ver cap\u00edtulo: Configurando un logger con Monolog</p> <p>En este cap\u00edtulo del curso \"Crear aplicaci\u00f3n Web\" vemos como configurar un logger en nuestra aplicaci\u00f3n y como enviar los logs a un servidor de logs.</p>"},{"location":"05herramientas.html#documentacion-con-phpdocumentor","title":"Documentaci\u00f3n con phpDocumentor","text":"<p>phpDocumentor es la herramienta de facto para documentar el c\u00f3digo PHP. Es similar en prop\u00f3sito y funcionamiento a Javadoc.</p> <p>As\u00ed pues, es un herramienta que facilita la documentaci\u00f3n del c\u00f3digo PHP, creando un sitio web con el API de la aplicaci\u00f3n.</p> <p>Se basa en el uso de anotaciones sobre los docblocks. Para ponerlo en marcha, en nuestro caso nos decantaremos por utilizar la imagen que ya existe de Docker.</p>"},{"location":"05herramientas.html#instalacion-como-binario","title":"Instalaci\u00f3n como binario","text":"<p>Otra opci\u00f3n es seguir los pasos que recomienda la documentaci\u00f3n oficial para instalarlo como un ejecutable, que son descargar el archivo <code>phpDocumentor.phar</code> y darles permisos de ejecuci\u00f3n:</p> <pre><code>wget https://phpdoc.org/phpDocumentor.phar\nchmod +x phpDocumentor.phar\nmv phpDocumentor.phar /usr/local/bin/phpdoc\nphpdoc --version\n</code></pre> <p>Una vez instalado, desde el ra\u00edz del proyecto, suponiendo que tenemos nuestro c\u00f3digo dentro de <code>app</code> y que queremos la documentaci\u00f3n dentro de <code>docs/api</code> ejecutamos:</p> <pre><code>phpdoc -d ./app -t docs/api\n</code></pre>"},{"location":"05herramientas.html#uso-en-docker","title":"Uso en Docker","text":"<p>En el caso de usar Docker, usaremos el siguiente comando para ejecutarlo (crea el contenedor, ejecuta el comando que le pidamos, y autom\u00e1ticamente lo borra):</p> <pre><code>docker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3\n</code></pre> <p>A dicho comando, le adjuntaremos los diferentes par\u00e1metros que admite phpDocumentor, por ejemplo:</p> <pre><code># Muestra la versi\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 --version\n# Mediante -d se indica el origen a parsear\n# Mediante -t se indica el destino donde generar la documentaci\u00f3n\ndocker run --rm -v \"$(pwd)\":/data phpdoc/phpdoc:3 -d ./src/app -t ./docs/api\n</code></pre>"},{"location":"05herramientas.html#docblock","title":"DocBlock","text":"<p>Un docblock es el bloque de c\u00f3digo que se coloca encima de un recurso. Su formato es:</p> <pre><code>&lt;?php\n/**\n* *Sumario*, una sola l\u00ednea\n*\n* *Descripci\u00f3n* que puede utilizar varias l\u00edneas\n* y que ofrece detalles del elemento o referencias\n* para ampliar la informaci\u00f3n\n*\n* @param string $miArgumento con una *descripci\u00f3n* del argumento\n* que puede usar varias l\u00edneas.\n*\n* @return void\n*/\nfunction miFuncion(tipo $miArgumento)\n{\n}\n</code></pre>"},{"location":"05herramientas.html#documentando-el-codigo","title":"Documentando el c\u00f3digo","text":"<p>En todos los elementos, ademas del sumario y/o descripci\u00f3n, pondremos:</p> <ul> <li>En las clases:<ul> <li><code>@author</code> nombre  <li><code>@package</code> ruta del namespace</li> <li>En las propiedades:<ul> <li><code>@var</code> tipo descripci\u00f3n</li> </ul> </li> <li>En los m\u00e9todos:<ul> <li><code>@param</code> tipo $nombre descripci\u00f3n</li> <li><code>@throws</code> ClaseException descripci\u00f3n</li> <li><code>@return</code> tipo descripci\u00f3n</li> </ul> </li> <p>Ve\u00e1moslo con un ejemplo. Supongamos que tenemos una clase que representa un cliente:</p> <pre><code>&lt;?php\n/**\n* Clase que representa un cliente\n* \n* El cliente se encarga de almacenar los soportes que tiene alquilado,\n* de manera que podemos alquilar y devolver productos mediante las operaciones\n* hom\u00f3nimas.\n* \n* @package Dwes\\Videoclub\\Model\n* @author Aitor Medrano &lt;a.medrano@edu.gva.es&gt;\n*/\nclass Cliente {\n\n    public string $nombre; \n    private string $numero;\n\n    /**\n    * Colecci\u00f3n de soportes alquilados\n    * @var array&lt;Soporte&gt; \n    */\n    private $soportesAlquilados[];\n\n    /**\n    * Comprueba si el soporte recibido ya lo tiene alquilado el cliente\n    * @param Soporte $soporte Soporte a comprobar\n    * @return bool true si lo tiene alquilado\n    */\n    public function tieneAlquilado(Soporte $soporte) : bool { \n        // ...\n    }\n</code></pre> <p>Si generamos la documentaci\u00f3n y abrimos con un navegador el archivo <code>docs/api/index.html</code> podremos navegar hasta la clase `Cliente:</p> phpDocumentor de Cliente"},{"location":"05herramientas.html#pruebas-con-phpunit","title":"Pruebas con PHPUnit","text":"<p>El curso pasado, dentro del m\u00f3dulo de Entornos de Desarrollo, estudiamos la importancia de la realizaci\u00f3n de pruebas, as\u00ed como las pruebas unitarias mediante JUnit.</p> Test Driven Development <p>A d\u00eda de hoy es de gran importancia seguir una buena metodolog\u00eda de pruebas, siendo el desarrollo dirigido por las pruebas (Test Driven Development / TDD) uno de los enfoques m\u00e1s empleados, el cual consiste en:</p> <ol> <li>Escribir el test, y como no hay c\u00f3digo implementado, la prueba falle (rojo).</li> <li>Escribir el c\u00f3digo de aplicaci\u00f3n para que la prueba funcione (verde).</li> <li>Refactorizar el c\u00f3digo de la aplicaci\u00f3n con la ayuda de la prueba para comprobar que no rompemos nada (refactor).</li> </ol> <p>En el caso de PHP, la herramienta que se utiliza es PHPUnit (https://phpunit.de/), que como su nombre indica, est\u00e1 basada en JUnit. </p> <p>Aunque hay una nueva utilidad llamada Pest que est\u00e1 ganando popularidad. Pest es una alternativa a PHPUnit que ofrece una sintaxis m\u00e1s limpia y moderna. Est\u00e1 inspirado en Jest, el popular marco de pruebas de JavaScript.</p> <p>PHPUnit / Pest</p> <ul> <li>documentaci\u00f3n PHPUnit</li> <li>documentaci\u00f3n Pest</li> </ul>"},{"location":"05herramientas.html#puesta-en-marcha","title":"Puesta en marcha","text":"<p>Vamos a colocar todas las pruebas en una carpeta <code>tests</code> en el ra\u00edz de nuestro proyecto.</p> <p>En el archivo <code>composer.json</code>, a\u00f1adimos:</p> <pre><code>\"require-dev\": {\n    \"phpunit/phpunit\": \"^9\"\n},\n\"scripts\": {\n    \"test\": \"phpunit --testdox --colors tests\"\n}\n</code></pre> <p>Si quisi\u00e9ramos a\u00f1adir la librer\u00eda desde un comando del terminal, tambi\u00e9n podr\u00edamos ejecutar:</p> <pre><code>composer require --dev phpunit/phpunit ^9\n</code></pre> <p>Librer\u00edas de desarrollo</p> <p>Las librer\u00edas que se colocan en <code>require-dev</code> son las de desarrollo y testing, de manera que no se instalar\u00e1n en un entorno de producci\u00f3n.</p> <p>Como hemos creado un script, podemos lanzar las pruebas mediante:</p> <pre><code>composer test\n</code></pre> <p>Vasmos a realizar nuestra primera prueba:</p> <pre><code>&lt;?php\nuse PHPUnit\\Framework\\TestCase;\n\nclass PilaTest extends TestCase\n{\n    public function testPushAndPop()\n    {\n        $pila = [];\n        $this-&gt;assertSame(0, count($pila));\n\n        array_push($pila, 'batman');\n        $this-&gt;assertSame('batman', $pila[count($pila)-1]);\n        $this-&gt;assertSame(1, count($pila));\n\n        $this-&gt;assertSame('batman', array_pop($pila));\n        $this-&gt;assertSame(0, count($pila));\n    }\n}\n</code></pre> <p>Tenemos diferentes formas de ejecutar una prueba:</p> <pre><code>./vendor/bin/phpunit tests/PilaTest.php\n./vendor/bin/phpunit tests\n./vendor/bin/phpunit --testdox tests\n./vendor/bin/phpunit --testdox --colors tests\n</code></pre> <p>Trabajando con Pest</p> <p>Revisa el cap\u00edtulo para ver c\u00f3mo se instala Pest</p>"},{"location":"05herramientas.html#disenando-pruebas","title":"Dise\u00f1ando pruebas","text":"<p>Tal como hemos visto en el ejemplo, la clase de prueba debe heredar de <code>TestCase</code>, y el nombre de la clase debe acabar en <code>Test</code>, de ah\u00ed que hayamos llamado la clase de prueba como <code>PilaTest</code>.</p> <p>Una prueba implica un m\u00e9todo de prueba (p\u00fablico) por cada funcionalidad a probar. Cada un de los m\u00e9todos se les asocia un caso de prueba.</p> <p>Los m\u00e9todos deben nombrarse con el prefijo <code>test</code>, por ejemplo, <code>testPushAndPop</code>. Es muy importante que el nombre sea muy claro y descriptivo del prop\u00f3sito de la prueba. (camelCase).</p> <p>En los casos de prueba prepararemos varias aserciones para toda la casu\u00edstica: rangos de valores, tipos de datos, excepciones, etc...</p>"},{"location":"05herramientas.html#aserciones","title":"Aserciones","text":"<p>Las aserciones permiten comprobar el resultado de los m\u00e9todos que queremos probar. Las aserciones esperan que el predicado siempre sea verdadero.</p> <p>PHPUnit ofrece las siguiente aserciones:</p> <ul> <li><code>assertTrue</code> / <code>assertFalse</code>: Comprueba que la condici\u00f3n dada sea evaluada como true / false</li> <li><code>assertEquals</code> / <code>assertSame</code>: Comprueba que dos variables sean iguales</li> <li><code>assertNotEquals</code> / <code>assertNotSame</code>: Comprueba que dos variables NO sean iguales<ul> <li><code>Same</code> \u2192 comprueba los tipos. Si no coinciden los tipos y los valores, la aserci\u00f3n fallar\u00e1</li> <li><code>Equals</code> \u2192 sin comprobaci\u00f3n estricta</li> </ul> </li> <li><code>assertArrayHasKey</code> / <code>assertArrayNotHasKey</code>: Comprueba que un array posea un key determinado / o NO lo posea</li> <li><code>assertArraySubset</code>: Comprueba que un array posea otro array como subset del mismo</li> <li><code>assertAttributeContains</code> / <code>assertAttributeNotContains</code>: Comprueba que un atributo de una clase contenga una variable determinada / o NO contenga una variable determinada</li> <li><code>assertAttributeEquals</code>: Comprueba que un atributo de una clase sea igual a una variable determinada.</li> </ul> <p>Pest ofrece las siguientes aserciones, que son equivalentes a las de PHPUnit:</p> <ul> <li><code>expect()-&gt;toBe(true)</code></li> <li><code>expect()-&gt;toBeFalse()</code></li> <li><code>expect()-&gt;toBeTrue()</code></li> <li><code>expect()-&gt;toBeNull()</code></li> <li><code>expect()-&gt;toBeEmpty()</code></li> <li><code>expect()-&gt;toBeNotEmpty()</code></li> <li><code>expect()-&gt;toBeInstanceOf(Clase::class)</code></li> <li><code>expect()-&gt;toBeArray()</code></li> </ul> <p>para conocer todos los tipos de Expections consulta la documentaci\u00f3n de Pest.</p>"},{"location":"05herramientas.html#comparando-la-salida","title":"Comparando la salida","text":"<p>Si los m\u00e9todos a probar generan contenido mediante <code>echo</code> o una instrucci\u00f3n similar, disponemos de las siguiente expectativas:</p> <ul> <li><code>expectOutputString(salidaEsperada)</code></li> <li><code>expectOutputRegex(expresionRegularEsperada)</code></li> </ul> <p>Las expectativas difieren de las aserciones que informan del resultado que se espera antes de invocar al m\u00e9todo. Tras definir la expectativa, se invoca al m\u00e9todo que realiza el <code>echo</code>/<code>print</code>.</p> <pre><code>&lt;?php\nnamespace Dwes\\Videoclub\\Model;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Dwes\\Videoclub\\Model\\CintaVideo;\n\nclass CintaVideoTest extends TestCase {\n    public function testConstructor()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n        $this-&gt;assertSame( $cinta-&gt;getNumero(), 23);\n    }\n\n    public function testMuestraResumen()\n    {\n        $cinta = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n        $resultado = \"&lt;br&gt;Pel\u00edcula en VHS:\";\n        $resultado .= \"&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 (IVA no incluido)\";\n        $resultado .= \"&lt;br&gt;Duraci\u00f3n: 107 minutos\";\n        // definimos la expectativa\n        $this-&gt;expectOutputString($resultado);\n        // invocamos al m\u00e9todo que har\u00e1 echo\n        $cinta-&gt;muestraResumen();\n    }\n}\n</code></pre>"},{"location":"05herramientas.html#proveedores-de-datos","title":"Proveedores de datos","text":"<p>Cuando tenemos pruebas que solo cambian respecto a los datos de entrada y de salida, es \u00fatil utilizar proveedores de datos.</p> <p>Se declaran en el docblock mediante <code>@dataProvider nombreMetodo</code>, donde se indica el nombre de un m\u00e9todo p\u00fablico que devuelve un array de arrays, donde cada elemento es un caso de prueba.</p> <p>La clase de prueba recibe como par\u00e1metros los datos a probar y el resultado de la prueba como \u00faltimo par\u00e1metro.</p> <p>El siguiente ejemplo comprueba con diferentes datos el funcionamiento de <code>muestraResumen</code>:</p> <pre><code>&lt;?php\n/**\n * @dataProvider cintasProvider\n */\npublic function testMuestraResumenConProvider($titulo, $id, $precio, $duracion, $esperado)\n{\n    $cinta = new CintaVideo($titulo, $id, $precio, $duracion);\n    $this-&gt;expectOutputString($esperado);\n    $cinta-&gt;muestraResumen();\n}\n\npublic function cintasProvider() {\n    return [\n        \"cazafantasmas\" =&gt; [\"Los cazafantasmas\", 23, 3.5, 107, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 \u20ac(IVA no incluido)&lt;br&gt;Duraci\u00f3n: 107 minutos\"],\n        \"superman\" =&gt; [\"Superman\", 24, 3, 188, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Superman&lt;br&gt;3 \u20ac (IVA no incluido)&lt;br&gt;Duraci\u00f3n: 188 minutos\"],\n    ];\n}\n</code></pre> <p>En Pest esto se consigue con el m\u00e9todo <code>with</code>:</p> <pre><code>it('muestra resumen con provider', function($titulo, $id, $precio, $duracion, $esperado) {\n    $cinta = new CintaVideo($titulo, $id, $precio, $duracion);\n    expect($cinta-&gt;muestraResumen())-&gt;toBe($esperado);\n\n})-&gt;with([\n    [\"Los cazafantasmas\", 23, 3.5, 107, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Los cazafantasmas&lt;br&gt;3.5 \u20ac(IVA no incluido)&lt;br&gt;Duraci\u00f3n: 107 minutos\"],\n    [\"Superman\", 24, 3, 188, \"&lt;br&gt;Pel\u00edcula en VHS:&lt;br&gt;Superman&lt;br&gt;3 \u20ac (IVA no incluido)&lt;br&gt;Duraci\u00f3n: 188 minutos\"],\n]);\n</code></pre>"},{"location":"05herramientas.html#probando-excepciones","title":"Probando excepciones","text":"<p>Las pruebas adem\u00e1s de comprobar que las clases funcionan como se espera,  han de cubrir todos los casos posibles. As\u00ed pues, debemos poder hacer pruebas que esperen que se lance una excepci\u00f3n (y que el mensaje contenga cierta informaci\u00f3n):</p> <p>Para ello, se utilizan las siguiente expectativas:</p> <ul> <li><code>expectException(Excepcion::class)</code></li> <li><code>expectExceptionCode(codigoExcepcion)</code></li> <li><code>expectExceptionMessage(mensaje)</code></li> </ul> <p>Del mismo modo que antes, primero se pone la expectativa, y luego se provoca que se lance la excepci\u00f3n:</p> <pre><code>&lt;?php\npublic function testAlquilarCupoLleno() {\n    $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n    $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);\n    $soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\"); \n    $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\"); \n\n    $cliente1 = new Cliente(\"Bruce Wayne\", 23); \n    $cliente1-&gt;alquilar($soporte1); \n    $cliente1-&gt;alquilar($soporte2); \n    $cliente1-&gt;alquilar($soporte3); \n\n    $this-&gt;expectException(CupoSuperadoException::class);\n    $cliente1-&gt;alquilar($soporte4); \n}\n</code></pre> <p>Para Pest, la sintaxis es similar, pero con un estilo m\u00e1s limpio y moderno:</p> <pre><code>it('throws an exception when trying to divide by zero', function () {\n    expect(function () {\n        divide(2, 0);\n    })-&gt;toThrow(DivideByZeroException::class);\n});\n\nit('throws an exception when cliente cupo superado', function() {\n\n    $soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107); \n    $soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);\n    $soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\"); \n    $soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\"); \n\n    $cliente1 = new Cliente(\"Bruce Wayne\", 23); \n    $cliente1-&gt;alquilar($soporte1); \n    $cliente1-&gt;alquilar($soporte2); \n    $cliente1-&gt;alquilar($soporte3); \n\n})-&gt;throws(CupoSuperadoException::class);\n</code></pre> <p>Ver cap\u00edtulo: Instalar 2 paquetes. Collections y Pest</p> <p>En este cap\u00edtulo del curso \"Crear aplicaci\u00f3n Web\" vemos como instalar Pest y configurarlo para realizar nuestros primeros test.</p>"},{"location":"05herramientas.html#cobertura-de-codigo","title":"Cobertura de c\u00f3digo","text":"<p>La cobertura de pruebas indica la cantidad de c\u00f3digo que las pruebas cubren, siendo recomendable que cubran entre el 95 y el 100%.</p> <p>Una de las m\u00e9tricas asociadas a los informes de cobertura es el CRAP (An\u00e1lisis y Predicciones sobre el Riesgo en Cambios), el cual mide la cantidad de esfuerzo, dolor y tiempo requerido para mantener una porci\u00f3n de c\u00f3digo. Esta m\u00e9trica debe mantenerse con un valor inferior a 5.</p> <p>Requisito xdebug</p> <p>Aunque ya viene instalado dentro de PHPUnit, para que funcione la cobertura del c\u00f3digo, es necesario que el c\u00f3digo PHP se ejecute con XDEBUG, y e indicarle a Apache que as\u00ed es (colocando en el archivo de configuraci\u00f3n <code>php.ini</code>la directiva <code>xdebug.mode=coverage</code>).</p> <p>A\u00f1adimos en <code>composer.json</code> un nuevo script:</p> <pre><code>\"coverage\": \"phpunit --coverage-html coverage --coverage-filter app tests\"\n</code></pre> <p>Y posteriormente ejecutamos</p> <pre><code>composer coverage\n</code></pre> <p>Por ejemplo, si accedemos a la clase <code>CintaVideo</code> con la prueba que hab\u00edamos realizado anteriormente, podemos observar la cobertura que tiene al 100% y que su CRAP es 2.</p> Informe de cobertura de la clase CintaVideo"},{"location":"05herramientas.html#referencias","title":"Referencias","text":"<ul> <li>Tutorial de Composer</li> <li>PHP Monolog</li> <li>Unit Testing con PHPUnit \u2014 Parte 1, de Emiliano Zublena.</li> </ul>"},{"location":"06accesoDatos.html","title":"6.- Acceso a Datos","text":""},{"location":"06accesoDatos.html#acceso-a-datos","title":"Acceso a datos","text":"<p>En esta unidad vamos a aprender a acceder a datos que se encuentran en un servidor; recuperando, editando y creando dichos datos a trav\u00e9s de una base de datos.</p> <p>A trav\u00e9s de las distintas capas o niveles, de las cuales 2 de ellas ya conocemos (Apache, PHP) y MySQL la que vamos a estudiar en este tema.</p>"},{"location":"06accesoDatos.html#instalacion","title":"Instalaci\u00f3n","text":"<p>A trav\u00e9s de XAMPP es muy sencillo, simplemente nos descargar\u00edamos el programa y lo activar\u00edamos. Para descargar XAMPP pulsa aqu\u00ed.</p> <p>Con Docker nos descargaremos esta imagen de docker y lanzamos </p> <pre><code>docker-compose up -d\n</code></pre> <p>Si todo ha salido bien y el contenedor est\u00e1 en marcha, podremos visitar la p\u00e1gina de phpMyAdmin de la siguiente manera</p> <pre><code>http://localhost:8000\n</code></pre> <p>Para acceder debemos utilizar las siguientes credenciales que vienen configuradas en el alrchivo <code>docker-compose.yml</code> </p> <pre><code>usuario: root\ncontrase\u00f1a: 1234\n</code></pre>"},{"location":"06accesoDatos.html#estructura-de-una-base-de-datos","title":"Estructura de una base de datos","text":"<p>Sabemos que una base de datos tiene muchos campos con sus nombres y valores, pero adem\u00e1s sabemos que la base de datos debe tener un nombre. por tanto tendr\u00edamos la siguiente estructura para una base de datos:</p> <pre><code>NombreBaseDeDatos\n    |__Tabla-#1\n    |       |__DatosTabla-#1\n    |\n    |__Tabla-#2\n    |       |__DatosTabla-#2\n    |\n    |__Tabla-#3\n    |       |__DatosTabla-#3\n    [...]\n</code></pre> <p>Ve\u00e1moslo en un ejemplo real</p> <pre><code>Ryanair\n    |__pasajero\n    |    |__id[*]\n    |    |__nombre\n    |    |__apellidos\n    |    |__edad\n    |    |__id_vuelo[^]\n    |\n    |__vuelo\n    |    |__id[*]\n    |    |__n_plazas\n    |    |__disponible\n    |    |__id_pais[^]\n    |\n    |__pais\n         |__id[*]\n         |__nombre\n</code></pre>      [*] Clave primaria [^] Clave For\u00e1nea"},{"location":"06accesoDatos.html#sql","title":"SQL","text":"<p>Este lenguaje de consulta estructurada (Structured Query Language) es el que vamos a utilizar para realizar las consultas a nuestras bases de datos para mostrar el contenido en las distintas interfaces web que creemos a lo largo de la unidad. Si quieres saber m\u00e1s detalles visita Wiki SQL</p> <p>Ejemplo de una sentencia SQL donde seleccionamos todas las filas y columnas de nuestra tabla llamada 'pais'</p> <pre><code>SELECT * FROM pais\n</code></pre> <p>Estas sentencias pueden invocarse desde la consola de comandos mediante el int\u00e9rprete mysql (previamente instalado en el sistema) o a trav\u00e9s de la herramienta phpMyAdmin.</p> <p>Las sentencias SQL tambi\u00e9n las podemos usar dentro de nuestro c\u00f3digo php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos.</p> <pre><code>&lt;?php\n    // Listado de clientes, ordenados por DNI de manera ASCendente\n    $clientesOrdenadosPorDNI = \"SELECT * FROM `pasajero` ORDER BY `dni`\" ASC;\n?&gt;\n</code></pre>"},{"location":"06accesoDatos.html#phpmyadmin","title":"phpMyAdmin","text":"<p>Este software funciona bajo Apache y PHP y es m\u00e1s que nada una interfaz web para gestionar las bases de datos que tengamos disponibles en nuestro servidor local. Muchos hostings ofrecen esta herramienta por defecto para poder gestionar las BBDD que tengamos configuradas bajo nuestra cuenta.</p>"},{"location":"06accesoDatos.html#creando-una-base-de-datos-dentro-de-phpmyadmin","title":"Creando una base de datos dentro de phpMyAdmin","text":"<ol> <li> <p>Para crear una nueva base de datos debemos entrar en phpMyAdmin como usuario root y pinchar en la opci\u00f3n Nueva del men\u00fa de la izquierda.</p> </li> <li> <p>En la nueva ventana de creaci\u00f3n pondremos un nombre a nuestra bbdd.</p> </li> <li> <p>Tambi\u00e9n estableceremos el cotejamiento utf8m4_unicode_ci para que nuestra bbdd soporte todo tipo de caracteres (como los asi\u00e1ticos) e incluso emojis ;)</p> </li> <li> <p>Le damos al bot\u00f3n de Crear para crear la bbdd y empezar a escribir las distintas tablas que vayamos a introducir en ella.</p> </li> </ol> <p>El sistema generar\u00e1 el c\u00f3digo SQL para crear todo lo que le hemos puesto y crear\u00e1 la base de datos con las tablas que le hayamos metido.</p> <pre><code>CREATE TABLE `persona`. ( `id` INT NOT NULL AUTO_INCREMENT , `nombre` TINYTEXT NOT NULL , `apellidos` TEXT NOT NULL , `telefono` TINYTEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;\n</code></pre>"},{"location":"06accesoDatos.html#opciones-en-phpmyadmin","title":"Opciones en phpMyAdmin","text":"<p>Cuando seleccionamos una base de datos de la lista, el sistema nos muestra varias pesta\u00f1as con las cuales interactuar con la base de datos en cuesti\u00f3n:</p> <ul> <li> <p><code>Estructura</code>: Podemos ver las distintas tablas que consolidan nuestra base de datos</p> </li> <li> <p><code>SQL</code>: Por si queremos inyectar c\u00f3digo SQL para que el sistema lo interprete</p> </li> <li> <p><code>Buscar</code>: Sirve para buscar por t\u00e9rminos, en nuestra base de datos, aplicando distintos filtros de b\u00fasqueda</p> </li> <li> <p><code>Generar consulta</code>: parecido a SQL pero de una manera m\u00e1s gr\u00e1fica, sin tener que saber nada del lenguaje</p> </li> <li> <p><code>Exportar e importar</code>: Como su nombre indica, para hacer cualquiera de las 2 operaciones sobre la base de datos</p> </li> <li> <p><code>Operaciones</code>: Distintas opciones avanzadas para realizar en nuestra base de datos, de la cual destacaremos la opci\u00f3n Cotejamiento donde podremos cambiar el cotejamiento de nuestra tabla pero OJO CON \u00c9STO porque podemos eliminar datos sin querer, ya que al cambiar el cotejamiento podemos suprimir caracteres no soportados por el nuevo cotejamiento</p> </li> </ul> <p>No vamos a profundizar en el resto de opciones pero, en la pesta\u00f1a M\u00e1s existe la opci\u00f3n Dise\u00f1ador para poder editar las relaciones entre tablas de una manera gr\u00e1fica (pinchando y arrastrando) que veremos m\u00e1s adelante.</p>"},{"location":"06accesoDatos.html#mysqli","title":"MySQLi","text":"<p>PHP hace uso de esta extensi\u00f3n mejorada para poder comunicarse con las bases de datos, ya sean MySQL (4.1 o superior) o MariaDB.</p> <p>Cualquier consulta que queramos hacer a una base de datos necesitaremos hacer uso de la extensi\u00f3n mysqli()</p> <p>Veamos como conectarnos con una base de datos a trav\u00e9s del c\u00f3digo PHP</p> <pre><code>&lt;?php\n    // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    // \"SERVIDOR\", \"USUARIO\", \"CONTRASE\u00d1A\", \"BASE DE DATOS\"\n    $conexion = mysqli_connect(\"d939ebf6a741\",\"tuUsuario\",\"1234\",\"pruebas\");\n\n    // COMPROBAMOS LA CONEXI\u00d3N\n    if(mysqli_connect_errno()) {\n        echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        exit();\n    }\n\n    echo \"&lt;h1&gt;Bienvenid@ a MySQL !!&lt;/h1&gt;\";\n?&gt;\n</code></pre> <ul> <li><code>servidor</code>: El servidor donde se encuentra la base de datos que queremos usar suele ser localhost, pero en nuestro caso, al utilizar Docker ser\u00e1 el nombre de la imagen mysql:8.0 que aparece al dejar el rat\u00f3n encima en el Visual Studio Code</li> </ul> <ul> <li><code>usuarioDB</code>: El usuario de la base de datos</li> <li><code>passwordDB</code>: La contrase\u00f1a para ese usuario de la base de datos</li> <li><code>baseDeDatos</code>: Nombre de la base de datos que queramos usar</li> </ul> <p>Si todo ha salido bien habr\u00e9is visto un mensaje diciendo Bienvenid@ a MySQL !!</p>"},{"location":"06accesoDatos.html#recuperando-datos-de-una-bd","title":"Recuperando datos de una BD","text":"<p>Ahora que ya sabemos c\u00f3mo conectarnos a una base de datos alojada en nuestro servidor, lo que necesitamos saber es c\u00f3mo recuperar datos almacenados en la base de datos.</p> <p>Durante la instalaci\u00f3n de la imagen de Docker, se ha creado una tabla llamada Pruebas que contiene varios registros de distintas personas.</p> <p>Vamos a recuperar esos datos para ver de qu\u00e9 forma se hace con PHP.</p> <pre><code>&lt;?php\n    // \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $conexion = mysqli_connect(\"d939ebf6a741\", \"lupa\", \"1234\", \"pruebas\");\n\n    // COMPROBAMOS LA CONEXI\u00d3N\n    if (mysqli_connect_errno()) {\n        echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n        exit();\n    }\n\n    // CONSULTA A LA BASE DE DATOS\n    $consulta = \"SELECT * FROM `Person`\";\n    $listaUsuarios = mysqli_query($conexion, $consulta);\n\n    // COMPROBAMOS SI EL SERVIDOR NOS HA DEVUELTO RESULTADOS\n    if($listaUsuarios) {\n\n        // RECORREMOS CADA RESULTADO QUE NOS DEVUELVE EL SERVIDOR\n        foreach ($listaUsuarios as $usuario) {\n            echo \"\n                $usuario[id]\n                $usuario[name]\n                &lt;br&gt;\n            \";\n        }\n    }\n?&gt;\n</code></pre> <p>Si todo ha salido bien, por pantalla ver\u00e1s el siguiente listado</p> <pre><code>\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 http://localhost/pruebas.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n1 William\n2 Marc\n3 John\n4 Antonio Moreno\n</code></pre>"},{"location":"06accesoDatos.html#php-data-objects-pdo","title":"PHP Data Objects :: PDO","text":"<p>De la misma manera que hemos visto con mysqli, PHP Data Objects (o PDO) es un driver de PHP que se utiliza para trabajar bajo una interfaz de objetos con la base de datos. A d\u00eda de hoy es lo que m\u00e1s se utiliza para manejar informaci\u00f3n desde una base de datos, ya sea relacional o no relacional.</p> <p>De igual manera que pasaba con los objetos en PHP nativos, en la interfaz de MySQL la cosa cambia la hora de conectarnos con una base de datos.</p> <pre><code>&lt;?php\n    $conexion = new PDO('mysql:host=localhost; dbname=dwes', 'dwes', 'abc123');\n</code></pre> <p>Adem\u00e1s, con PDO podemos usar las excepciones con try catch para gestionar los errores que se produzcan en nuestra aplicaci\u00f3n, para ello, como hac\u00edamos antes, debemos encapsular el c\u00f3digo entre bloques try / catch.</p> <p><pre><code>&lt;?php\n\n    $dsn = 'mysql:dbname=prueba;host=127.0.0.1';\n    $usuario = 'usuario';\n    $contrase\u00f1a = 'contrase\u00f1a';\n\n    try {\n        $mbd = new PDO($dsn, $usuario, $contrase\u00f1a);\n        $mbd-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    } catch (PDOException $e) {\n        echo 'Fall\u00f3 la conexi\u00f3n: ' . $e-&gt;getMessage();\n    }\n</code></pre> En primer lugar, creamos la conexi\u00f3n con la base de datos a trav\u00e9s del constructor PDO pas\u00e1ndole la informaci\u00f3n de la base de datos.</p> <p>En segundo lugar, establecemos los par\u00e1metros para manejar las excepciones, en este caso hemos utilizado:</p> <ul> <li><code>PDO::ATTR_ERRMODE</code> indic\u00e1ndole a PHP que queremos un reporte de errores.</li> <li><code>PDO::ERRMODE_EXCEPTION</code> con este atributo obligamos a que lance excepciones, adem\u00e1s de ser la opci\u00f3n m\u00e1s humana y legible que hay a la hora de controlar errores.</li> </ul> <p>Cualquier error que se lance a trav\u00e9s de PDO, el sistema lanzar\u00e1 una PDOException.</p>"},{"location":"06accesoDatos.html#fichero-de-configuracion-de-la-bd","title":"Fichero de configuraci\u00f3n de la BD","text":"<p>De la misma manera que creamos nuestro archivo de funciones <code>funciones-php</code> y albergamos todas las funciones que se usan de manera global en la aplicaci\u00f3n, podemos establecer un archivo de constantes donde definamos los par\u00e1metros de conexi\u00f3n con la base de datos.</p> <pre><code>&lt;?php\n\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 conexion.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    constDSN = \"mysql:host=localhost;dbname=dwes\";\n    constUSUARIO = \"dwes\";\n    constPASSWORD = \"abc123\";\n\n    /*  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 NO SUBAS ESTE ARCHIVO A git \u2592\u2592\u2592\u2592\u2592\n\n        \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 */\n</code></pre> <p>Este archivo contiene informaci\u00f3n muy sensible as\u00ed que no es recomendable que subas este archivo a git.</p>"},{"location":"06accesoDatos.html#sentencias-preparadas","title":"Sentencias preparadas","text":"<p>Se trata de sentencias que se establecen como si fueran plantillas de la SQL que vamos a lanzar, aceptando par\u00e1metros que son establecidos a posteriori de la declaraci\u00f3n de la sentencia preparada.</p> <p>Las sentencias preparadas evitan la injecci\u00f3n de SQL (SQL Injection) y mejoran el rendimiento de nuestras aplicaci\u00f3nes o p\u00e1ginas web.</p> <pre><code>&lt;?php\n    $sql = \"INSERT INTO Clientes VALUES (?, ?, ?, ?)\";\n</code></pre> <p>Cada interrogante es un par\u00e1metro que estableceremos despu\u00e9s, unas cuantas l\u00edneas m\u00e1s abajo.</p> <p>Una vez tenemos la plantilla de nuestra consulta, debemos seguir con la preparaci\u00f3n junto con 3 m\u00e9todos m\u00e1s de PHP para su completa ejecuci\u00f3n:</p> <ul> <li><code>prepare:</code> prepara la sentenci\u00e1n antes de ser ejecutada</li> <li><code>bind</code>: el tipo de uni\u00f3n (bind) de dato que puede ser mediante ' ? ' o ' :parametro '</li> <li><code>execute</code> se ejecuta la consulta uniendo la plantilla con las bariables o par\u00e1metros que hemos establecido.</li> </ul>"},{"location":"06accesoDatos.html#ejemplo-parametros","title":"Ejemplo par\u00e1metros","text":"<pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Borrando con par\u00e1metros \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\";\n\n    $conexion = null;\n\n    try { \n        $cantidad = $_GET[\"cantidad\"];\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM stock WHERE unidades = ?\";\n        $sentencia = $conexion -&gt; prepare($sql);\n\n        $isOk = $sentencia -&gt; execute([$cantidad]);\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null\n</code></pre>"},{"location":"06accesoDatos.html#ejemplo-bindparam","title":"Ejemplo bindParam","text":"<p>Muy parecido a utilizar par\u00e1metros pero esta vez la variable est\u00e1 dentro de la sentencia SQL, en este caso la hemos llamado <code>:cant</code></p> <pre><code>&lt;?php\n    include \"config/database.inc.php\";\n\n    $conexion=null;\n\n    try {\n        $cantidad = $_GET[\"cantidad\"] ?? 0;\n\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"DELETE FROM stock WHERE unidades = :cant\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia -&gt; bindParam(\":cant\", $cantidad);\n\n        $isOk = $sentencia -&gt; execute();\n\n        $cantidadAfectada = $sentencia -&gt; rowCount();\n\n        echo $cantidadAfectada;\n    } catch (PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre>"},{"location":"06accesoDatos.html#bindparam-vs-bindvalue","title":"bindParam VS bindValue","text":"<p>Utilizaremos <code>bindValue()</code> cuando tengamos que insertar datos s\u00f3lo una vez, en cambio, deberemos usar <code>bindParam()</code> cuando tengamos que pasar datos m\u00faltiples, como por ejemplo, un array.</p> <pre><code>&lt;?php\n    // se asignan nombre a los par\u00e1metros\n    $sql = \"DELETE FROM stock WHERE unidades = :cant\";\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    // bindParam enlaza por referencia\n    $cantidad = 0;\n\n    $sentencia -&gt; bindParam(\":cant\", $cantidad);\n    $cantidad = 1;\n\n    // se eliminan con cant = 1\n    $isOk = $sentencia -&gt; execute();\n\n    // bindValue enlaza por valor\n    $cantidad = 0;\n\n    $sentencia -&gt; bindValue(\":cant\", $cantidad);\n    $cantidad = 1;\n\n    // se eliminan con cant = 0\n    $isOk = $sentencia-&gt;execute();\n</code></pre> <p>Para m\u00e1s informaci\u00f3n y uso de las variables PDO consulta el manual de PHP.</p>"},{"location":"06accesoDatos.html#insertando-registros","title":"Insertando registros","text":"<p>A la hora de insertar registros en una base de datos, debemos tener en cuenta que en la tabla puede haber valores autoincrementados. Para salvaguardar \u00e9sto, lo que debemos hacer es dejar ese cambpo autoincrementado vac\u00edo, pero a la hora de hacer la conexi\u00f3n, debemos recuperarlo con el m\u00e9todo <code>lastInsertId()</code>.</p> <pre><code>&lt;?php\n    $nombre = $_GET[\"nombre\"] ?? \"SUCURSAL X\";\n    $telefono = $_GET[\"telefono\"] ?? \"636123456\";\n\n    $sql=\"INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; bindParam(\":nombre\", $nombre);\n    $sentencia -&gt; bindParam(\":telefono\", $telefono);\n\n    $isOk = $sentencia -&gt; execute();\n    $idGenerado = $conexion -&gt; lastInsertId();\n\n    echo $idGenerado;\n</code></pre>"},{"location":"06accesoDatos.html#consultando-registros","title":"Consultando registros","text":"<p>A la hora de recuperar los resultados de una consulta, bastar\u00e1 con invocar al m\u00e9todo <code>PDOStatement::fetch</code> para listar las filas generadas por la consulta.</p> <p>Pero debemos elegir el tipo de dato que queremos recibir entre los 3 que hay disponibles:</p> <ul> <li><code>PDO::FETCH_ASSOC:</code> array indexado cuyos keys son el nombre de las columnas.</li> <li><code>PDO::FETCH_NUM:</code> array indexado cuyos keys son n\u00fameros.</li> <li><code>PDO::FETCH_BOTH:</code> valor por defecto. Devuelve un array indexado cuyos keys son tanto el nombre de las columnas como n\u00fameros.</li> </ul> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo.php \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    include \"config/database.inc.php\";\n\n    $conexion = null;\n\n    try{\n        $conexion = new PDO(DSN, USUARIO, PASSWORD);\n        $conexion -&gt; setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        $sql = \"select * from tienda\";\n\n        $sentencia = $conexion -&gt; prepare($sql);\n        $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n        $sentencia -&gt; execute();\n\n        while($fila = $sentencia -&gt; fetch()){\n            echo \"Codigo:\" . $fila[\"cod\"] . \"&lt;br /&gt;\";\n            echo \"Nombre:\" . $fila[\"nombre\"] . \"&lt;br /&gt;\";\n            echo \"Tel\u00e9fono:\" . $fila[\"tlf\"] . \"&lt;br /&gt;\";\n        }\n\n    }catch(PDOException $e) {\n        echo $e -&gt; getMessage();\n    }\n\n    $conexion = null;\n</code></pre> <p>Recuperando datos con una matriz como resultado de nuestra consulta</p> <p><pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con array asociativo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql=\"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_ASSOC);\n    $sentencia -&gt; execute();\n\n    $tiendas = $sentencia -&gt; fetchAll();\n\n    foreach($tiendasas$tienda) {\n        echo\"Codigo:\" . $tienda[\"cod\"] . \"&lt;br /&gt;\";\n        echo\"Nombre:\" . $tienda[\"nombre\"] . \"&lt;br /&gt;\";\n    }\n</code></pre> Pero si lo que queremos es leer datos con forma de objeto utilizando <code>PDO::FETCH_OBJ</code>, debemos crear un objeto con propiedades p\u00fablicas con el mismo nombre que las columnas de la tabla que vayamos a consultar.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 consulta con formato de objeto \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql=\"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_OBJ);\n    $sentencia -&gt; execute();\n\n    while($t = $sentencia -&gt; fetch()) {\n        echo\"Codigo:\" . $t -&gt; cod . \"&lt;br /&gt;\";\n        echo\"Nombre:\" . $t -&gt; nombre . \"&lt;br /&gt;\";\n        echo\"Tel\u00e9fono:\" . $t -&gt; tlf . \"&lt;br /&gt;\";\n    }\n</code></pre>"},{"location":"06accesoDatos.html#consultas-con-modelos","title":"Consultas con modelos","text":"<p>Llevamos tiempo creando clases en PHP y las consultas tambi\u00e9n admiten este tipo de datos mediante el uso de <code>PDO::FETCH_CLASS</code></p> <p>Si usamos este m\u00e9todo, debemos tener en cuenta que los nombres de los atributos privados deben coincidir con los nombres de las columnas de la tabla que vayamos a manejar.</p> <p>As\u00ed pues, si por lo que sea cambiamos la estructura de la tabla DEBEMOS CAMBIAR nuestra clase para que todo siga funcionando.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    classTienda {\n        private int $cod;\n        private string $nombre;\n        private ? string $tlf;\n\n        public function getCodigo() : int {\n            return $this -&gt; cod;\n        }\n\n        public function getNombre() : string {\n            return $this -&gt; nombre;\n        }\n\n        public function getTelefono() : ?string {\n            return $this -&gt; tlf;\n        }\n    }\n</code></pre> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consultando a trav\u00e9s de la clase Tienda \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    // Aqu\u00ed 'Tienda' es el nombre de nuestra clase\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS, \"Tienda\");\n    $sentencia -&gt; execute();\n\n    while($t = $sentencia -&gt; fetch()) {\n        echo \"Codigo: \" . $t -&gt; getCodigo() . \"&lt;br /&gt;\";\n        echo \"Nombre: \" . $t -&gt; getNombre() . \"&lt;br /&gt;\";\n        echo \"Tel\u00e9fono: \" . $t -&gt; getTelefono() . \"&lt;br /&gt;\";\n\n        var_dump($t);\n    }\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa si nuestras clases tienen constructor? pues que debemos indicarle, al m\u00e9todo FECTH, que rellene las propiedades despu\u00e9s de llamar al constructor y para ello hacemos uso de <code>PDO::FETCH_PROPS_LATE</code>.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Consulta para una clase con constructor \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class);\n    $sentencia -&gt; execute();\n\n    $tiendas = $sentencia -&gt; fetchAll();\n</code></pre>"},{"location":"06accesoDatos.html#consultas-con-like","title":"Consultas con LIKE","text":"<p>Para utilizar el comod\u00edn LIKE u otros comodines, debemos asociarlo al dato y NUNCA en la propia consulta.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Utilizando comodines :: LIKE \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $sql = \"SELECT * FROM tienda where nombre like :nombre or tlf like :tlf\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; setFetchMode(PDO::FETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class);\n\n    $cadBuscar = \"%\" . $busqueda . \"%\";\n\n    $sentencia -&gt; execute([\"nombre\" =&gt; $cadBuscar,\"tlf\" =&gt; $cadBuscar]);\n\n    $result = $sentencia -&gt; fetchAll();\n</code></pre> <p>Ten\u00e9is una lista de ejemplos muy completa en la documentaci\u00f3n oficial.</p>"},{"location":"06accesoDatos.html#login-password","title":"Login &amp; Password","text":"<p>Para manejar un sistema completo de login y password con contrase\u00f1as cifradas, necesitamos un m\u00e9todo que cifre esos strings que el usuario introduce como contrase\u00f1a; tanto en el formulario de registro como en el del login, ya que al codificar una contrase\u00f1a, despu\u00e9s tenemos que decodificarla para comprobar que ambas contras\u00f1eas (la que instroduce el usuario en el login y la que tenemos en la base de datos) coincidan.</p> <p>Necesitamos pues:</p> <ul> <li> <p><code>password_hash()</code> para almacenar la contrase\u00f1a en la base de datos a la hora de hacer el INSERT</p> <ul> <li> <p><code>PASSWORD_DEFAULT</code> almacenamos la contrase\u00f1a usando el m\u00e9todo de encriptaci\u00f3n bcrypt</p> </li> <li> <p><code>PASSWORD_BCRYPT</code> almacenamos la contrase\u00f1a usando el algoritmo CRYPT_BLOWFISH compatible con crypt()</p> </li> </ul> </li> <li> <p><code>password_verify()</code> para verificar el usuario y la contrase\u00f1a</p> </li> </ul> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Almacenando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"usuario\"];\n    $pas = $_POST[\"password\"];\n\n    $sql = \"INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n\n    $isOk = $sentencia -&gt; execute([\n        \"usuario\" =&gt; $usu,\n        \"password\" =&gt; password_hash($pas,PASSWORD_DEFAULT)\n    ]);\n</code></pre> <p>Ahora que tenemos el usuario codificado y guardado en la base de datos, vamos a recuperarlo para poder loguearlo correctamente.</p> <pre><code>&lt;?php\n    //  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Recuperando usuario y password en BD \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n    $usu = $_POST[\"login\"] ?? \"\";\n\n    $sql = \"select * from usuarios where usuario = ?\";\n\n    $sentencia = $conexion -&gt; prepare($sql);\n    $sentencia -&gt; execute([$usu]);\n\n    $usuario = $sentencia -&gt; fetch();\n\n    if($usuario &amp;&amp; password_verify($_POST['pass'], $usuario['password'])) {\n        echo\"OK!\";\n    } else {\n        echo\"KO\";\n    }\n</code></pre>"},{"location":"06accesoDatos.html#acceso-a-ficheros","title":"Acceso a ficheros","text":"<p>Gracias a la funcion fopen() desde PHP podemos abrir archivos que se encuentren en nuestros servidor o una URL.</p> <p>A esta funci\u00f3n hay que pasarle 2 par\u00e1metros; el nombre del archivo que queremos abrir y el modo en el que se abrir\u00e1</p> <pre><code>$fp = fopen(\"miarchivo.txt\", \"r\");\n</code></pre> <p>Muchas veces no podemos abrir el archivo porque \u00e9ste no se encuentra o no tenemos acceso a \u00e9l, por eso es recomendable comprobar que podemos hacerlo</p> <pre><code>if (!$fp = fopen(\"miarchivo.txt\", \"r\")){\n    echo \"No se ha podido abrir el archivo\";\n}\n</code></pre>"},{"location":"06accesoDatos.html#modos-de-apertura-de-ficheros","title":"Modos de apertura de ficheros","text":"<ul> <li><code>r</code>:  Modo lectura. Puntero al principio del archivo.</li> <li><code>r+</code>: Apertura para lectura y escritura. Puntero al principio del archivo</li> <li><code>w</code>: Apertura para escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>w+</code>: Apertura para lectura y escritura. Puntero al principio del archivo y lo sobreescribe. Si no existe se intenta crear.</li> <li><code>a</code>: Apertura para escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>a+</code>: Apertura para lectura y escritura. Puntero al final del archivo. Si no existe se intenta crear.</li> <li><code>x</code>: Creaci\u00f3n y apertura para s\u00f3lo escritura. Puntero al principio del archivo. Si el archivo ya existe dar\u00e1 error E_WARNING. Si no existe se intenta crear.</li> <li><code>x+</code>: Creaci\u00f3n y apertura para lectura y escritura. Mismo comportamiento que x.</li> <li><code>c</code>: Apertura para escritura. Si no existe se crea. Si existe no se sobreescribe ni da ning\u00fan error. Puntero al principio del archivo.</li> <li><code>c+</code>: Apertura para lectura y escritura. Mismo comportamiento que C.</li> <li><code>b</code>: Cuando se trabaja con archivos binarios como jpg, pdf, png y dem\u00e1s. Se suele colocar al final del modo, es decir rb, r+b, x+b, wb...</li> </ul>"},{"location":"06accesoDatos.html#operaciones-con-archivos","title":"Operaciones con archivos","text":"<p>Para poder leer un archivo necesitamos usar la funci\u00f3n fread() de PHP</p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Abriendo un archivo y leyendo su contenido \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$fp = fopen($file, \"r\");\n\n// filesize() nos devuelve el tama\u00f1o del archivo en cuesti\u00f3n\n$contents = fread($fp, filesize($file));\n\n// Cerramos la conexi\u00f3n con el archivo\nfclose();\n</code></pre> <p>Si lo que queremos es escribir en un archivo, deberemos hacer uso de la funci\u00f3n fwrite()</p> <pre><code>//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Escribiendo en un archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Hola que tal\";\n\n$fp = fopen($file, \"w\");\n\nfwrite($fp, $texto);\nfclose($fp);\n</code></pre>"},{"location":"06accesoDatos.html#informacion-de-un-fichero","title":"Informaci\u00f3n de un fichero","text":"<p>Con PHP y su m\u00e9todo stat() podemos obtener informaci\u00f3n sobre los archivos que le indiquemos. Este m\u00e9todo devuelve hasta un total de 12 elementos con ifnormaci\u00f3n acerca de nuestro archivo.</p> <pre><code>0   dev         n\u00famero de dispositivo\n1   ino         n\u00famero de i-nodo\n2   mode        modo de protecci\u00f3n del i-nodo\n3   nlink       n\u00famero de enlaces\n4   uid         ID de usuario del propietario\n5   gid         ID de grupo del propietario\n6   rdev        tipo de dispositivo, si es un dispositivo i-nodo\n7   size        tama\u00f1o en bytes\n8   atime       momento del \u00faltimo acceso (tiempo Unix)\n9   mtime       momento de la \u00faltima modificaci\u00f3n (tiempo Unix)\n10  ctime       momento de la \u00faltima modificaci\u00f3n del i-nodo (tiempo Unix)\n11  blksize     tama\u00f1o del bloque E/S del sistema de ficheros\n12  blocks      n\u00famero de bloques de 512 bytes asignados\n</code></pre> <p>Unos ejemplos...</p> <pre><code>&lt;?php\n\n//  \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 Informaci\u00f3n del archivo \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n\n$file = \"miarchivo.txt\";\n$texto = \"Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.\";\n\n$fp = fopen($file, \"w\");\nfwrite($fp, $texto);\n\n$datos = stat($file);\n\necho $datos[3] . \"&lt;br&gt;\"; // N\u00famero de enlaces, 1\necho $datos[7] . \"&lt;br&gt;\"; // Tama\u00f1o en bytes, 85\necho $datos[8] . \"&lt;br&gt;\"; // Momento de \u00faltimo acceso, 1444138104\necho $datos[9] . \"&lt;br&gt;\"; // Momento de \u00faltima modificaci\u00f3n, 1444138251\n\n?&gt;\n</code></pre> <p>Echa un vistazo a las funciones de directorios que tiene PHP, es muy interesante.</p>"},{"location":"06accesoDatos.html#archivos-pdf","title":"Archivos PDF","text":"<p>Con PHP podemos manejar todo tipo de archivos como ya hemos visto pero, \u00bfqu\u00e9 pasa si queremos generar ficheros PDF con datos sacados de una base de datos?</p> <p>Gracias a una clase escrita en PHP, podemos generar archivos PDF sin necesidad de instalar librer\u00edas adicionales en nuestro servidor.</p> <p>Para ello, como tenemos composer dentro de nuestra imagen de Docker, usaremos composer para instalar esta dependencia.</p> <p>Acu\u00e9rdate que debemes haber hecho <code>composer init</code> para empezar un proyecto con composer, de lo contrario no podr\u00e1s a\u00f1adir ning\u00fan paquete.</p> <p>Veamos un ejemplo de Hello World convertido a PDF</p> <p><pre><code>&lt;?php\n\nob_end_clean();\nrequire('fpdf/fpdf.php');\n\n// Instanciamos la clase\n// P = Portrait | mm = unidades en mil\u00edmetros | A4 = formato\n$pdf = new FPDF('P','mm','A4');\n\n// A\u00f1adimos una p\u00e1gina\n$pdf-&gt;AddPage();\n\n// Establecemos la fuente y el tama\u00f1o de letra\n$pdf-&gt;SetFont('Arial', 'B', 18);\n\n// Imprimimos una celda con el texto que nosotros queramos\n$pdf-&gt;Cell(60,20,'Hello World!');\n\n// Terminamos el PDF\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre> Hay muchos ejemplos y tutoriales, as\u00ed como documentaci\u00f3n de la clase FPDF en la p\u00e1gina oficial.</p> <p>Visita la secci\u00f3n de tutoriales y el manual para sacar mayor partido a esta clase.</p> <pre><code>&lt;?php\n\nrequire('fpdf/fpdf.php');\n\nclass PDF extends FPDF {\n\n    // Cabecera\n    function Header() {\n\n        // A\u00f1adimos un logotipo\n        $this-&gt;Image('logo.png',10,8,33);\n\n        // establecemos la fuente y el tama\u00f1o\n        $this-&gt;SetFont('Arial','B',20);\n\n        // Movemos el contenido un poco a la derecha\n        $this-&gt;Cell(80);\n\n        // Pintamos la celda\n        $this-&gt;Cell(50,10,'Cabecera',1,0,'C');\n\n        // Pasamos a la siguiente l\u00ednea\n        $this-&gt;Ln(20);\n    }\n\n    // Pie de p\u00e1gina\n    function Footer() {\n\n        // Nos posicionamos a 1.5 cm  desde abajo del todo de la p\u00e1gina\n        $this-&gt;SetY(-15);\n\n        // Arial italic 8\n        $this-&gt;SetFont('Arial','I',8);\n\n        // N\u00famero de p\u00e1gina\n        $this-&gt;Cell(0,10,'P\u00e1gina ' . \n            $this-&gt;PageNo() . '/{nb}',0,0,'C');\n    }\n}\n\n// Instanciamos la clase\n$pdf = new PDF();\n\n// Definimos un alias para la numeraci\u00f3n de p\u00e1ginas\n$pdf-&gt;AliasNbPages();\n\n$pdf-&gt;AddPage();\n$pdf-&gt;SetFont('Times','',14);\n\nfor($i = 1; $i &lt;= 30; $i++)\n    $pdf-&gt;Cell(0, 10, 'N\u00famero de l\u00ednea ' \n            . $i, 0, 1);\n$pdf-&gt;Output();\n\n?&gt;\n</code></pre>"},{"location":"07frameworks.html","title":"07frameworks","text":""},{"location":"07frameworks.html#frameworks-php-laravel","title":"Frameworks PHP. Laravel","text":"<p>Duraci\u00f3n estimada: 40 sesiones</p>"},{"location":"07frameworks.html#puesta-en-marcha","title":"Puesta en marcha","text":"<p>Lo primero de todo es crear una carpeta con el nombre del proyecto que vayamos a crear y nos metemos en ella.</p> <p>Vamos a utilizar la imagen de Bitnami ya preparada, as\u00ed que lo que hacer ahora es descargar el archivo docker-compose.yml del repositorio de Github oficial.</p> <p>Una vez descargado el archivo en nuestra carpeta que acabamos de crear con el nombre del proyecto, lanzamos el siguiente comando por consola para instalar todas las dependencias y crear las im\u00e1genes de Docker correspondientes.</p> <pre><code>docker-compose -p Laravel up -d\n</code></pre> <p>Si todo ha salido bien podr\u00e1s ver en el Visual Studio Code que se han creado 2 im\u00e1genes y que el servidor web de Laravel est\u00e1 funcionando bajo la siguiente URL.</p> <pre><code>http://localhost:8000\n</code></pre> <p>Si por alguna extra\u00f1a raz\u00f3n est\u00e1s en Windows y no te funciona una de las 2 im\u00e1genes, puede ser debido a la instalci\u00f3n de composer dentro de la imagen de Laravel.</p> <p>Para solucionarlo, nos vamos a la carpeta del proyecto que se te habr\u00e1 creado por defecto al hacer docker-compose, en este caso y si no has modificado el archivo .yml la carpeta del proyecto sera <code>my-proyect</code> y dentro de ella eliminamos la carpeta <code>vendor</code>.</p> <p>Cuando hayamos eliminado dicha carpeta, necesitaremos instalar <code>Composer</code> de manera global en nuestro sistema Windows. Para ello. b\u00e1jate el instalador desde este enlace.</p> <p>Una vez lo instales ya ser\u00e1s capaz de lanzar el comando <code>composer</code> desde cualquier consola de Windows.</p> <p>Por \u00faltimo, abrimos una consola dentro de la carpeta <code>my-project</code> o el nombre que le hayas puesto a la carpeta del proyecto de Laravel y ejecutamos el siguiente comando.</p> <pre><code>composer install\n</code></pre> <p>Para terminar tan s\u00f3lo tendremos que volver a ejecutar el contenedor de Laravel desde Docker.</p>"},{"location":"07frameworks.html#vscode-extensiones","title":"VSCode extensiones","text":"<p>Recomendable instalar los siguientes plugins para Visual Studio Code</p> <pre><code>  Laravel Blade Snippets\n</code></pre>"},{"location":"07frameworks.html#carpetas-en-laravel","title":"Carpetas en Laravel","text":"<p>Al crear un nuevo proyecto con este framework, Laravel crea una serie de carpetas por defecto. Esta estructura de carpetas es la recomendada para utilizar Laravel.</p>"},{"location":"07frameworks.html#public","title":"Public","text":"<p>Esta es la carpeta m\u00e1s importante ya que es donde se ponen todos los archivos que el cliente va a mostrar al usuario cuando introduzcamos la URL de nuestro sitio web. Normalmente se carga el archivo <code>index.php</code> por defecto.</p>"},{"location":"07frameworks.html#routes","title":"Routes","text":"<p>Otra de las carpetas que m\u00e1s vamos a usar a lo largo de este curso de Laravel. En ella se albergan todas las rutas (redirecciones web) de nuestro proyecto, pero m\u00e1s concretamente en el archivo <code>web.php</code></p> <pre><code>Dada una ruta \u2192 se cargar\u00e1 una vista\n</code></pre>"},{"location":"07frameworks.html#resources","title":"Resources","text":"<p>Esta es nuestra carpeta de recursos donde guardaremos los siguientes archivos, que tambi\u00e9n, est\u00e1n separados por sus carpetas... como cada nombre indica:</p> <ul> <li><code>css</code> Archivos CSS</li> <li><code>js</code> Archivos JS (JavaScript)</li> <li><code>lang</code> Archivos relacionados con el idioma del sitio (variables &amp; strings)</li> <li><code>views</code> Archivos de nuestras vistas, lo que las rutas cargan</li> </ul>"},{"location":"07frameworks.html#rutas","title":"Rutas","text":"<p>Las rutas en Laravel (y en casi cualquier Framework) sirven para redireccionar al cliente (o navegador) a las vistas que nosotros queramos.</p> <p>Estas rutas se configuran en el archivo <code>public/routes/web.php</code> donde se define la ruta que el usuario pone en la URL despu\u00e9s del dominio y se retorna la vista que se quiere cargar al introducir dicha direcci\u00f3n en el navegador.</p> <pre><code>&lt;?php\n\n// Ruta por defecto para cargar la vista welcome cuando el usuario introduce simplemente el dominio\n\nRoute::get('/', function () {\n    return view('welcome');\n});\n</code></pre> <p>En el ejemplo de arriba vamos a cargar la vista llamada <code>welcome</code> que hace referencia a la vista <code>resources/views/welcome.blade.php</code></p>"},{"location":"07frameworks.html#alias","title":"Alias","text":"<p>Es interesante darle un alias o un nombre a nuestras rutas para poder utilizar dichos alias en nuestras plantillas de Laravel que veremos m\u00e1s adelante.</p> <p>Para ello, basta con utilizar la palabra <code>name</code> al final de la estructura de la ruta y darle un nombre que queramos; normalmente descriptivo y asociado a la vista que tiene que cargar el enroutador de Laravel.</p> <pre><code>&lt;?php\n\nRoute::get('/users', function () {\n    return view('users');\n}) -&gt; name('usuarios');\n</code></pre> <p>Despu\u00e9s veremos que es muy \u00fatil ya que a la hora de refactorizar o hacer un cambio, si tenemos enlaces o men\u00fas de navegaci\u00f3n que apuntan a esta ruta, s\u00f3lo tendr\u00edamos que cambiar el par\u00e1metro dentro del <code>get()</code> y no tener que ir archivo por archivo.</p> <p>Laravel nos proporciona una manera m\u00e1s c\u00f3moda a la hora de cargar una vista si no queremos par\u00e1metros ni condiciones. Tan s\u00f3lo definiremos la siguiente l\u00ednea que hace referencia la ruta <code>datos</code> en la URL y va a cargar el archivo <code>usuarios.php</code> de nuestra carpeta <code>views</code> como le hemos indicado en el segundo par\u00e1metro.</p> <pre><code>&lt;?php\n\n/* http://localhost/datos/ */\n\nRoute::view('datos', 'usuarios');\n</code></pre> <p>Pero no s\u00f3lo podemos retornar una vista sino, desde un simple string a m\u00f3dulos propios de Laravel.</p>"},{"location":"07frameworks.html#parametros","title":"Par\u00e1metros","text":"<p>Ya hemos visto que con PHP podemos pasar par\u00e1metros a trav\u00e9s de la URL, como si fueran variables, que las recuper\u00e1bamos a trav\u00e9s del m\u00e9todo GET o POST.</p> <p>Con Laravel tambi\u00e9n podemos introducir par\u00e1metros pero de una forma m\u00e1s vistosa y ordenada, de tal manera que sea visualmente m\u00e1s c\u00f3modo de recordar y de indexar por los motores de b\u00fasqueda como Google.</p> <pre><code>  http://localhost/cliente/324\n</code></pre> <p>Para configurar este tipo de rutas en nuestro archivo de rutas <code>public/routes/web.php</code> haremos lo siguiente.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id}', function($id) {\n    return('Cliente con el id: ' . $id);\n});\n</code></pre> <p>\u00bfQu\u00e9 pasa si no introducimos un id y s\u00f3lo navegamos hasta <code>cliente/</code> ? ... Nos va a devolver un 404</p> <p>Para resolver \u00e9sto, podemos definir una ruta por defecto en caso de que el <code>id</code> (o par\u00e1metro) no sea pasado. Para ello usaremos el s\u00edmbolo <code>?</code> en nuestro nombre de ruta e inicializaremos la variable con el valor que queramos.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id?}', function($id = 1) {\n    return ('Cliente con el id: ' . $id);\n});\n</code></pre> <p>Ahora tenemos otro problema, porque estamos filtrando por id del cliente que, normalmente es un n\u00famero, pero si metemos un par\u00e1metro que no sea un n\u00famero, vamos a obtener un resultado no deseado.</p> <p>Para resolver este caso haremos uso de la cl\u00e1usula <code>where</code> junto con una expresi\u00f3n regular n\u00famerica.</p> <pre><code>&lt;?php\n\nRoute::get('cliente/{id?}', function($id = 1) {\n    return ('Cliente con el id: ' . $id);\n}) -&gt; where('id', '[0-9]+');\n</code></pre> <p>Adem\u00e1s, podemos pasarle variables a nuestra URL para luego utilzarlas en nuestros archivos de plantillas o en archivos <code>.php</code> haciendo uso de un array asociativo. Veamos un ejemplo con la forma reducida para ahorrarnos c\u00f3digo</p> <pre><code>&lt;?php\n\nRoute::view('datos', 'usuarios', ['id' =&gt; 5446]);\n</code></pre> <p>... y el archivo <code>resources/views/usuarios.php</code> debe tener algo parecido a \u00e9sto</p> <pre><code>&lt;!-- Estructura t\u00edpica de un archivo HTML5 --&gt;\n\n&lt;p&gt;Usuario con id: &lt;?= $id ?&gt;&lt;/p&gt;\n\n&lt;!-- ... --&gt;\n</code></pre> <p>Con las plantillas de Laravel <code>blade.php</code> veremos c\u00f3mo simplificar a\u00fan m\u00e1s nuestro c\u00f3digo.</p> <p>Para m\u00e1s informaci\u00f3n acerca de las rutas, par\u00e1metros y expresiones regulares en las rutas puedes echar un vistazo a la documentaci\u00f3n oficial de rutas que contiene numerosos ejemplos.</p>"},{"location":"07frameworks.html#plantillas-o-templates","title":"Plantillas o Templates","text":"<p>A trav\u00e9s de las plantillas de Laravel vamos a escribir menos c\u00f3digo PHP y vamos a tener nuestros archivos mejor organizados.</p> <p>Blade es el sistema de plantillas que trae Laravel, por eso los archivos de plantillas que guardamos en el directorio de <code>views</code> llevan la extensi\u00f3n <code>blade.php</code>.</p> <p>De esta manera sabemos inmediatamente que se trata de una plantilla de Laravel y que forma parte de una vista que se mostrar\u00e1 en el navegador.</p>"},{"location":"07frameworks.html#directivas","title":"Directivas","text":"<p>Laravel tiene un gran n\u00famero de directivas que podemos utilizar para ahorrarnos mucho c\u00f3digo repetitivo entre otras funciones.</p> <p>Digamos que las directivas son peque\u00f1as funciones ya escritas que aceptan par\u00e1metros y que cada una de ellas hace una funci\u00f3n diferente dentro de Laravel.</p> <ul> <li><code>@yield</code> Define el contenido din\u00e1mico que se va a cargar. Se usa conjuntamente con @section</li> <li><code>@section</code> y <code>@endsection</code> bloque de c\u00f3digo din\u00e1mico</li> <li><code>@extends</code> importa el contenido de una plantilla ya creada</li> </ul>"},{"location":"07frameworks.html#separando-codigo","title":"Separando c\u00f3digo","text":"<p>Veamos un ejemplo de c\u00f3mo hacer uso del poder de Laravel para crear plantillas y no repetir c\u00f3digo.</p> <p>Supongamos que tenemos ciertas estructuras HTML repetidas como puede ser una cabecera <code>header</code>, un men\u00fa de navegaci\u00f3n <code>nav</code> y un par de secciones que hacen uso de este mismo c\u00f3digo.</p> <p>Supongamos que tenemos 2 apartados en la web:</p> <ul> <li><code>Blog</code></li> <li><code>Fotos</code></li> </ul> <p>Primero de todo tendremos que generar un archivo que haga de <code>plantilla</code> de nuestro sitio web.</p> <p>Para ello creamos el archivo <code>plantilla.blade.php</code> dentro de nuestro directorio de plantillas <code>resources/views</code>.</p> <p>Dicho archivo va a contener el t\u00edpico c\u00f3digo de una p\u00e1gina simple de HTML y en el body a\u00f1adiremos nuestros contenido est\u00e1tico y din\u00e1mico.</p> <pre><code>&lt;body&gt;\n    &lt;!-- CONTENIDO EST\u00c1TICO PARA TODAS LAS SECCIONES --&gt;\n    &lt;h1&gt;Bienvenid@s a Laravel&lt;/h1&gt;\n    &lt;hr&gt;\n\n    &lt;!-- MEN\u00da --&gt;\n    &lt;nav&gt;\n        &lt;a href={{ route('noticias') }}&gt;Blog&lt;/a&gt; | \n        &lt;a href={{ route('galeria') }}&gt;Fotos&lt;/a&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- CONTENIDO DIN\u00c1MICO EN FUNCI\u00d3N DE LA SECCI\u00d3N QUE SE VISITA --&gt;\n    &lt;header&gt;\n        @yield('apartado')\n    &lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Cada secci\u00f3n que haga uso de esta plantilla contendr\u00e1 el texto est\u00e1tico <code>Bienvenid@s a Laravel</code> seguido de un men\u00fa de navegaci\u00f3n con enlaces a cada una de las secciones y el contenido din\u00e1mico de cada secci\u00f3n.</p> <p>Ahora crearemos los archivos din\u00e1micos de cada una de las secciones, en nuestro caso <code>blog.blade.php</code> y <code>fotos.blade.php</code></p> <pre><code>&lt;?php\n\n// blog.blade.php\n\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en BLOG&lt;/h2&gt;\n@endsection\n</code></pre> <p>Importamos el contenido de <code>plantilla</code> bajo la directiva <code>@extends</code> para que cargue los elementos est\u00e1ticos que hemos declarado y con la directiva <code>@section</code> y <code>@endsection</code> definimos el bloque de c\u00f3digo din\u00e1mico, en funci\u00f3n de la secci\u00f3n que estemos visitando.</p> <p>Ahora casi lo mismo para la secci\u00f3n de <code>fotos</code></p> <pre><code>&lt;?php\n\n// fotos.blade.html\n\n@extends('plantilla')\n\n@section('apartado')\n  &lt;h2&gt;Est\u00e1s en FOTOS&lt;/h2&gt;\n@endsection\n</code></pre> <p>El \u00faltimo paso que nos queda es configurar el archivo de rutas <code>routes/web.php</code></p> <pre><code>&lt;?php\n\n// web.php\n\nRoute::view('blog', 'blog') -&gt; name('noticias');\nRoute::view('fotos', 'fotos') -&gt; name('galeria');\n</code></pre> <p>De esta manera podremos hacer uso del men\u00fa de navegaci\u00f3n que hemos puesto en nuestra plantilla y gracias a los alias <code>noticias</code> y <code>galeria</code>, la URL ser\u00e1 m\u00e1s amigable.</p>"},{"location":"07frameworks.html#estructuras-de-control","title":"Estructuras de control","text":"<p>Como en todo buen lenguaje de programaci\u00f3n, en Laravel tambi\u00e9n tenemos estructuras de control.</p> <p>En Blade (plantillas de Laravel) siempre que iniciemos un bloque de estructura de control DEBEMOS cerrarla</p> <ul> <li><code>@foreach</code> ~ <code>@endforeach</code> lo usamos para recorrer arrays</li> <li><code>@if</code> ~ <code>@endif</code> para comprobar condiciones l\u00f3gicas</li> <li><code>@switch</code> ~ <code>@endswitch</code> en funci\u00f3n del valor de una variable ejecutar un c\u00f3digo</li> <li><code>@case</code> define la casu\u00edstica del switch</li> <li><code>@break</code> rompe la ejecuci\u00f3n del c\u00f3digo en curso</li> <li><code>@default</code> si ninguna casu\u00edstica se cumple</li> </ul> <pre><code>&lt;?php\n\n$equipo = ['Mar\u00eda', 'Alfredo', 'William', 'Ver\u00f3nica'];\n\n@foreach ($equipo as $nombre)\n  &lt;p&gt; {{ $nombre }} &lt;/p&gt;\n@endforeach\n</code></pre> <p>Acordaros que podemos pasar variables a trav\u00e9s de las rutas como si fueran par\u00e1metros. Pero en este caso, vamos a ver otra directiva m\u00e1s; el uso de <code>@compact</code>.</p> <pre><code>&lt;?php\n\n// Uso de @compact\n$equipo = ['Mar\u00eda', 'Alfredo', 'William', 'Ver\u00f3nica'];\n\n// Route::view('nosotros', ['equipo' =&gt; 'equipo']);\nRoute::view('nosotros', @compact('equipo'));\n</code></pre>"},{"location":"07frameworks.html#controladores","title":"Controladores","text":"<p>Los controladores son el lugar perfecto para definir la l\u00f3gica de negocio de nuestra aplicaci\u00f3n o sitio web.</p> <p>Hace de intermediario entre la vista (lo que vemos con nuestro navegador o cliente) y el servidor donde la app est\u00e1 alojada.</p> <p>Por defecto, los controladores se guardan en una carpeta espec\u00edfica situada en <code>app/Http/Controllers</code> y tienen extensi\u00f3n <code>.php</code>.</p> <p>Para crear un controlador nuevo debemos hacer uso de nuestro querido aut\u00f3mata <code>artisan</code> donde le diremos que cree un controlador con el nombre que nosotros queramos.</p> <p>Abrimos la consola y nos situamos en la ra\u00edz de nuestro proyecto</p> <p><pre><code>php artisan make:controller PagesController\n</code></pre> Si todo ha salido bien, recibiremos un mensaje por consola con que todo ha ido bien y podremos comprobar que, efectivamente se ha creado el archivo <code>PagesController.php</code> con una estructura b\u00e1sica de controlador, dentro de la carpeta <code>Controllers</code> que hemos descrito anteriormente.</p> <p>Ahora podemos modificar nuestro archivo de rutas <code>web.pbp</code> para dejarlo limpio de l\u00f3gica y trasladar \u00e9sta a nuestro nuevo controlador.</p> <p>La idea de \u00e9sto es dejar el archivo <code>web.php</code> tan limpio como podamos para que, de un vistazo, se entienda todo perfectamente.</p> <p>RECUERDA que s\u00f3lo movemos la l\u00f3gica, mientras que las cl\u00e1usulas como <code>where</code> y <code>name</code> las seguimos dejando en el archivo de rutas <code>web.php</code></p> <p>Veamos c\u00f3mo quedar\u00eda un refactor del archivo de rutas utilizando un <code>Controller</code> como el que acabamos de crear</p> <p>Ahora nos quedar\u00eda de la siguiente manera</p> <pre><code>&lt;?php\n\n// web.php (v2.0) \u2592\u2592\u2592\u2592 Refactorizado\n\nuse App\\Http\\Controllers\\PagesController;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/', [ PagesController::class, 'inicio' ]);\nRoute::get('datos', [ PagesController::class, 'datos' ]);\nRoute::get('cliente/{id?}', [ PagesController::class, 'cliente' ]) -&gt; where('id', '[0-9]+');\nRoute::get('nosotros/{nosotros?}', [ PagesController::class, 'nosotros']) -&gt; name('nosotros');\n</code></pre> <p>y en nuestro archivo controlador lo dejar\u00edamos de la siguiente manera</p> <pre><code>&lt;?php\n\n// PagesController.php\n\nnamespace App\\Http\\Controllers;\n\nclass PagesController extends Controller\n{\n    public function inicio() { return view('welcome'); }\n\n    public function datos() { \n        return view('usuarios', ['id' =&gt; 56]);\n    }\n\n    public function cliente($id = 1) {\n        return ('Cliente con el id: ' . $id);\n    }\n\n    public function nosotros($nombre = null) {\n        $equipo = [\n            'Paco',\n            'Enrique',\n            'Maria',\n            'Veronica'\n        ];\n\n        return view('nosotros', @compact('equipo', 'nombre'));\n    }\n}\n</code></pre>"},{"location":"07frameworks.html#migraciones-eloquent","title":"Migraciones &amp; Eloquent","text":"<p>Con las migraciones vamos a gestionar la base de datos de nuestro sitio web; tanto crear nuevas BBDD como editarlas desde Laravel.</p> <p>Las migraciones de un sitio hecho con Laravel se alojan en la ruta <code>database/migrations</code> y tienen extensi\u00f3n <code>.php</code>.</p> <p>Si te fijas, nada m\u00e1s instalar Laravel con la imagen de Bitnami, se han creado varios archivos de migraciones que podemos usar, pero de momento los dejamos ah\u00ed y NO LOS BORRAMOS porque son muy \u00fatiles.</p>"},{"location":"07frameworks.html#archivos-env","title":"Archivos .env","text":"<p>Es de uso com\u00fan trabajr con archivos de entorno llamados tambi\u00e9n <code>archivos .env</code>. Normalmente, eun unproyecto real puedes encontrarte con varios archivos de este tipo en funci\u00f3n del despliegue que se quiera hacer; como por ejemplo:</p> <ul> <li><code>test.env</code> config. para desplegar en entorno seguro de pruebas</li> <li><code>release.env</code> config. para desplegar cambios de versi\u00f3n que se env\u00eda a los beta testers</li> <li><code>production.env</code>config. para desplegar el c\u00f3digo ya probado al resto del mundo.</li> </ul> <p>En nuestro caso, como no vamos a desplegar nada, s\u00f3lo vamos a usar un \u00fanico archivo <code>.env</code> y en cuesti\u00f3n de las migraciones vamos a fijarnos a partir de la l\u00ednea 11 donde dice:</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=blog\nDB_USERNAME=root\nDB_PASSWORD=\n</code></pre> <p>En este archivo debemos configurar los datos de nuestro servidor MySQL y rellenarlo con la informaci\u00f3n correspondiente a nuestra base de datos ya creada</p> <p>Una vez tengamos \u00e9sto, lo que nos queda es ejecutar el comando de las migraciones a trav\u00e9s del CLI <code>artisan</code></p> <pre><code>php artisan migrate\n</code></pre> <p>Si todo ha salido bien obtendremos el siguiente resultado donde podremos observar que todas las migraciones se han insertado correctamente en la base de datos.</p> <p>Si nos vamos al cliente que utilicemos para manejar la base de datos (phpMyAdmin por ejemplo) veremos que en nuestra base de datos se han creado todas las tablas de la migraci\u00f3n que hemos ejecutado y adem\u00e1s una tabla que se llama migrations.</p> <p>La tabla <code>migrations</code> es simplemente un registro de todas las migraciones llevadas a cabo. Adem\u00e1s, podemos hacer un rollback en caso de que queramos reestablecer nuestra base de datos.</p> <pre><code>php artisan migrate:rollback\n</code></pre> <p>O si preferimos hacer un reset para dejarla limpia</p> <pre><code>php artisan migrate:reset\n</code></pre>"},{"location":"07frameworks.html#modelos","title":"Modelos","text":"<p>Gracias a Eloquent y su integraci\u00f3n con Laravel, podremos crear modelos de datos de una manera automatizada a trav\u00e9s de <code>artisan</code></p> <p>Ahora que ya sabemos manejar las migraciones es hora de crear nuestras propias migraciones pero a trav\u00e9s de Eloquent.</p> <p>A trav\u00e9s de la instrucci\u00f3n <code>make:model</code> creamos un nuevo modelo de datos, a continuaci\u00f3n ponemos el nombre siempre empezando en May\u00fasucla y en SINGULAR y pasamos el par\u00e1metro relacionado con las migraciones <code>-m</code>.</p> <pre><code>php artisan make:model Nota -m\n</code></pre> <p>Si todo ha salido bien, veremos en nuestro directorio de migraciones <code>database/migrations</code> un nuevo archivo que se llama <code>2022_01_07_81237_create_notas_table.php</code>.</p> <p>El siguiente paso es ver nuestro archivo de migraciones y editarlo para que contenga las tablas que nosotros queramos. Si lo visualizamos tan s\u00f3lo tendr\u00e1 la estructura b\u00e1sica con un par de tablas. Vamos a a\u00f1adir un par de tablas m\u00e1s.</p> <p><pre><code>&lt;?php\n\nSchema::create('notas', function (Blueprint $table) {\n  $table-&gt;id();\n  $table-&gt;timestamps();\n\n  $table-&gt;string('nombre');\n  $table-&gt;text('descripcion');\n});\n</code></pre> En esta <code>Schema</code> podemos poner todas las tablas que nosotros queramos y establecer el tipo de dato para cada una de ellas, as\u00ed como el nombre.</p> <p>Una vez que estamos satisfechos con nuestro esquema debemos volver a ejecutar el c\u00f3digo de migraci\u00f3n a trav\u00e9s de artisan para que se introduzca esta nueva informaci\u00f3n en la base de datos.</p> <p>Para ver todos los tipos de datos que maneja Eloquent puedes visitar la documentaci\u00f3n oficial.</p>"},{"location":"07frameworks.html#recuperando-datos","title":"Recuperando datos","text":"<p>Ya tenemos nuestra base de datos creada con nuestras tablas migradas, ahora s\u00f3lo falta rellenar esas tablas con datos para poder pintarlos en nuestro c\u00f3digo HTML.</p> <p>Rellenamos las tablas a trav\u00e9s del cliente de MySQL que m\u00e1s nos guste:</p> <ul> <li>PHP MyAdmin</li> <li>MySQL Workbench</li> <li>HeidiSQL *</li> <li>SquirrelSQL</li> </ul> <p>Ahora tendremos que irnos a una vista ya creada o creamos una nueva y solicitamos los datos desde el HTML.</p> <p>\u00bfNos acordamos del <code>PagesController</code>? pues hacer uso de su magia junto con las rutas que creamos en <code>web.php</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 web.php \n\nRoute::get('notas', [ PagesController::class, 'notas' ]);\n</code></pre> <p>Antes de intentar entrar, debemos configurar nuestro controlador de la siguiente manera:</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php \n\npublic function notas() {\n  $notas = Nota::all();\n\n  return view('notas', compact('notas'));\n}\n</code></pre> <p>El \u00faltimo paso ser\u00eda, crear la vista con la tabla que pinte los datos a trav\u00e9s de la variable que le pasamos por par\u00e1metro en la ruta que acabamos de describir.</p> <p><pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 notas.blade.php \n\n&lt;h1&gt;Notas desde base de datos&lt;/h1&gt;\n\n&lt;table border=\"1\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Nombre&lt;/th&gt;\n            &lt;th&gt;Descripci\u00f3n&lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n\n    @foreach ($notas as $nota)\n        &lt;tr&gt;\n            &lt;td&gt;{{$nota -&gt; nombre}}&lt;/td&gt;\n            &lt;td&gt;{{$nota -&gt; descripcion}}&lt;/td&gt;\n        &lt;/tr&gt;\n    @endforeach\n&lt;/table&gt;\n</code></pre> Hay que fijarse bien en los nombres de las columnas que tienen nuestras bases de datos, es justo lo que va despu\u00e9s de <code>-&gt;</code> y siempre rodeado por los s\u00edmbolos <code>{{  }}</code> ya que estamos en un archivo de plantilla.</p> <p>\u00bfQu\u00e9 pasar\u00eda si s\u00f3lo queremos acceder a un \u00fanico elemento? como si hici\u00e9semos un <code>SELECT * from usuarios where id = 1</code></p> <p>Para \u00e9so, tenemos una instrucci\u00f3n espec\u00edfica en Eloquent que nos soluciona el problema. En este caso usaremos la instrucci\u00f3n <code>findOrFail</code> y como buenos usuarios de Laravel, lo utilizaremos dentro del controlador.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php \n\npublic function detalle($id) {\n  $nota = Nota::findOrFail($id);\n\n  return view('notas.detalle', compact('nota'));\n}\n</code></pre> <p>Hay que acordarse que debemos configurar la ruta en nuestro archivo de rutas.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 web.php \n\nRoute::get('notas/{id?}', [ PagesController::class, 'detalle' ]) -&gt; name('notas.detalle');\n</code></pre> <p>Y por \u00faltimo, debemos crear la plantilla, pero como es un archivo de detalle o que est\u00e1 relacionado con otra plantilla ya creada, podemos crear una carpeta con el nombre de la plantilla y dentro, el archivo de plantilla en cuesti\u00f3n.</p> <p>De tal manera que quedar\u00eda as\u00ed <code>resources/views/notas/detalle.blade.php</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 detalle.blade.php\n\n@extends('plantilla')\n\n@section('apartado')\n    &lt;h1&gt;Detalle de la nota&lt;/h1&gt;\n\n    &lt;h3&gt;ID: {{ $nota -&gt; id }}&lt;/h3&gt;\n    &lt;h3&gt;Nombre: {{ $nota -&gt; nombre }}&lt;/h3&gt;\n    &lt;h3&gt;Descripci\u00f3n: {{ $nota -&gt; descripcion }}&lt;/h3&gt;    \n@endsection\n</code></pre>"},{"location":"07frameworks.html#modificar-tablas-sin-perder-datos","title":"Modificar tablas sin perder datos","text":"<p>Uno de los dilemas que tenemos a la hora de manejar las bases de datos con Laravel y Eloquent, es que a veces cometemos errores y queremos introducir una nueva columna dentro de nuestra tabla o modificar una de esas columnas SIN PERDER LOS DATOS DE LA BASE DE DATOS.</p> <p>Imaginemos que en nuestra tabla <code>notas</code> queremos agregar una columna con el nombre <code>autor</code>.</p> <p>Lo primero de todo es crear una nueva migraci\u00f3n para realizar este cambio. Para ello, haremos uso de nuestro querido <code>artisan</code> y debemos crear el nombre de esta migraci\u00f3n con la siguiente f\u00f3rmula <code>add_fields_to_</code> seguidamente del nombre de la tabla que queremos modificar.</p> <pre><code>php artisan migrate add_fields_to_nota\n</code></pre> <p>Seguidamente, nos metemos en el archivo de la migraci\u00f3n que acabamos de crear y en el apartado up() debemos poner el cambio que queremos realizar y en la secci\u00f3n down() debemos hacer lo mismo pero tenemos que decirle a Eloquent que la elimine \u00bfpor qu\u00e9? para en caso de hacer migrate rollback, se cargue este nuevo campo que hemos creado.</p> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::table('notas', function (Blueprint $table) {\n      $table -&gt; string('autor');\n  });\n}\n\npublic function down()\n{\n  Schema::table('notas', function (Blueprint $table) {\n      $table -&gt; dropColumn('autor');\n  });\n}\n</code></pre>"},{"location":"07frameworks.html#formularios","title":"Formularios","text":"<p>Ahora que ya sabemos c\u00f3mo cargar de una base de datos, vamos a ver c\u00f3mo insertarlos con Laravel y sin escribir ni una sola l\u00ednea de SQL.</p> <p>Gracias al m\u00e9todo <code>save()</code> de Laravel podremos guardar datos que provengan de un formulario desde nuestras plantillas. Para ello, lo primero que necesitamos lo siguiente:</p> <ul> <li><code>formulario HTML</code> que recoja los datos que el usuario introduce</li> <li>Una <code>ruta</code> que sea la encargada de recibir los datos del formulario</li> <li>M\u00e9todo <code>POST</code> para enviar los datos al servidor</li> <li>Un m\u00e9todo en nuestro <code>controlador</code> que procese los datos y los guarde a trav\u00e9s de <code>save()</code></li> <li>La cl\u00e1usula de seguridad <code>@csrf</code> para evitar ataques desde otros sitios</li> </ul> <p>As\u00ed pues, empecemos por el formulario</p> <pre><code>&lt;form action=\"{{ route('notas.crear') }}\" method=\"POST\"&gt;\n    @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}}\n\n    &lt;input type=\"text\" name=\"nombre\" placeholder=\"Nombre de la nota\" class=\"form-control mb-2\" autofocus&gt;\n    &lt;input type=\"text\" name=\"descripcion\" placeholder=\"Descripci\u00f3n de la nota\" class=\"form-control mb-2\"&gt;\n\n    &lt;button class=\"btn btn-primary btn-block\" type=\"submit\"&gt;\n      Crear nueva nota\n    &lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Como vemos, creamos 2 inputs relacionados con nuestras columnas dentro de la tabla, en este caso <code>nombre</code> y <code>descripci\u00f3n</code></p> <p>El <code>action</code> del formulario debe apuntar a una nueva ruta que vayamos a crear y donde enviemos los datos mediante <code>POST</code>.</p> <p>Ahora crearemos la ruta en nuestro archivo de rutas <code>web.php</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 web.php\n\nRoute::post('notas', [ PagesController::class, 'crear' ]) -&gt; name('notas.crear');\n</code></pre> <p>Si nos fijamos, ya no estamos haciendo uso del <code>get</code>sino del m\u00e9todo <code>post</code> y como son m\u00e9todos diferentes, podemos nombrar la ruta de la misma manera que en <code>get</code> ya que no habr\u00e1 conflicto.</p> <p>Por otro lado, necesitamos invocar nuestro <code>PagesController</code>famoso y decirle que vamos a utilizar el m\u00e9todo <code>crear</code> que bueno, todav\u00eda no existe pero que vamos a crear a contnuaci\u00f3n. No olvidemos crear un alias para poder vincularlo al <code>action</code>del formulario SUPER IMPORTANTE.</p> <p>Para terminar, editaremos nuetro archivo <code>PagesController.php</code> para que el controlador que estamos usando tenga el m\u00e9todo que hemos nombrado previamente.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php\n\nuse App\\Models\\Nota;\nuse Illuminate\\Http\\Request;\n\npublic function crear(Request $request) {\n    $notaNueva = new Nota;\n\n    $notaNueva -&gt; nombre = $request -&gt; nombre;\n    $notaNueva -&gt; descripcion = $request -&gt; descripcion;\n\n    $notaNueva -&gt; save();\n\n    return back() -&gt; with('mensaje', 'Nota agregada exit\u00f3samente');\n}\n</code></pre> <p>Nuestro m\u00e9todo <code>crear</code> va a recibir un objeto llamado <code>$request</code> (el cual podemos cambiarle el nombre perfectamente) de tipo <code>Request</code> por lo que DEBEMOS IMPORTAR Request para poder utilizar dicha clase de Laravel.</p> <p>Dentro del m\u00e9todo <code>crear</code> que acabamos de escribir, debemos hacer uso del modelo <code>Nota</code> que ya creamos en otros ejemplos e instanciarla a traves de una variable, en nuestro caso <code>$notaNueva</code>.</p> <p>De esta manera, podremos aceder a los m\u00e9todos y propiedades de la misma, por eso podemos utilizar <code>nombre</code> y <code>descripcion</code>.</p> <p>As\u00ed mismo, la variable <code>$request</code> est\u00e1 formada por los mismos nombres de <code>input</code> que hemos puesto en el formulario de la plantilla, si os acord\u00e1is eran <code>name=\"nombre\"</code> y <code>name=\"descripcion\"</code>.</p> <p>Finalmente usamos el m\u00e9todo <code>save()</code> para guardar estos nuevos datos en la base de datos y retornamos a la p\u00e1gina del formulario con el m\u00e9todo <code>back()</code> a\u00f1adiendo un mensaje con <code>with()</code>.</p> <p>Pero \u00bfd\u00f3nde va a salir este mensaje? -- lo tenemos que declarar en nuestra plantilla</p> <pre><code>@if (session('mensaje'))\n  &lt;div class=\"mensaje-nota-creada\"&gt;\n      {{ session('mensaje') }}\n  &lt;/div&gt;\n@endif\n</code></pre>"},{"location":"07frameworks.html#validaciones","title":"Validaciones","text":"<p>Laravel nos proporciona herramientas para poder validar los datos que el usuario introduce en los campos del formulario.</p> <p>Adem\u00e1s de poder hacerlo con la etiqueta <code>required</code> de HTML5, debemos validar los datos a trav\u00e9s del Framework.</p> <p>Para ello, necesitamos modificar varios elementos:</p> <ul> <li>En primer lugar, nuestro archivo <code>controller</code></li> <li>En segundo lugar, nuestra <code>plantilla</code> que carga el formulario</li> </ul> <p>Empecemos con el controlador. A trav\u00e9s del m\u00e9todo <code>validate()</code> le decimos a Eloquent qu\u00e9 campos son requeridos para poder enviar el formulario. Utilizaremos para ello un array asociativo con el nombre del input y la palabra reservada <code>required</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php\n\n$request -&gt; validate([\n  'nombre' =&gt; 'required',\n  'descripcion' =&gt; 'required'\n]);\n</code></pre> <p>Seguidamente nos moveremos a la plantilla donde est\u00e9 el formulario y a trav\u00e9s de la directiva <code>@error</code> crearemos un bloque html con nuestro mensaje de error por cada uno de los inputs requeridos.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 notas.blade.php\n\n@error('nombre')\n    &lt;div class=\"alert alert-danger\"&gt;\n      No olvides rellenar el nombre\n    &lt;/div&gt;\n@enderror\n</code></pre> <p>Pero \u00bfqu\u00e9 pasa cuando ha habido un error y nos muestra el mensaje que hemos escrito? Si te fijas, los campos que hab\u00edas rellenado perder\u00e1n la informaci\u00f3n, pero con Laravel podemos persistirlos sin hacer que el usuario vuelva a introducirlos.</p> <p>Para poder persistir los datos una vez enviados pero con alg\u00fan error de campo requerido, utilizaremos la directiva <code>old()</code> como value del input dentro de nuestro formulario y le pasaremos el nombre del input declarado en la etiqueta <code>name</code>.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 notas.blade.php\n\n&lt;input\n  type=\"text\"\n  name=\"nombre\"\n  value=\"{{ old('nombre') }}\"\n  class=\"form-control mb-2\"\n  placeholder=\"Nombre de la nota\"\n  autofocus\n&gt;\n</code></pre>"},{"location":"07frameworks.html#editando-registros","title":"Editando registros","text":"<p>Despu\u00e9s de tener campos en la base de datos, lo interesante ser\u00eda poder editarlos a trav\u00e9s de un formulario.</p> <p>Laravel nos proporciona las herramientas necesarias para ello; veamos pues lo que necesitamos para poder realizar el cambio a trav\u00e9s de la directiva <code>put()</code>.</p> <p>Para poder hacer el cambio de resgistros necesitamos lo siguiente:</p> <ul> <li>Un enlace para redirigir a la p\u00e1gina de editar, pasando el id del elemento en cuesti\u00f3n</li> <li>Una nueva <code>ruta</code>que apunte a nuestra plantilla de editar</li> <li>Una <code>plantilla</code> para poder editar con un formulario que reciba los datos a editar</li> <li>Una nueva funci\u00f3n dentro de nuestro <code>controlador</code> para poder manejar los datos ya introducidos</li> <li>Una nueva <code>ruta</code> que utilice el m\u00e9todo <code>put()</code> para poder actualizar los datos</li> <li>Un nuevo m\u00e9todo dentro de nuestro <code>controlador</code>para actualizar los datos nuevos introducidos</li> </ul> <p><pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 notas.blade.php\n\n&lt;a href=\"{{ route('notas.editar', $nota) }}\" class=\"btn btn-warning btn-sm\"&gt;\n  Editar\n&lt;/a&gt;\n</code></pre> Ahora creamos la ruta</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 wep.php\n\nRoute::get('editar/{id}', [ PagesController::class, 'editar' ]) -&gt; name('notas.editar');\nRoute::put('editar/{id}', [ PagesController::class, 'actualizar' ]) -&gt; name('notas.actualizar');\n</code></pre> <p>Ahora necesitamos crear una nueva plantilla <code>resources/views/notas/editar.blade.php</code></p> <p><pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 editar.blade.php\n@extends('plantilla')\n\n@section('apartado')\n&lt;h2&gt;Editando la nota {{ $nota -&gt; id }}&lt;/h2&gt;\n\n@if (session('mensaje'))\n  &lt;div class=\"alert alert-success\"&gt;{{ session('mensaje')}}&lt;/div&gt;\n@endif\n\n&lt;form action=\"{{ route('notas.actualizar', $nota -&gt; id) }}\" method=\"POST\"&gt;\n  @method('PUT') {{-- Necesitamos cambiar al m\u00e9todo PUT para editar --}}\n  @csrf {{-- Cl\u00e1usula para obtener un token de formulario al enviarlo --}}\n\n  @error('nombre')\n      &lt;div class=\"alert alert-danger\"&gt;\n          El nombre es obligatorio\n      &lt;/div&gt;\n  @enderror\n  @error('descripcion')\n      &lt;div class=\"alert alert-danger\"&gt;\n          La descripci\u00f3n es obligatoria\n      &lt;/div&gt;\n  @enderror\n\n  &lt;input\n      type=\"text\"\n      name=\"nombre\"\n      class=\"form-control mb-2\"\n      value=\"{{ $nota -&gt; nombre }}\"\n      placeholder=\"Nombre de la nota\"\n      autofocus\n  &gt;\n  &lt;input\n      type=\"text\"\n      name=\"descripcion\"\n      placeholder=\"Descripci\u00f3n de la nota\"\n      class=\"form-control mb-2\"\n      value=\"{{ $nota -&gt; descripcion }}\"\n  &gt;\n\n  &lt;button class=\"btn btn-primary btn-block\" type=\"submit\"&gt;Guardar cambios&lt;/button&gt;\n&lt;/form&gt;\n@endsection\n</code></pre> Y por \u00faltimo, modificamos nuestro <code>PagesController</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php\n\npublic function editar($id) {\n  $nota = Nota::findOrFail($id);\n\n  return view('notas.editar', compact('nota'));\n}\n\npublic function actualizar(Request $request, $id) {\n  $request -&gt; validate([\n      'nombre' =&gt; 'required',\n      'descripcion' =&gt; 'required'\n  ]);\n\n  $notaActualizar = Nota::findOrFail($id);\n\n  $notaActualizar -&gt; nombre = $request -&gt; nombre;\n  $notaActualizar -&gt; descripcion = $request -&gt; descripcion;\n\n  $notaActualizar -&gt; save();\n\n  return back() -&gt; with('mensaje', 'Nota actualizada');\n}\n</code></pre>"},{"location":"07frameworks.html#eliminando-registros","title":"Eliminando registros","text":"<p>A la hora de eliminar un registro nuevo, no necesitamos crear una plantilla nueva ya que podemos mandar la instrucci\u00f3n directamente a trav\u00e9s de otro formulario.</p> <p>Por lo tanto, para eliminar un registro de la base de datos utilizaremos lo siguiente.</p> <ul> <li>Un formulario b\u00e1sico con un \u00fanico bot\u00f3n de eliminar</li> <li>Usaremos el m\u00e9todo <code>DELETE</code> para sobreescribir el m\u00e9todo del formulario HTML</li> <li>Una <code>ruta</code> nueva para controlar el <code>action</code> de este nuevo formulario</li> <li>Un nuevo m\u00e9todo dentro de nuestro <code>Controlador</code> que lleve la l\u00f3gica para borrar el registro</li> </ul> <p>Vamos a ver c\u00f3mo meter ese formulario dentro de nuestro listado de notas</p> <p><pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 notas.blade.php\n\n&lt;form action=\"{{ route('notas.eliminar', $nota) }}\" method=\"POST\" class=\"d-inline\"&gt;\n  @method('DELETE')\n  @csrf\n\n  &lt;button class=\"btn btn-danger btn-sm\" type=\"submit\"&gt;Eliminar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Ahora que ya tenemos montado el formulario en nuestra plantilla, pasemos a crear la ruta que hemos colocado en el <code>action</code>del formulario para borrar elementos.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 web.php\n\nRoute::delete('eliminar/{id}', [ PagesController::class, 'eliminar' ]) -&gt; name('notas.eliminar');\n</code></pre> <p>El \u00faltimo paso que nos queda es modificar el <code>PagesController</code></p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php\n\npublic function eliminar($id) {\n  $notaEliminar = Nota::findOrFail($id);\n  $notaEliminar -&gt; delete();\n\n  return back() -&gt; with('mensaje', 'Nota Eliminada');\n}\n</code></pre> <p>Si todo ha salido bien, habremos creado un sitio en Laravel y Eloquent que es capaz de hacer un CRUD validando campos en formularios e insertando datos reales en una base de datos.</p>"},{"location":"07frameworks.html#paginacion","title":"Paginaci\u00f3n","text":"<p>Para a\u00f1adir paginaci\u00f3n a nuestros resultados, Eloquent tiene un m\u00e9todo que se llama <code>paginate()</code> donde le pasamos un n\u00famero entero como par\u00e1metro para indicarle el n\u00famero de resultados que queremos por p\u00e1gina.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 PagesController.php\n\npublic function notas() {\n  // $notas = Nota::all();\n  $notas = Nota::paginate(5);\n\n  return view('notas', compact('notas'));\n}\n</code></pre> <p>Ahora veremos ciertos elementos HTML que se han generado en nuestra vista, \u00e9sto es porque Laravel hace uso de una librer\u00eda de paginaci\u00f3n situada en la carpeta <code>vendor/laravel/framework/src/illuminate/Pagination</code></p> <p>Si os met\u00e9is en el directorio y abr\u00eds el archivo <code>tailwind.blade.php</code> ver\u00e9is la estructura HTML que os sale en la vista. Pod\u00e9is modificar este archivo a vuestro antojo, pero es recomendable guardarse una copia del mismo.</p> <p>Existe otra dependencia en <code>resources/lang/en/pagination.php</code> donde encontrar\u00e1s el idioma para la paginaci\u00f3n.</p>"},{"location":"07frameworks.html#autenticacion","title":"Autenticaci\u00f3n","text":"<p>Para la utenticaci\u00f3n de usuarios necesitamos instalar unas cuantas dependencias ya preparadas para ello.</p> <p>No es necesarios crear un proyecto nuevo pero nosotros vamos a hacerlo para tener uno con autenticaci\u00f3n y otro no, el que ya hicimos al principio.</p> <p>Primero de todo, vamos a crear un nuevo proyecto en Laravel que se llame <code>notas_auth</code> y nos metemos dentro de la carpeta del mismo cuando el script haya terminado.</p> <p>Dentro de la carpeta <code>notas_auth</code> lanzamos los siguientes comandos.</p> <pre><code>composer require laravel/ui\nphp artisan ui vue --auth\n</code></pre> <p>Para terminar, lanzaremos el comando <code>migrate</code> que ya conocemos... SI EST\u00c1S WINDOWS fuera de la imagen de Docker (utilizando xampp o parecidos) debes crear una nueva base de datos y posteriormente modificiar el archivo <code>.env</code> poniendo el nombre de esa base de datos que acabas de crear.</p> <pre><code>php artisan migrate\n</code></pre> <p>Si todo ha salido bien, podr\u00e1s ver en la carpeta <code>resources/views</code> una carpeta que se llama auth y un controlador nuevo que llama <code>HomeController</code></p>"},{"location":"07frameworks.html#restringir-una-ruta","title":"Restringir una ruta","text":"<p>Si nos fijamos, en el nuevo controlador que se ha creado <code>HomeController</code> podemos ver unas l\u00edneas al principio del archivo que son las que determinan si la ruta est\u00e1 restringida a usuarios registrados y logueados.</p> <pre><code>&lt;?php\npublic function __construct()\n{\n    $this-&gt;middleware('auth');\n}\n</code></pre> <p>Mediante el uso del <code>middleware</code> llamado <code>auth</code> establecemos que todas las rutas que hagan uso de este controlador deban pasar por el login para mostrar el contenido.</p> <p>Por lo tanto, en nuestros proyectos es recomendable utilizar diferentes controladores para diferentes vistas; las que est\u00e9n reestringidas por el login y las que no.</p>"},{"location":"07frameworks.html#datos-del-usuario","title":"Datos del usuario","text":"<p>Siempre que queramos acceder a cualquier dato del usuario logueado, utilizaremos el m\u00e9todo <code>auth()</code> para sacar por pantalla la informaci\u00f3n o para utilizar l\u00f3gica a la hora de guardar datos en la base de datos en funci\u00f3n de un usuario, un email o el campo que sea.</p> <p>Imaginemos que tenemos una ruta donde accedemos a dicha informaci\u00f3n</p> <pre><code>&lt;?php\n\npublic function notas() {\n  return auth()-&gt;user();\n\n  // return auth()-&gt;user() -&gt; name;\n  // return auth()-&gt;user() -&gt; email;\n  // ...\n}\n</code></pre> <p>Si visitamos esta ruta con nuestro login y password, nos aparecer\u00e1 por pantalla toda la informaci\u00f3n de nuestro <code>user</code> a excepci\u00f3n de la contrase\u00f1a y, aunque as\u00ed fuera porque se lo forzamos, \u00e9sta aparecer\u00e1 encriptada.</p>"},{"location":"07frameworks.html#relaciones-con-eloquent","title":"Relaciones con Eloquent","text":"<p>A trav\u00e9s de Eloquent vamos a poder gestionar las relaciones entre nuestras tablas de la base de datos de una manera muy sencilla y sin sentencias SQL.</p>"},{"location":"07frameworks.html#uno-a-uno-1-a-1","title":"Uno a uno (1 a 1)","text":"<p>Para crear este tipo de relaciones en Eloquent y Laravel, debemos tener creadas las tablas que vayamos a relacionar y establecer la relaci\u00f3n entre ellas a trav\u00e9s del m\u00e9todo <code>hasOne</code>.</p> <p>Supongamos que tenemos una tablas <code>usuario</code> que est\u00e1 relacionada con la tabla <code>telefono</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n  /**\n   * Obtener el Tel\u00e9fono asocioado con el Usuario\n   */\n  public function telefono()\n  {\n      return $this -&gt; hasOne(Telefono::class);\n  }\n}\n</code></pre> <p>Una vez hecho \u00e9sto, para poder recuperar el dato relacionado, debemos utilizar las propiedades din\u00e1micas de Eloquent. Con estas propiedades din\u00e1micas podremos obtener dicho dato.</p> <pre><code>&lt;?php\n\n$telefono = Usuario::find(1)-&gt;telefono;\n</code></pre> <p>En este caso, Eloquent asume que en <code>Usuario</code> existe la clave ajena <code>usuario_id</code> pero \u00bfqu\u00e9 pasa si tenemos otro nombre? pues se lo pasamos como par\u00e1metro.</p> <pre><code>&lt;?php\n\nreturn $this-&gt;hasOne(Telefono::class, 'clave_ajena');\n</code></pre>"},{"location":"07frameworks.html#uno-a-uno-inversa","title":"Uno a Uno INVERSA","text":"<p>Ahora que podemos acceder al modelo tel\u00e9fono desde el modelo usuario, vamos a ver c\u00f3mo hacerlo de manera inversa, es decir, c\u00f3mo acceder desde el m\u00f3delo <code>usuario</code> desdel el modelo <code>telefono</code> gracias al m\u00e9todo <code>belongsTo()</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Telefono extends Model\n{\n  public function usuario()\n  {\n      return $this -&gt; belongsTo(Usuario::class);\n  }\n}\n</code></pre> <p>Al llamar el m\u00e9todo de <code>usuario</code>, Eloquent intentar\u00e1 encontrar un modelo de usuario que tenga un <code>id</code> que coincida con la columna de <code>usuario_id</code> en el modelo de <code>telefono</code>.</p> <p>Eloquent determina el nombre de la clave externa examinando el nombre del m\u00e9todo de relaci\u00f3n y agregando el sufijo <code>_id</code> al nombre del m\u00e9todo. Entonces, asume que el modelo <code>Telefono</code> tiene una columna <code>usuario_id</code>. Sin embargo, si no se llama de esa manera, puedes pasarle como argumento el nombre de la clave.</p> <pre><code>&lt;?php\n\npublic function usuario()\n{\n    return $this -&gt; belongsTo(Usuario::class, 'clave_ajena');\n}\n</code></pre>"},{"location":"07frameworks.html#uno-a-muchos-1-a-mm","title":"Uno a Muchos (1 a MM)","text":"<p>En este caso, las relaciones de 1 a muchos podemos decir que en una entrada de un blog, o en un post de Facebook, hay muchos comentarios relacionados a esa misma publicaci\u00f3n.</p> <p>Para empezar, ya sabemos que debemos crear el modelo y en este caso usaremos el m\u00e9todo <code>hasMany()</code> para obtener los datos relacionados con ese post o entrada en el blog</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Post extends Model\n{\n\n  public function comentarios()\n  {\n      return $this -&gt; hasMany(Comentario::class);\n  }\n}\n</code></pre> <p>Cuidado con las claves ajenas, que aqu\u00ed pasa lo mismo... Eloquent establece por defecto el sufijo <code>_id</code> por lo tanto, en este ejemplo buscar\u00eda por <code>post_id</code>. Si no queremos \u00e9so o nuestra clave ajena tiene otro nombre, se lo pasamos por par\u00e1metro en el m\u00e9todo <code>hasMany</code> como hac\u00edamos m\u00e1s arriba.</p> <p>Ahora, al haber m\u00e1s de un dato, necesitamos iterar, por tanto debemos crear un bucle para poder sacar cada dato.</p> <pre><code>&lt;?php\nuse App\\Models\\Post;\n\n$comentarios = Post::find(1) -&gt; comentarios;\n\nforeach ($comentarios as $comentario) {\n    // Lo que sea que hagamos con esos datos\n}\n</code></pre> <p>Adem\u00e1s, como todas las relaciones son sentencias SQL, podemos anidar varios filtros en funci\u00f3n de lo que queramos sacar.</p> <pre><code>$comentario = Post::find(1) -&gt; comentarios()\n    -&gt;where('titulo', 'lo que sea')\n    -&gt;first();\n</code></pre>"},{"location":"07frameworks.html#uno-a-muchos-inversa","title":"Uno a Muchos INVERSA","text":"<p>Ahora que podemos acceder a todos los comentarios de una publicaci\u00f3n, definamos una relaci\u00f3n para permitir que un comentario acceda a su publicaci\u00f3n principal.</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Comentario extends Model\n{\n\n  public function post()\n  {\n      return $this -&gt; belongsTo(Post::class);\n  }\n}\n</code></pre> <p>Y ahora, a trav\u00e9s de la propiedad de relaci\u00f3n din\u00e1mica...</p> <pre><code>&lt;?php\n\nuse App\\Models\\Comentario;\n\n$comentario = Comentario::find(1);\n\nreturn $comentario -&gt; post -&gt; titulo;\n</code></pre> <p>Pasar\u00eda lo mismo con el nombre de la clave ajena, si no se llama de la misma manera que Eloquent establece con el sufijo <code>_id</code> podemos pasarle como par\u00e1metro el nombre de la clave donde debe buscar.</p>"},{"location":"07frameworks.html#muchos-a-muchos-mm-a-mm","title":"Muchos a Muchos (MM a MM)","text":"<p>Este tipo de relaciones son las m\u00e1s complicadas ya que, en un Blog del estilo Wordpress por ejemplo, un usuario puede tener muchos roles (lector, autor, administrador) pero un rol pueden tenerlo varios usuarios, es decir, puede haber muchos usuarios administradores, otros lectores y dem\u00e1s.</p> <p>Para realizar este tipo de relaciones necesitar\u00edamos 3 tablas diferentes.</p> <ul> <li>usuarios [ id, nombre]</li> <li>roles [id, nombre]</li> <li>rol_usuario [usuario_id, rol_id] (Tabla Pivote)</li> </ul> <p>Lo primero de todo, vamos a crear las tablas con sus modelos a excepci\u00f3n de la tabla pivote rol_usuario que s\u00f3lo crearemos la tabla, sin su modelo</p> <pre><code>php artisan make:migration create_rol_usuario_table --create=rol_usuario\n</code></pre> <p>Y la estructura de dicha seria de la siguiente manera...</p> <pre><code>&lt;?php\n\npublic function up()\n{\n    Schema::create('rol_usuario', function (Blueprint $table) {\n        $table-&gt;bigIncrements('id');\n        $table-&gt;unsignedInteger('usuario_id');\n        $table-&gt;unsignedInteger('rol_id');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre> <p>Ahora que ya tenemos todo listo, las relaciones de Muchos a Muchos vienen definidas por un m\u00e9todo que devuelve el resultado de usar el m\u00e9todo <code>belongsToMany()</code></p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Usuario extends Model\n{\n    public function roles()\n    {\n        return $this -&gt; belongsToMany(Rol::class);\n    }\n}\n</code></pre> <p>Una vez que tengamos las relaciones definidas, accederemos a ellas mediante las propiedades din\u00e1micas de <code>rol</code></p> <pre><code>&lt;?php\n\nuse App\\Models\\Usuario;\n\n$usuario = Usuario::find(1);\n\nforeach ($usuario -&gt; roles as $rol) {\n    // nuestro c\u00f3digo\n}\n</code></pre> <p>Acordaros que podemos encadenar comandos sql a trav\u00e9s de los m\u00e9todos de Eloquent</p> <pre><code>&lt;?php\n\n$roles = Usuario::find(1) -&gt; roles() -&gt; orderBy('nombre') -&gt; get();\n</code></pre>"},{"location":"07frameworks.html#muchos-a-muchos-inversa","title":"Muchos a Muchos INVERSA","text":"<p>Para definir el \"inverso\" de una relaci\u00f3n de muchos a muchos, debemos establecer un m\u00e9todo en el modelo relacionado que tambi\u00e9n devuelva el resultado del m\u00e9todo <code>belongsToMany</code>. Seg\u00fan el ejemplo que estamos siguiendo...</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Rol extends Model\n{\n  public function usuarios()\n  {\n      return $this -&gt; belongsToMany(Usuario::class);\n  }\n}\n</code></pre> <p>Vamos a hacer un ejemplo con una APP que gestiones alumnos y asignaturas, de tal manera que MUCHOS ALUMNOS pueden cursar MUCHAS ASIGNATURAS</p> <p>\u00bfQu\u00e9 necesitamos para este ejemplo?</p> <ul> <li> <p>3 migraciones para crear las tablas</p> <ul> <li><code>Alumnos</code> /// <code>Materias</code> /// <code>AlumnoMateria</code></li> </ul> </li> <li> <p>Modificar los archivos de las migraciones <code>create_alumnos_table</code> y <code>create_materias_table</code>.</p> </li> <li>Crear la base de datos <code>muchos_a_muchos</code></li> <li>Ejecutar las Migraciones</li> <li>2 modelos para <code>Alumnos</code> /// <code>Materias</code></li> <li>M\u00e9todo dentro de <code>Alumno</code> para crear la relaci\u00f3n Alumno -&gt; Materia</li> <li>Crear el controlador para la vista</li> <li>Crear la ruta de nuestra vista</li> <li>Rellenar la base de datos</li> <li>Crear la vista con los datos</li> </ul> <p>3 MIGRACIONES <pre><code>php artisan make:migration create_alumnos_table\nphp artisan make:migration create_materias_table\nphp artisan make:migration create_alumno_materia_table\n</code></pre></p> <p>MODIFICANDO LAS MIGRACIONES</p> create_alumnos_table.phpcreate_materias_table.phpcreate_alumno_materia_table.php <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumnos', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('materias', function (Blueprint $table) {\n    $table-&gt;id();\n    $table-&gt;string('nombre');\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function up()\n{\n  Schema::create('alumno_materia', function (Blueprint $table) {\n    $table-&gt;id();\n\n    $table-&gt;foreignId('alumno_id')\n      -&gt;nullable()\n      -&gt;constrained('alumnos')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;foreignId('materia_id')\n      -&gt;nullable()\n      -&gt;constrained('materias')\n      -&gt;cascadeOnUpdate()\n      -&gt;nullOnDelete();\n\n    $table-&gt;timestamps();\n  });\n}\n</code></pre> <p>CREAMOS LA BASE DE DATOS</p> <p>Para este ejemplo, vamos a crear una base de datos que se llame <code>muchos_a_muchos</code> desde la consola de MySQL o MariaDB.</p> <pre><code>CREATE TABLE `muchos_a_muchos`\n</code></pre> <p>EJECUTANDO LAS MIGRACIONES</p> <p>Ya tenemos las migraciones creadas y la base de datos lista para insertar el contenido de las migraciones que hemos escrito m\u00e1s arriba, lo que nos queda es <code>ejecutar las migraciones</code> para volcar toda la estructura en nuestra nueva base de datos.</p> <pre><code>php artisan migrate\n</code></pre> <p>2 MODELOS PARA ALUMNOS Y MATERIAS</p> <pre><code>php artisan make:model Alumno\nphp artisan make:model Materia\n</code></pre> <p>M\u00c9TODOS PARA CREAR LAS RELACIONES ALUMNO &lt;-&gt; MATERIA</p> Alumno.phpMateria.php <pre><code>&lt;?php\n\npublic function materias() {\n  return $this -&gt; belongsToMany(Materia::class, 'alumno_materia');\n}\n</code></pre> <pre><code>&lt;?php\n\npublic function alumnos() {\n  return $this -&gt; belongsToMany(Alumno::class, 'alumno_materia');\n}\n</code></pre> <p>CREANDO EL CONTROLADOR DE LA VISTA</p> <p>Necesitamos un controlador para redireccionar las rutas a las vistas que nosotros queramos, para ello crearemos el controlador <code>RelacionController</code></p> <pre><code>php artisan make:controller RelacionController\n</code></pre> <p>CREANDO RUTAS</p> <p>Ahora que ya tenemos nuestro controlador, vamos a crear una \u00fanica vista para mostrar el ejemplo de la relaci\u00f3n MUCHOS a MUCHOS, en este caso un alumno determinado.</p> <p>Adem\u00e1s, en nuestro controlador <code>RelacionController</code> vamos a escribir el c\u00f3digo necesario para que nos devuelva los datos relacionados con el alumno con id <code>1</code> y la materia con id <code>2</code>.</p> web.phpRelacionController.php <pre><code>&lt;?php\n\n  use App\\Http\\Controllers\\RelacionController;\n  use Illuminate\\Support\\Facades\\Route;\n\n  Route::get('muchos', [ RelacionController::class, 'index' ]);\n</code></pre> <pre><code>&lt;?php\n\n  namespace App\\Http\\Controllers;\n\n  use App\\Models\\Alumno;\n  use App\\Models\\Materia;\n  use Illuminate\\Http\\Request;\n\n  class RelacionController extends Controller\n  {\n    public function index() {\n      $alumno = Alumno::find(1);\n      $materia = Materia::find(2);\n\n      return view('muchos', compact('alumno', 'materia'));\n    }\n  }\n</code></pre> <p>RELLENANDO LA BASE DE DATOS</p> <p>Necesitamos meter algunos registros en nuestra base de datos, por tanto, vamos a crear varios datos en nuestro sistema con las siguientes sentencias SQL.</p> Tabla AlumnosTabla MateriasTabla Alumno_Materia <pre><code>  INSERT INTO alumnos (`nombre`) VALUES\n  ('Antonio'),\n  ('Laura'),\n  ('Marta'),\n  ('Pedro');\n</code></pre> <pre><code>  INSERT INTO materias (`nombre`) VALUES\n  ('Programacion'),\n  ('Interfaces'),\n  ('JavaScript'),\n  ('Sistemas');\n</code></pre> <pre><code>  INSERT INTO alumno_materia (`alumno_id`, `materia_id`) VALUES\n  (1, 2),\n  (1, 4),\n  (3, 2),\n  (3, 1),\n  (2, 3),\n  (2, 4),\n  (4, 4),\n  (4, 1);\n</code></pre> <p>CREANDO LA VISTA CON LOS DATOS</p> <p>El \u00faltimo paso que vamos a hacer es, listar los datos relacionados en una vista o plantilla <code>Blade</code> sencilla. Para ello nos creamos el archivo <code>muchos.blade.php</code> ya que es el nombre que hemos puesto en nuestro archivo de rutas.</p> Alumnos que cursan materiasMaterias cursadas por alumnos <pre><code>&lt;div class=\"row justify-content-center\"&gt;\n  &lt;div class=\"col-auto\"&gt;\n    &lt;h3&gt;Alumno {{ $alumno -&gt; nombre }} est\u00e1 cursando las materias&lt;/h3&gt;\n\n    &lt;table class=\"table table-striped table-hover\"&gt;\n      &lt;thead class=\"bg-primary text-white\"&gt;\n        &lt;th&gt;MATERIAS&lt;/th&gt;\n      &lt;/thead&gt;\n\n      &lt;tbody&gt;\n        @foreach ($alumno -&gt; materias as $registro)\n          &lt;tr&gt;\n            &lt;td&gt;\n                {{ $registro -&gt; nombre }}\n             &lt;/td&gt;\n          &lt;/tr&gt;\n        @endforeach\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div class=\"row justify-content-center\"&gt;\n  &lt;div class=\"col-auto\"&gt;\n    &lt;h3&gt;La materia {{ $materia -&gt; nombre }} la est\u00e1n cursando los alumnos&lt;/h3&gt;\n\n    &lt;table class=\"table table-striped table-hover\"&gt;\n      &lt;thead class=\"bg-primary text-white\"&gt;\n        &lt;th&gt;ALUMNOS&lt;/th&gt;\n      &lt;/thead&gt;\n\n      &lt;tbody&gt;\n        @foreach ($materia -&gt; alumnos as $registro)\n          &lt;tr&gt;\n            &lt;td&gt;\n              {{ $registro -&gt; nombre }}\n            &lt;/td&gt;\n          &lt;/tr&gt;\n        @endforeach\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"08frameworks2.html","title":"Uso avanzado de Frameworks","text":""},{"location":"08frameworks2.html#plantillas-con-blade","title":"Plantillas con Blade","text":""},{"location":"08frameworks2.html#integracion-de-css-y-js","title":"Integraci\u00f3n de CSS y JS","text":""},{"location":"08frameworks2.html#autenticacion-y-autorizacion","title":"Autenticaci\u00f3n y autorizaci\u00f3n","text":"<p>https://igomis.github.io/apunts/docs/4.8.Laravel.html</p> <p>Tip</p> <ol> <li>Pregunta</li> <li>Respuesta</li> <li>Relacion P-R</li> <li>Autenticaci\u00f3n</li> <li>Relacion con usuario en modelo</li> <li>Relacionar con migraciones</li> <li>Relacionar en vistas</li> <li>Proteger edit, update por Auth:id</li> <li>p\u00e1gina profile ... listado de preguntas y respuestas del usuario</li> </ol> <p>Utilizar la fuci\u00f3n diffForHumas para ellapsed time</p> <p>Antes se hac\u00eda as\u00ed....</p> <p>Run scaffolding</p> <pre><code>php artisan make:auth\n</code></pre> <p>Crea el <code>HomeController</code>, que utiliza el middleware <code>auth</code>.</p>"},{"location":"08frameworks2.html#middleware","title":"Middleware","text":"<p>Componente que se situa entre el enrutador y el controlador.</p> <p>Explicar</p> <p>Ejecutar las migraciones</p> <p>Explorar los ficheros generados</p> <p>Auth:routes() ???</p>"},{"location":"08frameworks2.html#laravel-breeze","title":"Laravel Breeze","text":"<p>Laravel Breeze es un starter kit que se compone de un conjunto de rutas, controladores y vistas necesarias para regitrar y autenticar usuarios en cualquier aplicaci\u00f3n.</p> <p>Las vistas est\u00e1n creadas con Laravel y los estilos con Tailwind CSS.</p> <p>Primero hemos de a\u00f1adir la dependencia mediante Composer:</p> <pre><code>composer require laravel/breeze --dev\n</code></pre> <p>Tras ello, ejecutaremos el comando <code>breeze:install</code> para generar todo el contenido necesario (rutas, vistas, controladores, recursos, ...), compilaremos todos los assets CSS y generaremos las migraciones:</p> <pre><code>php artisan breeze:install\n\nnpm install\nnpm run dev\nphp artisan migrate\n</code></pre> <p>Mailtrap</p> <p>Para poder probar el env\u00edo de correo mailtrap.io, servidor de correo para pruebas para equipos de desarrollo (realmente no est\u00e1 env\u00edando los correos)</p>"},{"location":"08frameworks2.html#i18n","title":"i18n","text":""},{"location":"09rest.html","title":"09rest","text":""},{"location":"09rest.html#servicios-rest","title":"Servicios REST","text":"<p>Duraci\u00f3n estimada: 32 sesiones</p>"},{"location":"09rest.html#api","title":"API","text":"<p>Una API (Application Programming Interface) es un conjunto de funciones y procedimientos por los cuales, una aplicaci\u00f3n externa accede a los datos, a modo de biblioteca como una capa de abstracci\u00f3n y la API se encarga de enviar el dato solicitado.</p> <p>Una de las caracter\u00edsticas fundamentales de las API es que son Sateless, lo que quiere decir que las peticiones se hacen y desaparecen, no hay usuarios logueados ni datos que se quedan almacenados.</p> <p>Ejemplos de APIs gratuitas:</p> <ul> <li>ChuckNorris IO</li> <li>OMDB</li> <li>PokeAPI - Pokemon</li> <li>RAWg - Videojuegos</li> <li>The Star Wars API</li> </ul> <p>Para hacer pruebas con estas APIs podemos implementar el c\u00f3digo para consumirlas o utilizar un cliente especial para el consumo de estos servicios.</p> <ul> <li>PostMan</li> <li>Thunder Client</li> <li>Insomnia</li> <li>Advance REST Client (desde el navegador)</li> </ul>"},{"location":"09rest.html#rest","title":"REST","text":"<p>Con esta metodolog\u00eda llamada REST vamos a poder construir APIs para que desde un cliente externo se puedan consumir.</p> <p>Gracias a este standard de la arquitectura del software vamos a poder montar un API que utilice los m\u00e9todos standard GET, POST, PUT y DELETE.</p>"},{"location":"09rest.html#creando-recurso-resource","title":"Creando Recurso (Resource)","text":"<p>Para crear un recurso dentro de nuestra aplicaci\u00f3n hecha con Laravel, necesitamos crear un controlador del tipo resource donde establezcamos los m\u00e9todos que nosotros queramos realizar a la hora de trabajar con los datos</p> <pre><code>php artisan make:controller ChollosController --resource\n</code></pre> <p>Artisan nos crear\u00e1 un nuevo controlador en la carpeta <code>controllers</code> con el nombre <code>ChollosController</code> o el nombre que le hayamos pasado.</p> <p>La estructura de este archivo es un poco diferente a los controladores que ya hemos visto anteriormente. Ahora tenemos los siguientes m\u00e9todos creados de manera autom\u00e1tica:</p> <ul> <li><code>index()</code> normalmente para listar, en nuestro caso los chollos</li> <li><code>create()</code> para crear plantillas (no lo vamos a usar)</li> <li><code>store()</code> para guardar los datos que pasemos a la API</li> <li><code>update()</code> para actualizar un dato ya existente en la BDD</li> <li><code>delete()</code> para eliminar un dato ya existente en la BDD</li> </ul> <p>En el caso de devolver un listado con todos los chollos, lo primero que debemos hacer es importar nuestro modelo Chollo.</p> <pre><code>&lt;?php\n\nuse App\\Models\\Chollo;\n</code></pre> <p>Y como hemos ido haciendo en controladores anteriores, necesitamos hacer la consulta apropiada para devolver todos los chollos. CUIDADO CON EL RETURN porque ahora no estamos devolviendo una vista sino un array de datos en formato JSON.</p> <pre><code>&lt;?php\n\npublic function index()\n{\n    $chollos = Chollo::all();\n    return $chollos;\n}\n</code></pre> <p>El \u00faltimo paso ser\u00eda configurar el archivo de rutas, pero en este caso el archivo de rutas de la api se llama <code>api.php</code></p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 api.php \n\nuse App\\Http\\Controllers\\ChollosController;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/chollos', [ ChollosController::class, 'index' ]);\n</code></pre> <p>Una vez hecho \u00e9sto, debemos poner en marcha nuestro servidor.</p> <pre><code>php artisan serve\n</code></pre> <p>Ahora ya podemos usar el Postman o cualquier cliente de la misma \u00edndole para testear nuestra API a trav\u00e9s de la URL de nuestro servidor <code>http://127.0.0.1:8000/api/chollos</code></p>"},{"location":"09rest.html#recuperando-datos-en-vista-blade","title":"Recuperando datos en vista BLADE","text":"<p>Ya tenemos nuestra API montada y puede ser consumida a trav\u00e9s del navegador o cualquier cliente como <code>PostMan</code> o <code>Thunder Client</code> pero lo que nos interesa ahora es poder listar la informaci\u00f3n en una vista como hac\u00edamos en el tema anterior.</p> <p>Lo que vamos a tener que hacer es lo siguiente</p> <ul> <li>Modificar el <code>Controlador</code> para que consuma de la API</li> <li>Convertir el tipo de dato que nos devuelve la API como respuesta</li> <li>Utilizar una estructura de control <code>forEach</code> dentro de nuestra vista</li> <li>Acceder a cada clave del objeto JSON recibido en la vista <code>blade</code></li> </ul> <p>Vamos a modificar el controlador para que consuma de la API y convertimos los datos con el m\u00e9todo <code>collect()</code>.</p> <p>Para la llamada debemos importar <code>Http</code>.</p> <pre><code>&lt;?php\n\n// estamos en \u2593\u2593\u2593 CholloController.php\n\nuse App\\Models\\Chollo; // EN CASO DE API LOCAL\nuse Illuminate\\Support\\Facades\\Http; // INDISPENSABLE EN CASO DE API EXTERNA\n\nclass RestController extends Controller\n{\n    public function index() {\n        // $restChollos = Http::get('http://localhost/api/chollos') -&gt; collect(); // PARA API EXTERNA\n\n        $chollos = Chollo::all();\n\n        return view('rest', compact('chollos'));\n    }\n}\n</code></pre> <p>Modificamos nuestra vista <code>blade</code> para poder listar los datos correctamente o si lo prefieres, puedes crear una ruta nueva e incluso un nuevo controlador que se encargue de manejar las llamadas a la API.</p> <p>El nombre que va entre corchetes es el nombre de las columnas de la tabla de la base de datos</p> <pre><code>&lt;?php\n// estamos en \u2593\u2593\u2593 chollos.blade.php\n\n@foreach ($chollos as $chollo)\n    &lt;p&gt;ID:  {{ $chollo -&gt; id }}&lt;/p&gt; // Columna ID\n    &lt;p&gt;Nombre:  {{ $chollo -&gt; nombre }}&lt;/p&gt;  // Columna NOMBRE\n    &lt;p&gt;Descripci\u00f3n:  {{ $chollo -&gt; descripcion }}&lt;/p&gt;  // Columna DESCRIPCION\n\n    // [...]\n    &lt;hr&gt;\n@endforeach\n</code></pre>"},{"location":"09rest.html#enviando-datos-post","title":"Enviando datos (POST)","text":"<p>En una API, para poder enviar datos y que se guarden en la base de datos, debemos usar el m\u00e9todo post bajo <code>Http</code> y pasarle los nuevos datos como un array asociativo, poniendo como <code>clave</code> el nombre de las columnas de la base de datos</p> <pre><code>&lt;?php\n\n$response = Http::post('http://localhost:8000/api/chollo-severo', [\n    'titulo' =&gt; 'Chollazo para este producto',\n    'descripcion' =&gt; 'Lorem ipsum dolo...',\n\n// [...]\n]);\n</code></pre>"},{"location":"planning.html","title":"Planificaci\u00f3n","text":""},{"location":"planning.html#1-arquitecturas-web-4h","title":"1.- Arquitecturas Web (4h)","text":"<ul> <li> 1.- (1) Introducci\u00f3n asignatura. Arquitecturas, decisiones de dise\u00f1o - Ejercicios 101,102</li> <li> 2.- (2) Herramientas. Puesta en marcha / Docker - Ejercicios 103,104</li> </ul>"},{"location":"planning.html#2-el-lenguaje-php-26h","title":"2.- El lenguaje PHP (26h)","text":"<ul> <li> 1.- (3) Sintaxis. Ejercicios 201-207</li> <li> 2.- (4) Condiciones. Ejercicios 208-213</li> <li> 3.- (5) Bucles. Ejercicios 220-223 - Lunes 20/10/21</li> <li> 4.- (6) Ejercicios 224-228</li> <li> 5.- (7) Arrays, asociativos. Ejercicios 230-235</li> <li> 6.- (8) Array bidimensionales. Ejercicios 236-238</li> <li> 7.- (9) Funciones, par\u00e1metros por defecto y con nombre. Ejercicios 240-242 - Lunes 27/09/21</li> <li> 8.- (10) Alcance y Funciones variable. Biblioteca de funciones. Ejercicios 243-245</li> <li> 9.- (11) Plantillas. Ejercicios 246-247.</li> <li> 10.- (12) Cadenas. Ejercicios 250-253</li> <li> 11.- (13) Subcadenas. Ejercicios 254-257 - Lunes 4/10/21</li> <li> 12.- (14) Math y tipos de datos. Ejercicios 260-262</li> <li> 13.- (15) Prueba escrita - Jueves 7/10/21</li> </ul>"},{"location":"planning.html#3-php-orientado-a-objetos-18h","title":"3.- PHP Orientado a Objetos (18h)","text":"<ul> <li> 1.- (16) Clases y objetos. Constructor. Ejercicios 300-303 - Jueves 14/10/21</li> <li> 2.- (17) Clases est\u00e1ticas. Herencia. Ejercicios 304-307</li> <li> 3.- (18) Herencia. Clases abstractas. Ejercicios 308-311 - Lunes 18/10/21</li> <li> 4.- (19) Interfaces. Ejercicios 312-314</li> <li> 5.- (20) Proyecto Videoclub I. Ejercicios 320-323</li> <li> 6.- (21) Proyecto Videoclub I. Ejercicios 324-328</li> <li> 7.- (22) M\u00e9todos encadenados. Namespaces. Ejercicios 330-332  - Lunes 25/10/21</li> <li> 8.- (23) Excepciones. Ejercicios 333-334</li> <li> 9.- (24) Proyecto Videoclub II. Ejercicios 335-337</li> </ul>"},{"location":"planning.html#4-programacion-web-12h","title":"4.- Programaci\u00f3n Web (12h)","text":"<ul> <li> 1.- (25) Formularios. Ejercicios 401-403</li> <li> 2.- (26) Upload. Cookies. Ejercicios 404-406 - Martes 2/11/21</li> <li> 3.- (27) Cookies. Sesi\u00f3n. Ejercicios 407-409</li> <li> 4.- (28) Gesti\u00f3n de usuarios. Ejercicios 410-415</li> <li> 5.- (29) Proyecto Videoclub III. Ejercicios 420-423 - Lunes 8/11/21</li> <li> 6.- (30) Proyecto Videoclub III. Ejercicios 424-426</li> </ul>"},{"location":"planning.html#5-herramientas-web-16h","title":"5.- Herramientas Web (16h)","text":"<ul> <li> 1.- (31) Composer. Introducci\u00f3n Monolog. Ejercicio 501</li> <li> 2.- (32) Manejadores. Uso de logs con Monolog. Ejercicios 502 - 503</li> <li> 3.- (33) Proyecto Videoclub IV. Ejercicios 511 - 515 / Lunes 15/11/21</li> <li> 4.- (34) Documentaci\u00f3n con phpDocumentor . Ejercicios 521 - 522.</li> <li> 5.- (35) Webscrapping. Ejercicios 531 - 533.</li> <li> 6.- (36) Pruebas con PhpUnit. Ejercicios 541 - 545.</li> <li> 7.- (37) Proyecto Videoclub V. Ejercicios 551 - 554. - Lunes 22/11/21</li> <li> 8.- (38) Prueba escrita</li> </ul>"},{"location":"planning.html#6-acceso-a-datos-24h","title":"6.- Acceso a Datos (24h)","text":"<ul> <li> 1.- (39) SQL. Ejercicios 601 - Jueves 25/11/21 </li> <li> 2.- (40) PDO. Ejercicios -</li> <li> 3.- (41) . Ejercicios - Lunes 29/11/21</li> <li> 4.- (42) . Ejercicios -</li> <li> 5.- (43) CSV. Ejercicios -</li> <li> 6.- (44) PDF. Ejercicios -</li> <li> 7.- (45) Eloquent. Ejercicios - Martes 7/12/21</li> <li> 8.- (46) Migraciones. . Ejercicios -</li> <li> 9.- (47) . Ejercicios -</li> <li> 10.- (48) ORM. Ejercicios -</li> <li> 11.- (49) . Ejercicios - Martes 14/12/21</li> <li> 12.- (50) . Ejercicios - </li> </ul>"},{"location":"planning.html#proyecto-innova-fase-i","title":"Proyecto Innova - Fase I","text":"<p>Del Mi\u00e9rcoles 15 al Martes 21 de Diciembre.</p>"},{"location":"planning.html#7-frameworks-php-32h","title":"7.- Frameworks PHP (32h)","text":"<ul> <li> 1.- (51) Introducci\u00f3n a Laravel - Lunes 10/01/22 </li> <li> 2.- (52) Rutas</li> <li> 3.- (53) Plantillas</li> <li> 4.- (54) Controladores</li> <li> 5.- (55) Migraciones &amp; Eloquent - Lunes 17/01/22 </li> <li> 6.- (56) </li> <li> 7.- (57) </li> <li> 8.- (58) </li> <li> 9.- (59) Lunes 24/01/22 </li> <li> 10.- (60) </li> <li> 11.- (61) </li> <li> 12.- (62) </li> <li> 13.- (63) Ejercicio 801 - Lunes 31/01/22 </li> <li> 14.- (64) </li> <li> 15.- (65) </li> <li> 16.- (66) </li> </ul>"},{"location":"planning.html#8-servicios-rest-22h","title":"8.- Servicios REST (22h)","text":"<ul> <li> 1.- (67) Lunes 7/02/22 </li> <li> 2.- (68) </li> <li> 3.- (69) </li> <li> 4.- (70) </li> <li> 5.- (71) Lunes 14/02/22 </li> <li> 6.- (72) </li> <li> 7.- (73) </li> <li> 8.- (74) </li> <li> 9.- (75) Lunes 21/02/22</li> <li> 10.- (76) </li> <li> 11.- (77) Prueba pr\u00e1ctica final - Jueves 24/02/22</li> </ul>"},{"location":"planning.html#proyecto-innova-fase-ii","title":"Proyecto Innova - Fase II","text":"<p>Del 25 de Febrero al 3 de Marzo.</p> <p>Total = 154h de sesiones lectivas + 16h de proyectos innova = 170h reales.</p>"},{"location":"actividades/02.1.php-basico.activitys.html","title":"02.1.php basico.activitys","text":""},{"location":"actividades/02.1.php-basico.activitys.html#actividades-del-tema-2-php-basico","title":"Actividades del Tema 2: PHP b\u00e1sico","text":"Ejercicios PHP b\u00e1sicoBuclesArraysFuncionesFunciones predefinidas <ol> <li>Visualiza el v\u00eddeo de Jes\u00fas Amieiro sobre PHP en 2020 a partir del minuto 3:32 (son 40 minutos aproximadamente).<ul> <li>\u00bfQu\u00e9 relaci\u00f3n existe entre PHP y Facebook?</li> <li>Respecto al rendimiento, \u00bfqu\u00e9 versi\u00f3n m\u00ednima deber\u00edamos utilizar?</li> <li>\u00bfPor qu\u00e9 PHP tiene mala fama? </li> </ul> </li> <li><code>201tresfrases.php</code>: Muestra 3 frases, cada una en un p\u00e1rrafo utilizando las tres posibilidades que existen de mostrar contenido. Tras ello, introduce dos comentarios, uno de bloque y otro de una l\u00ednea.</li> <li><code>202calculos.php</code>: Escribe un programa que utilice las variables <code>$x</code> y <code>$y</code>. As\u00edgnales los valores <code>166</code> y <code>999</code> respectivamente. A continuaci\u00f3n, muestra por pantalla el valor de cada variable, la suma, la resta, la divisi\u00f3n y la multiplicaci\u00f3n. </li> <li><code>203datosPersonales.php</code>: Escribe un programa que almacene en variables tu nombre, primer apellido, segundo apellido, email, a\u00f1o de nacimiento y tel\u00e9fono. Luego mu\u00e9stralos por pantalla dentro de una tabla.</li> <li> <p><code>204datosPersonales.html</code> y <code>204datosPersonales.php</code>: Es el mismo ejercicio que el anterior, pero separando la l\u00f3gica. En el primer archivo crearemos el formulario para introducir los datos, y luego recogemos los datos y generamos la tabla en el segundo archivo.</p> </li> <li> <p><code>205madlib.html</code>y <code>205madlib.php</code>: A partir de un nombre, un verbo, un adjetivo y un adverbio, crea una historia que contenga dichos elementos. Por ejemplo:</p> <ul> <li>Entrada: perro / caminar / azul / r\u00e1pidamente</li> <li> <p>Salida: \u00bf Te gusta caminar con tu perro azul r\u00e1pidamente ?</p> </li> <li> <p><code>205madlib2.html</code> y <code>205madlib2.php</code> Crea un madlib m\u00e1s extenso, leyendo m\u00e1s datos de entrada.</p> </li> </ul> </li> <li> <p><code>206anyos.php</code>: Tras leer la edad de una persona, mostrar la edad que tendr\u00e1 dentro de 10 a\u00f1os y hace 10 a\u00f1os. Adem\u00e1s, muestra qu\u00e9 a\u00f1o ser\u00e1 en cada uno de los casos. Finalmente, muestra el a\u00f1o de jubilaci\u00f3n suponiendo que trabajar\u00e1s hasta los 67 a\u00f1os. En este caso, no hace falta que previamente crees un formulario, puedes probar el ejercicio via URL: <code>206anyos.php?edad=33</code>.</p> <p>Tip: <code>$anyoActual = date(\"Y\");</code></p> </li> <li> <p><code>207dinero.php</code>: A partir de una cantidad de dinero, mostrar su descomposici\u00f3n en billetes  (500, 200, 100, 50, 20, 10, 5) y monedas (2, 1), para que el n\u00famero de elementos sea m\u00ednimo. No se utilizar ninguna instrucci\u00f3n condicional. Por ejemplo, al introducir <code>139</code> debe mostrar:</p> <pre><code>1 billete de 100\n0 billete de 50\n1 billete de 20\n1 billete de 10\n1 billete de 5\n2 moneda de 2\n</code></pre> <p>Tip: Puedes forzar a realizar la divisi\u00f3n entera mediante la funci\u00f3n <code>intdiv($dividendo, $divisor)</code> o pasar un n\u00famero flotante a entero puedes usar la funci\u00f3n <code>intval()</code></p> </li> <li> <p><code>208posnegcero.php</code>: A partir de un <code>numero</code>, muestra por pantalla si el n\u00famero es <code>positivo</code>, <code>negativo</code> o <code>cero</code>.</p> </li> <li> <p><code>209mayor3.php</code>: Sin hacer uso de condiciones que utilicen dentro la condici\u00f3n los operadores l\u00f3gicos, muestra el mayor de tres n\u00fameros (<code>a</code>, <code>b</code> y <code>c</code>).</p> <p><code>209mayor3c.php</code>: Utiliza en las condiciones los operadores l\u00f3gicos.</p> </li> <li> <p><code>210nombreEdad.php</code>: A partir de una <code>edad</code> muestra por pantalla:</p> <ul> <li><code>beb\u00e9</code> si tiene menos de 3 a\u00f1os</li> <li><code>ni\u00f1o</code> si tiene entre 3 y 12 a\u00f1os</li> <li><code>adolescente</code> entre 13 y 17 a\u00f1os</li> <li><code>adulto</code> entre 18 y 66</li> <li><code>jubilado</code> a partir de 67</li> </ul> </li> <li> <p><code>211reloj.php</code>: Escribe un programa que funcione similar a un reloj, de manera que a partir de los valores de <code>hora</code>, <code>minuto</code> y <code>segundo</code> muestre la hora dentro de un segundo. Tras las <code>23:59:59</code> ser\u00e1n las <code>0:0:0</code>.</p> </li> <li> <p><code>212calendario.php</code>: Escribe un programa similar a un calendario de manera que a partir de <code>dia</code>, <code>mes</code> y <code>anyo</code> muestre la fecha dentro de un d\u00eda. Debes tener en cuenta que no todos los meses tienen 30 d\u00edas. En este caso, no vamos a tener en cuenta los a\u00f1os bisiestos.</p> </li> </ol> <p></p> <ol> <li> <p><code>213ecuacion2g.php</code>: Crea un programa que resuelva una ecuaci\u00f3n de 2\u00ba grado del tipo <code>ax\u00b2 + bx + c = 0</code>. Ten en cuenta que puede tener 2, 1 o no tener soluci\u00f3n dependiendo del valor del discriminante <code>b\u00b2-4ac</code>.</p> <p>Tip: Para calcular la ra\u00edz cuadrada deber\u00e1s utilizar la funci\u00f3n <code>sqrt()</code></p> </li> </ol> <p>Ejercicios de investigaci\u00f3n:</p> <ol> <li>Investiga para que sirve el operador nave espacial, disponible desde PHP7 (https://www.php.net/manual/es/migration70.new-features.php). Explica con un par de l\u00edneas su prop\u00f3sito y mediante c\u00f3digo demuestra su uso.</li> <li>Investiga para qu\u00e9 sirve la instrucci\u00f3n <code>match()</code>, disponible desde PHP8 (https://www.php.net/manual/es/control-structures.match.php). Explica con un par de l\u00edneas su prop\u00f3sito y mediante c\u00f3digo demuestra su uso.</li> </ol> <ol> <li> <p><code>220pares050.php:</code> Escribe un programa que muestre los n\u00fameros pares del 0 al 50 (dentro de una lista desordenada).</p> <p><code>220paresAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p> </li> <li> <p><code>221suma110.php</code>: Escribe un programa que sume los n\u00fameros del 1 al 10.</p> <p><code>221sumaAB.php</code>: A partir del anterior, refactorizar para que funcione con <code>inicio</code> y <code>fin</code>.</p> </li> <li> <p><code>222potencia.php</code>: A partir de una <code>base</code> y <code>exponente</code>, mediante la acumulaci\u00f3n de productos, calcula la potencia utilizando la instrucci\u00f3n <code>for</code>.</p> <p><code>222potenciaWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>while</code>. <code>222potenciaDoWhile.php</code>: Reescribe el ejercicio anterior haciendo uso s\u00f3lo de <code>do-while</code>.</p> </li> <li> <p><code>223tablaMultiplicar.php</code>: Muestra dentro de una tabla HTML la tabla de multiplicar del <code>numero</code> que reciba como par\u00e1metro. Utiliza <code>&lt;thead&gt;</code> con sus respectivos <code>&lt;th&gt;</code> y <code>&lt;tbody</code>&gt; para dibujar la tabla. Por ejemplo:</p> a * b = a*b 7 * 1 = 7 7 * 2 = 14 ... 7 * 10 = 70 </li> <li> <p><code>224formulario.html</code>: Crea un formulario que permita leer una <code>cantidad</code>.  </p> <p>Tip</p> <p>Para guardar un dato oculto puedes utilizar un campo de formulario de tipo oculto: <code>&lt;input type=\"hidden\" name=\"cantidad\" value=\"33\" /&gt;</code></p> <p><code>224leerDatos.php</code>: a partir de <code>cantidad</code>, prepara un formulario con tantas cajas de datos como su valor. Finalmente, en <code>224sumarDatos.php</code>: a partir de los datos de todas las cajas de la p\u00e1gina anterior, s\u00famalos y muestra el total.</p> </li> <li> <p><code>225formulario.html</code> y <code>225tabla.php</code>: A partir de un n\u00famero de <code>filas</code> y <code>columnas</code>, crear una tabla con ese tama\u00f1o. Las celdas deben estar rellenadas con los valores de las coordenadas de cada celda.</p> </li> <li><code>226formulario.html</code> y <code>226cuadrado.php</code>: Bas\u00e1ndote en el ejercicio anterior, rellena la tabla de manera que solo los bordes tengan contenido, qued\u00e1ndose el resto de celdas en blanco. </li> <li><code>227formulario.html</code> y <code>227equis.php</code>: Bas\u00e1ndote en el ejercicio anterior, ahora s\u00f3lo debe aparecer el contenido de los dos diagonales.</li> <li><code>228cuadradoMultiplicar.php</code>: Crea un programa que muestre por pantalla un cuadrado exactamente igual (f\u00edjate bien en los encabezados, tanto de las filas como de las columnas) al de la imagen con las tablas de multiplicar.</li> </ol> <ol> <li> <p><code>230aleatorios50.php</code>: Rellena un array con 50 n\u00fameros aleatorios comprendidos entre el 0 y el 99, y luego mu\u00e9stralo en una lista desordenada. Para crear un n\u00famero aleatorio, utiliza la funci\u00f3n <code>rand(inicio, fin)</code>. Por ejemplo:</p> <pre><code>$num = rand(0, 99)\n</code></pre> </li> <li> <p><code>231bola8.html</code>: Prepara un formulario con un caja de texto que realice a una pregunta al usuario. <code>231bola8.php</code>: A partir del anterior, crea un programa que muestre la pregunta recibida y genere una respuesta de manera aleatoria entre un conjunto de respuestas predefinidas, almacenadas en un array: Si, no, quiz\u00e1s, claro que s\u00ed, por supuesto que no, no lo tengo claro, seguro, yo dir\u00eda que s\u00ed, ni de co\u00f1a, etc... Este ejercicio se basa en el juego de la Bola 8 m\u00e1gica.</p> </li> <li> <p><code>232mates.php</code>: A partir del ejercicio 230, genera un array aleatorio de 33 elementos con n\u00fameros comprendidos entre el 0 y 100 y calcula:</p> <ul> <li>El mayor</li> <li>El menor</li> <li>La media</li> </ul> </li> <li> <p><code>233sexos.php</code>: Rellena un array de 100 elementos de manera aleatoria con valores <code>M</code> o <code>F</code> (por ejemplo <code>[\"M\", \"M\", \"F\", \"M\", ...]</code>). Una vez completado, vuelve a recorrerlo y calcula cuantos elementos hay de cada uno de los valores almacenando el resultado en un array asociativo <code>['M' =&gt; 44, 'F' =&gt; 66]</code> (no utilices variables para contar las <code>M</code> o las <code>F</code>). Finalmente, muestra el resultado por pantalla</p> </li> <li> <p><code>234monedas.php</code>: Vuelve a realizar el ejercicio 207, el de las monedas (500, 200, 100, 50, 20, 10, 5, 2, 1), pero haciendo uso de arrays y un bucle. Almacena el resultado en un array asociativo. Muestra el resultado en una lista desordenada \u00fanicamente con las cantidades que tienen alg\u00fan valor.</p> </li> <li> <p><code>235alturas.php</code>: Mediante un array asociativo, almacena el nombre y la altura de 5 personas (<code>nombre =&gt; altura</code>). Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML. Finalmente a\u00f1ade una \u00faltima fila a la tabla con la altura media.</p> </li> <li> <p><code>236personas.php</code>: Mediante un array bidimensional, almacena el nombre, altura y email de 5 personas. Para ello, crea un array de personas, siendo cada persona un array asociativo: <code>[ ['nombre'=&gt;'Aitor', 'altura'=&gt;182, 'email'=&gt;'aitor@correo.com'],[\u2026],\u2026 ]</code> Posteriormente, recorre el array y mu\u00e9stralo en una tabla HTML.</p> </li> <li> <p><code>237leerCantidad.html</code> y <code>237leerPersonas.php</code>: a partir de un formulario con un campo de <code>cantidad</code> de personas, generar un nuevo formulario para leer el nombre, altura y email de <code>cantidad</code> personas. <code>237gestionarPersonas.php</code>: A partir de las personas introducidas, mostrar sus datos en una tabla, y posteriormente, destacar los datos del m\u00e1s alto y el del m\u00e1s bajo.</p> </li> <li> <p><code>238tablaDistintos.php</code>: Rellena un array bidimensional de 6 filas por 9 columnas con n\u00fameros aleatorios comprendidos entre 100 y 999 (ambos incluidos). Todos los n\u00fameros deben ser distintos, es decir, no se puede repetir ninguno. Muestra a continuaci\u00f3n por pantalla el contenido del array de tal forma que:</p> <ul> <li>La columna del m\u00e1ximo debe aparecer en azul.</li> <li>La fila del m\u00ednimo debe aparecer en verde</li> <li>El resto de nu\u0301meros deben aparecer en negro.</li> </ul> </li> </ol> <ol> <li> <p><code>240arrayPar.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que averig\u00fce si un n\u00famero es par: <code>esPar(int $num): bool</code></li> <li>Una funci\u00f3n que devuelva un array de tama\u00f1o <code>$tam</code> con n\u00fameros aleatorios comprendido entre <code>$min</code> y <code>$max</code> : <code>arrayAleatorio(int $tam, int $min, int $max) : array</code></li> <li>Una funci\u00f3n que reciba un <code>$array</code> por referencia y devuelva la cantidad de n\u00fameros pares que hay almacenados: <code>arrayPares(array &amp;$array): int</code></li> </ul> </li> <li> <p><code>241parametrosVariables.php</code>: Crea las siguientes funciones:</p> <ul> <li>Una funci\u00f3n que devuelva el mayor de todos los n\u00fameros recibidos como par\u00e1metros: <code>function mayor(): int</code>. Utiliza las funciones <code>func_get_args()</code>, etc... No puedes usar la funci\u00f3n <code>max()</code>.</li> <li>Una funci\u00f3n que concatene todos los par\u00e1metros recibidos separ\u00e1ndolos con un espacio: <code>function concatenar(...$palabras) : string</code>. Utiliza el operador <code>...</code>.</li> </ul> </li> <li> <p><code>242matematicas.php</code>: A\u00f1ade las siguientes funciones:</p> <ul> <li><code>digitos(int $num): int</code> \u2192 devuelve la cantidad de d\u00edgitos de un n\u00famero.</li> <li><code>digitoN(int $num, int $pos): int</code> \u2192 devuelve el d\u00edgito que ocupa, empezando por la izquierda, la posici\u00f3n <code>$pos</code>.</li> <li><code>quitaPorDetras(int $num, int $cant): int</code> \u2192 le quita por detr\u00e1s (derecha) <code>$cant</code> d\u00edgitos.</li> <li><code>quitaPorDelante(int $num, int $cant): int</code> \u2192 le quita por delante (izquierda) <code>$cant</code> d\u00edgitos.</li> </ul> <p>Para probar las funciones, haz uso tanto de paso de argumentos posicionales como argumentos con nombre.</p> </li> <li> <p><code>243biblioteca.php</code>: crea un archivo con funciones para sumar, restar, multiplicar y dividir dos n\u00fameros. <code>243arrayFunciones.php</code>: haciendo uso de un array que almacene el nombre de las funciones del archivo anterior, a partir de dos n\u00fameros recibidos por URL, recorre el array e invoca a las funciones de manera din\u00e1mica haciendo uso de funciones variable.</p> </li> <li> <p><code>244euros.php</code>: Crea una biblioteca con dos funciones:</p> <ul> <li>peseta2euros: pasa de pesetas a euros</li> <li>euros2pesetas: pasa de euros a pesetas </li> </ul> <p>Cada funci\u00f3n debe recibir dos par\u00e1metros:</p> <ul> <li>La cantidad a transformar</li> <li>La cotizaci\u00f3n, con un par\u00e1metro por defecto con el factor de transformaci\u00f3n.</li> </ul> <p><code>244calculadoraEuros.php</code>: utiliza <code>243euros.php</code> y prueba las funciones pasando tanto cantidades con la cotizaci\u00f3n por defecto, como con nuevas cotizaciones. Recuerda que 1 euro son/eran 166.36 pesetas.</p> </li> <li> <p><code>245preparaTiquetCompra.php</code>: A partir de una cantidad de productos, leer el nombre y coste de la cantidad de productos indicados (similar al ejercicio 237, pero esta vez no hace falta crear el formulario con la cantidad, se recibe mediante un par\u00e1metro GET via URL). <code>245imprimeTiquetCompra.php</code>: Tras leer los datos del tiquet de compra, enumera en una tabla los productos, con su precio en euros y pesetas, y finalmente, en una \u00faltima fila, totalizar en ambas monedas. </p> </li> <li>A partir de los archivos creados en el ejercicio anterior, crea una plantilla mediante includes: <code>246preparaCompra.php</code>: similar a <code>245preparaTiquetCompra.php</code>, pero separando el encabezado (Supermercado Severo en <code>h1</code>) y el pie (Tu supermercado de confianza) en ficheros externos y referenciando a ellos mediante <code>include</code>. <code>246listaCompra.php</code>: recibe los datos del anterior, y reutiliza parte de <code>245imprimeTiquetCompra.php</code> cambiando la tabla por una lista desordenada de los productos junto a su precio.</li> <li> <p>Vamos a simular un formulario de acceso:</p> <ul> <li><code>247login.php</code>: el formulario de entrada, que solicita el usuario y contrase\u00f1a.</li> <li><code>247compruebaLogin.php</code>: recibe los datos y comprueba si son correctos (los usuarios se guardan en un array asociativo) pasando el control mediante el uso de <code>include</code> a:<ul> <li><code>247ok.php</code>: El usuario introducido es correcto</li> <li><code>247ko.php</code>: El usuario es incorrecto. Informar si ambos est\u00e1n mal o solo la contrase\u00f1a. Volver a mostrar el formulario de acceso.</li> </ul> </li> </ul> </li> </ol> <p><p>Todos los ejercicios se deben realizar creando nuevas funciones para encapsular el c\u00f3digo. Adem\u00e1s de la propia funci\u00f3n, el ejercicio debe contener c\u00f3digo para poder probarlo.</p></p> <ol> <li><code>250fraseImpares.php</code>: Lee una frase y devuelve una nueva con solo los caracteres de las posiciones impares.</li> <li><code>251vocales.php</code>: A partir de una frase, devuelve la cantidad de cada una de las vocales, y el total de ellas.</li> <li> <ul> <li>Letras totales y cantidad de palabras</li> <li>Una l\u00ednea por cada palabra indicando su tama\u00f1o</li> </ul> <p><code>252analizador.php</code>: A partir de una frase con palabras s\u00f3lo separadas por espacios, devolver</p> <p>Nota: no se puede usar <code>str_word_count</code> <code>252analizadorWC.php</code>: Investiga que hace la funci\u00f3n <code>str_word_count</code>, y vuelve a hacer el ejercicio.</p> </li> <li> <p><code>253cani.php</code>: EsCrIbE uNa FuNcI\u00f3N qUe TrAnSfOrMe UnA cAdEnA eN cAnI.</p> </li> <li><code>254palindromo.php</code>: Escribe una funci\u00f3n que devuelva un booleano indicando si una palabra es pal\u00edndroma (se lee igual de izquierda a derecha que de derecha a izquierda, por ejemplo, \u201cligar es ser agil\u201d).</li> <li><code>255codificar.php</code>: Utilizando las funciones para trabajar con caracteres, a partir de una cadena y un desplazamiento: <ul> <li>Si el desplazamiento es 1, sustituye la A por B, la B por C, etc.</li> <li>El desplazamiento no puede ser negativo</li> <li>Si se sale del abecedario, debe volver a empezar</li> <li>Hay que respetar los espacios, puntos y comas.</li> </ul> </li> <li><code>256filtrado.html</code>: Crea un programa que permita al usuario leer un conjunto de n\u00fameros separados por espacios. <code>256filtrado.php</code>: El programa filtrar\u00e1 los n\u00fameros le\u00eddos para volver a mostrar \u00fanicamente los n\u00fameros pares e indicar\u00e1 la cantidad existente.     <pre><code>Dame n\u00fameros: 1 4 7 9 23 10 8\nLos 3 n\u00fameros pares son: 4 10 8\n</code></pre></li> <li><code>257investiga.php</code>: Investiga las siguientes funciones de cadena (explica para qu\u00e9 sirven mediante comentarios, y programa un peque\u00f1o ejemplo de cada una de ellas): <code>ucwords</code>, <code>strrev</code>, <code>str_repeat</code> y <code>md5</code>.</li> </ol> <p>Los siguientes ejercicios se basan en la generaci\u00f3n de n\u00fameros aleatorios.</p> <ol> <li><code>260generador.php</code>: Crea una funci\u00f3n que permite generar una letra aleatoria, may\u00fascula o min\u00fascula.</li> <li><code>261generaContrasenya.php</code>: Crea una funci\u00f3n que a partir de un tama\u00f1o, genere una contrase\u00f1a aleatoria compuesta de letras y d\u00edgitos de manera aleatoria.</li> <li><code>262quinielas.php</code>: Crea las siguientes funciones:<ul> <li><code>quinigol() : array</code> \u2192 Genera un array multidimensional con 6 resultados aleatorios con combinaciones <code>[012M, 012M]</code></li> <li><code>quiniela() : array</code> \u2192 Genera un array con una combinaci\u00f3n de quiniela generada de manera aleatoria: 14 resultados con <code>1X2</code> y el pleno al quince con <code>[012M, 012M]</code></li> <li><code>tabla(array $quiniela) : string</code> \u2192 transforma un array de una quniela en una tabla HTML</li> </ul> </li> </ol>"},{"location":"actividades/03.php.oo.activitys.html","title":"03.php.oo.activitys","text":""},{"location":"actividades/03.php.oo.activitys.html#actividades-de-programacion-orientada-a-objetos","title":"Actividades de Programaci\u00f3n Orientada a Objetos","text":"<ol> <li>Investiga la diferencia entre un paradigma orientado a objetos basado en clases (PHP) respecto a uno basado en prototipos (JavaScript).</li> </ol>"},{"location":"actividades/03.php.oo.activitys.html#objetos","title":"Objetos","text":"<ol> <li><code>301Empleado.php</code>: Crea una clase <code>Empleado</code> con su nombre, apellidos y sueldo. Encapsula las propiedades mediante getters/setters y a\u00f1ade m\u00e9todos para:<ul> <li>Obtener su nombre completo \u2192 <code>getNombreCompleto(): string</code></li> <li>Que devuelva un booleano indicando si debe o no pagar impuestos (se pagan cuando el sueldo es superior a 3333\u20ac) \u2192 <code>debePagarImpuestos(): bool</code></li> </ul> </li> <li><code>302EmpleadoTelefonos.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una propiedad privada que almacene un array de n\u00fameros de tel\u00e9fonos. A\u00f1ade los siguientes m\u00e9todos:<ul> <li><code>public function anyadirTelefono(int $telefono) : void</code> \u2192 A\u00f1ade un tel\u00e9fono al array</li> <li><code>public function listarTelefonos(): string</code> \u2192 Muestra los tel\u00e9fonos separados por comas</li> <li><code>public function vaciarTelefonos(): void</code> \u2192 Elimina todos los tel\u00e9fonos</li> </ul> </li> <li> <p><code>303EmpleadoConstructor.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Elimina los setters de <code>nombre</code> y <code>apellidos</code>, de manera que dichos datos se asignan mediante el constructor (utiliza la sintaxis de PHP7). Si el constructor recibe un tercer par\u00e1metro, ser\u00e1 el sueldo del <code>Empleado</code>. Si no, se le asignar\u00e1 1000\u20ac como sueldo inicial.</p> <p><code>303EmpleadoConstructor8.php</code>: Modifica la clase y utiliza la sintaxis de PHP 8 de promoci\u00f3n de las propiedades del constructor.</p> </li> <li> <p><code>304EmpleadoConstante.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. A\u00f1ade una constante <code>SUELDO_TOPE</code> con el valor del sueldo que debe pagar impuestos, y modifica el c\u00f3digo para utilizar la constante.</p> </li> <li><code>305EmpleadoSueldo.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Cambia la constante por una variable est\u00e1tica <code>sueldoTope</code>, de manera que mediante getter/setter puedas modificar su valor.</li> <li> <p><code>306EmpleadoStatic.php</code>: Copia la clase del ejercicio anterior y modif\u00edcala. Completa el siguiente m\u00e9todo con una cadena HTML que muestre los datos de un empleado dentro de un p\u00e1rrafo y todos los tel\u00e9fonos mediante una lista ordenada (para ello, deber\u00e1s crear un getter para los tel\u00e9fonos):</p> <ul> <li><code>public static function toHtml(Empleado $emp): string</code></li> </ul> <p> Ejercicio 307 </p> </li> <li> <p><code>307Persona.php</code>: Copia la clase del ejercicio anterior en <code>307Empleado.php</code> y modif\u00edcala. Crea una clase <code>Persona</code> que sea padre de <code>Empleado</code>, de manera que <code>Persona</code> contenga el nombre y los apellidos, y en <code>Empleado</code> quede el salario y los tel\u00e9fonos.</p> </li> <li> <p><code>308PersonaH.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. Crea en <code>Persona</code> el m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code>, y modifica en <code>Empleado</code> el mismo m\u00e9todo <code>toHtml(Persona $p)</code>, pero cambia la firma para que reciba una <code>Persona</code> como par\u00e1metro.     Para acceder a las propiedades del empleado con la persona que recibimos como par\u00e1metro, comprobaremos su tipo:</p> <pre><code>&lt;?php\nclass Empleado extends Persona {\n    /// resto del c\u00f3digo\n\n\n    public static function toHtml(Persona $p): string {\n        if ($p instanceof Empleado) {\n            // Aqui ya podemos acceder a las propiedades y m\u00e9todos de Empleado\n        }\n    }\n}\n</code></pre> </li> <li> <p><code>309PersonaE.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. A\u00f1ade en <code>Persona</code> un atributo <code>edad</code> A la hora de saber si un empleado debe pagar impuestos, lo har\u00e1 siempre y cuando tenga m\u00e1s de 21 a\u00f1os y dependa del valor de su sueldo. Modifica todo el c\u00f3digo necesario para mostrar y/o editar la edad cuando sea necesario.</p> </li> <li> <p><code>310PersonaS.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. A\u00f1ade nuevos m\u00e9todos que hagan una representaci\u00f3n de todas las propiedades de las clases <code>Persona</code> y <code>Empleado</code>, de forma similar a los realizados en HTML, pero sin que sean est\u00e1ticos, de  manera que obtenga los datos mediante <code>$this</code>.</p> <ul> <li><code>function public __toString(): string</code></li> </ul> </li> </ol> <p>Magic methods</p> <p>El m\u00e9todo <code>__toString()</code> es un m\u00e9todo m\u00e1gico que se invoca autom\u00e1ticamente cuando queremos obtener la representaci\u00f3n en cadena de un objeto.</p> <ol> <li> <p><code>311PersonaA.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas. Transforma <code>Persona</code> a una clase abstracta donde su m\u00e9todo est\u00e1tico <code>toHtml(Persona $p)</code> tenga que ser redefinido en todos sus hijos.</p> </li> <li> <p><code>312Trabajador.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas.</p> <ul> <li>Cambia la estructura de clases conforme al gr\u00e1fico respetando todos los m\u00e9todos que ya est\u00e1n hechos.</li> <li><code>Trabajador</code> es una clase abstracta que ahora almacena los <code>telefonos</code> y donde <code>calcularSueldo</code> es un m\u00e9todo abstracto de manera que:<ul> <li>El sueldo de un <code>Empleado</code> se calcula a partir de las horas trabajadas y lo que cobra por hora.</li> <li>Para los <code>Gerente</code>s, su sueldo se incrementa porcentualmente en base a su edad: <code>salario + salario*edad/100</code></li> </ul> </li> </ul> <p> Ejercicio 312 </p> </li> <li> <p><code>313Empresa.php</code>: Utilizando las clases de los ejercicios anteriores:</p> <ul> <li>Crea una clase <code>Empresa</code> que adem\u00e1s del nombre y la direcci\u00f3n, contenga una propiedad con un array de <code>Trabajador</code>es, ya sean <code>Empleado</code>s o <code>Gerente</code>s. </li> <li>A\u00f1ade getters/setters para el nombre y direcci\u00f3n.</li> <li>A\u00f1ade m\u00e9todos para a\u00f1adir y listar los trabajadores.<ul> <li><code>public function anyadirTrabajador(Trabajador $t)</code></li> <li><code>public function listarTrabajadoresHtml() : string</code> -&gt; utiliza <code>Trabajador::toHtml(Persona $p)</code></li> </ul> </li> <li>A\u00f1ade un m\u00e9todo para obtener el coste total en n\u00f3minas.<ul> <li><code>public function getCosteNominas(): float</code> -&gt; recorre los trabajadores e invoca al m\u00e9todo <code>calcularSueldo()</code>.</li> </ul> </li> </ul> </li> <li> <p><code>314EmpresaI.php</code>: Copia las clases del ejercicio anterior y modif\u00edcalas.</p> <ul> <li>Crea un interfaz JSerializable, de manera que ofrezca los m\u00e9todos:<ul> <li><code>toJSON(): string</code> \u2192 utiliza la funci\u00f3n <code>json_encode(mixed)</code>. Ten en cuenta que como tenemos las propiedades de los objetos privados, debes recorrer las propiedades y colocarlas en un mapa. Por ejemplo: <pre><code>&lt;?php\npublic function toJSON(): string {\n    foreach ($this as $clave =&gt; $valor) {\n        $mapa-&gt;$clave = $valor;\n    }\n    return json_encode($mapa);\n}\n?&gt;\n</code></pre></li> <li><code>toSerialize(): string</code> \u2192 utiliza la funci\u00f3n <code>serialize(mixed)</code></li> </ul> </li> <li>Modifica todas las clases que no son abstractas para que implementen el interfaz creado.</li> </ul> </li> </ol>"},{"location":"actividades/03.php.oo.activitys.html#proyecto-videoclub","title":"Proyecto Videoclub","text":"<p>En los siguientes ejercicios vamos a simular un peque\u00f1o proyecto de un Videoclub (basado en la propuesta que hace el tutorial de desarrolloweb.com), el cual vamos a realizar mediante un desarrollo incremental y siguiendo la pr\u00e1ctica de programaci\u00f3n en parejas (pair programming).</p> <p>Antes de nada, crea un repositorio privado en GitHub y sube el proyecto actual de Videoclub. Una vez creado, invita a tu compa\u00f1ero al repositorio como colaborador.</p> <ul> <li>Inicializa en local tu repostorio de git, mediante <code>git init</code></li> <li>A\u00f1ade y sube los cambios a tu repositorio, mediante <code>git add .</code> y luego <code>git commit -m 'Inicializando proyecto'.</code></li> <li>Conecta tu repositorio con GitHub y sube los cambios (mira la instrucciones de GitHub: comandos <code>git remote</code> y <code>git push</code>).</li> <li>Tu compa\u00f1ero deber\u00e1 descargar el proyecto con sus credenciales.</li> </ul> <p>Proyecto no real</p> <p>El siguiente proyecto est\u00e1 pensado desde un punto de vista formativo. Algunas de las decisiones que se toman no se deben usar (como hacer <code>echo</code> dentro de las clases) o probar el c\u00f3digo comparando el resultado en el navegador.</p> <p>Cada clase debe ir en un archivo php separado. Para facilitar su implementaci\u00f3n, se muestra la estructura UML del modelo y un fragmento de c\u00f3digo para probar las clases:</p> Creamos el Soporte <ol> <li> <p>Crea una clase para almacenar soportes (<code>Soporte.php</code>). Esta clase ser\u00e1 la clase padre de los diferentes soportes con los que trabaje nuestro videoclub (cintas de v\u00eddeo, videojuegos, etc...):</p> <ul> <li>Crea el constructor que inicialice sus propiedades. F\u00edjate que la clase no tiene m\u00e9todos setters.</li> <li>Definir una constante mediante un propiedad privada y est\u00e1tica denominada `IVA con un valor del 21%</li> <li>Crear un archivo (<code>inicio.php</code>) para usar las clases y copia el siguiente fragmento:</li> </ul> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"Soporte.php\";\n\n$soporte1\u00a0=\u00a0new\u00a0Soporte(\"Tenet\",\u00a022,\u00a03);\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$soporte1-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$soporte1-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$soporte1-&gt;getPrecioConIVA()\u00a0.\u00a0\"\u00a0euros\";\n$soporte1-&gt;muestraResumen();\n</code></pre> <p><pre>\nTenet\nPrecio: 3 euros\nPrecio IVA incluido: 3.48 euros\nTenet\n3 \u20ac (IVA no incluido)\n</pre></p> A\u00f1adimos Cinta de Video <ol> <li> <p>Crea la clase <code>CintaVideo</code> la cual hereda de <code>Soporte</code>. A\u00f1ade el atributo <code>duracion</code> y sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code> (desde <code>CintaVideo</code> deber\u00e1s llamar al m\u00e9todo <code>muestraResumen</code> del padre).</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"CintaVideo.php\";\n\n$miCinta\u00a0=\u00a0new\u00a0CintaVideo(\"Los\u00a0cazafantasmas\",\u00a023,\u00a03.5,\u00a0107);\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$miCinta-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$miCinta-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$miCinta-&gt;getPrecioConIva()\u00a0.\u00a0\"\u00a0euros\";\n$miCinta-&gt;muestraResumen();\n</code></pre> <p><pre>\nLos cazafantasmas\nPrecio: 3.5 euros\nPrecio IVA incluido: 4.06 euros\nPel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos\n</pre></p> A\u00f1adimos Dvd <ol> <li> <p>Crea la clase <code>Dvd</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>idiomas</code> y <code>formatoPantalla</code>. A continuaci\u00f3n sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude\u00a0\"Dvd.php\";\n\n$miDvd\u00a0=\u00a0new\u00a0Dvd(\"Origen\",\u00a024,\u00a015,\u00a0\"es,en,fr\",\u00a0\"16:9\");\u00a0\necho\u00a0\"&lt;strong&gt;\"\u00a0.\u00a0$miDvd-&gt;titulo\u00a0.\u00a0\"&lt;/strong&gt;\";\u00a0\necho\u00a0\"&lt;br&gt;Precio:\u00a0\"\u00a0.\u00a0$miDvd-&gt;getPrecio()\u00a0.\u00a0\"\u00a0euros\";\u00a0\necho\u00a0\"&lt;br&gt;Precio\u00a0IVA\u00a0incluido:\u00a0\"\u00a0.\u00a0$miDvd-&gt;getPrecioConIva()\u00a0.\u00a0\"\u00a0euros\";\n$miDvd-&gt;muestraResumen();\n</code></pre> <p><pre>\nOrigen\nPrecio: 15 euros\nPrecio IVA incluido: 17.4 euros\nPel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9\n</pre></p> A\u00f1adimos Juego <ol> <li> <p>Crea la clase <code>Juego</code> la cual hereda de <code>Soporte</code>. A\u00f1ade los atributos <code>consola</code>, <code>minNumJugadores</code> y <code>maxNumJugadores</code>. A continuaci\u00f3n a\u00f1ade el m\u00e9todo <code>muestraJugadoresPosibles</code>, el cual debe mostrar Para un jugador, Para X jugadores o De X a Y jugadores dependiendo de los valores de las atributos creados. Finalmente, sobreescribe tanto el contructor como el m\u00e9todo <code>muestraResumen</code>.</p> <p>A\u00f1ade a <code>inicio.php</code> el c\u00f3digo para probar la clase:</p> </li> </ol> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude \"Juego.php\";\n\n$miJuego = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1); \necho \"&lt;strong&gt;\" . $miJuego-&gt;titulo . \"&lt;/strong&gt;\"; \necho \"&lt;br&gt;Precio: \" . $miJuego-&gt;getPrecio() . \" euros\"; \necho \"&lt;br&gt;Precio IVA incluido: \" . $miJuego-&gt;getPrecioConIva() . \" euros\";\n$miJuego-&gt;muestraResumen();\n</code></pre> <p><pre>\nThe Last of Us Part II\nPrecio: 49.99 euros\nPrecio IVA incluido: 57.9884 euros\nJuego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador\n</pre></p> <p>Llegados a este punto, nuestro modelo es similar al siguiente diagrama:</p> Modelo inicial de Videoclub A\u00f1adimos Cliente <ol> <li> <p>Crear la clase <code>Cliente</code>. El constructor recibir\u00e1 el <code>nombre</code>, <code>numero</code> y <code>maxAlquilerConcurrente</code>, este \u00faltimo pudiendo ser opcional y tomando como valor por defecto 3. Tras ello, a\u00f1ade getter/setter \u00fanicamente a <code>numero</code>, y un getter a <code>numSoportesAlquilados</code> (este campo va a almacenar un contador del total de alquileres que ha realizado). El array de soportes alquilados contedr\u00e1 clases que hereden de <code>Soporte</code>. Finalmente, a\u00f1ade el m\u00e9todo <code>muestraResumen</code> que muestre el nombre y la cantidad de alquileres (tama\u00f1o del array <code>soportesAlquilados</code>).</p> </li> <li> <p>Dentro de <code>Cliente</code>, a\u00f1ade las siguiente operaciones:</p> <ul> <li><code>tieneAlquilado(Soporte $s): bool</code> \u2192 Recorre el array de soportes y comprueba si est\u00e1 el soporte</li> <li><code>alquilar(Soporte $s): bool</code> -\u2192 Debe comprobar si el soporte est\u00e1 alquilado y si no ha superado el cupo de alquileres. Al alquilar, incrementar\u00e1 el <code>numSoportesAlquilados</code> y almacenar\u00e1 el soporte en el array. Para cada caso debe mostrar un mensaje informando de lo ocurrido.</li> </ul> </li> <li> <p>Seguimos con <code>Cliente</code> para a\u00f1adir las operaciones:</p> <ul> <li><code>devolver(int $numSoporte): bool</code> \u2192 Debe comprobar que el soporte estaba alquilado  y actualizar la cantidad de soportes alquilados. Para cada caso debe mostrar un mensaje informando de lo ocurrido</li> <li><code>listarAlquileres(): void</code> \u2192 Informa de cuantos alquileres tiene el cliente y los muestra.</li> </ul> </li> </ol> <p>Crea el archivo <code>inicio2.php</code> con el siguiente c\u00f3digo fuente para probar la clase:</p> C\u00f3digo de pruebaNavegador <pre><code>&lt;?php\ninclude_once\u00a0\"CintaVideo.php\";\ninclude_once\u00a0\"Dvd.php\";\ninclude_once\u00a0\"Juego.php\";\ninclude_once\u00a0\"Cliente.php\";\n\n//instanciamos un par de objetos cliente\n$cliente1 = new Cliente(\"Bruce Wayne\", 23);\n$cliente2 = new Cliente(\"Clark Kent\", 33);\n\n//mostramos el n\u00famero de cada cliente creado \necho \"&lt;br&gt;El identificador del cliente 1 es: \" . $cliente1-&gt;getNumero();\necho \"&lt;br&gt;El identificador del cliente 2 es: \" . $cliente2-&gt;getNumero();\n\n//instancio algunos soportes \n$soporte1 = new CintaVideo(\"Los cazafantasmas\", 23, 3.5, 107);\n$soporte2 = new Juego(\"The Last of Us Part II\", 26, 49.99, \"PS4\", 1, 1);  \n$soporte3 = new Dvd(\"Origen\", 24, 15, \"es,en,fr\", \"16:9\");\n$soporte4 = new Dvd(\"El Imperio Contraataca\", 4, 3, \"es,en\",\"16:9\");\n\n//alquilo algunos soportes\n$cliente1-&gt;alquilar($soporte1);\n$cliente1-&gt;alquilar($soporte2);\n$cliente1-&gt;alquilar($soporte3);\n\n//voy a intentar alquilar de nuevo un soporte que ya tiene alquilado\n$cliente1-&gt;alquilar($soporte1);\n//el cliente tiene 3 soportes en alquiler como m\u00e1ximo\n//este soporte no lo va a poder alquilar\n$cliente1-&gt;alquilar($soporte4);\n//este soporte no lo tiene alquilado\n$cliente1-&gt;devolver(4);\n//devuelvo un soporte que s\u00ed que tiene alquilado\n$cliente1-&gt;devolver(2);\n//alquilo otro soporte\n$cliente1-&gt;alquilar($soporte4);\n//listo los elementos alquilados\n$cliente1-&gt;listaAlquileres();\n//este cliente no tiene alquileres\n$cliente2-&gt;devolver(2);\n</code></pre> <p><pre>\nEl identificador del cliente 1 es: 23\nEl identificador del cliente 2 es: 33\nAlquilado soporte a: Bruce Wayne\n<p>Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos</p>\n<p>Alquilado soporte a: Bruce Wayne</p>\n<p>Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador</p>\n<p>Alquilado soporte a: Bruce Wayne</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>El cliente ya tiene alquilado el soporte Los cazafantasmas</p>\n<p>Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>No se ha podido encontrar el soporte en los alquileres de este cliente</p>\n<p>No se ha podido encontrar el soporte en los alquileres de este cliente</p>\n<p>Este cliente tiene 3 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>El cliente tiene 3 soportes alquilados</p>\n<p>Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos</p>\n<p>Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n15 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>Este cliente no tiene alquilado ning\u00fan elemento\n</p>\n\n\n\n<ol>\n<li>Llegado a este punto, vamos a relacionar los clientes y los soportes mediante la clase <code>Videoclub</code>. As\u00ed pues crea la clase que representa el gr\u00e1fico, teniendo en cuenta que:<ul>\n<li><code>productos</code> es un array de <code>Soporte</code></li>\n<li><code>socios</code> es una array de <code>Cliente</code></li>\n<li>Los m\u00e9todos p\u00fablicos de incluir alg\u00fan soporte, crear\u00e1n la clase y llamar\u00e1n al m\u00e9todo privado de <code>incluirProducto</code>, el cual es el encargado de introducirlo dentro del array.</li>\n</ul>\n</li>\n</ol>\n<p>El modelo completo quedar\u00e1 de la siguiente manera:</p>\n\n    \n    Modelo completo de Videoclub\n\n\n<p>Y para probar el proyecto, dentro <code>inicio3.php</code> colocaremos:</p>\nC\u00f3digo de pruebaNavegador\n\n\n<pre><code>&lt;?php\ninclude_once \"Videoclub.php\"; // No incluimos nada m\u00e1s\n\n$vc = new Videoclub(\"Severo 8A\"); \n\n//voy a incluir unos cuantos soportes de prueba \n$vc-&gt;incluirJuego(\"God of War\", 19.99, \"PS4\", 1, 1); \n$vc-&gt;incluirJuego(\"The Last of Us Part II\", 49.99, \"PS4\", 1, 1);\n$vc-&gt;incluirDvd(\"Torrente\", 4.5, \"es\",\"16:9\"); \n$vc-&gt;incluirDvd(\"Origen\", 4.5, \"es,en,fr\", \"16:9\"); \n$vc-&gt;incluirDvd(\"El Imperio Contraataca\", 3, \"es,en\",\"16:9\"); \n$vc-&gt;incluirCintaVideo(\"Los cazafantasmas\", 3.5, 107); \n$vc-&gt;incluirCintaVideo(\"El nombre de la Rosa\", 1.5, 140); \n\n//listo los productos \n$vc-&gt;listarProductos(); \n\n//voy a crear algunos socios \n$vc-&gt;incluirSocio(\"Amancio Ortega\"); \n$vc-&gt;incluirSocio(\"Pablo Picasso\", 2); \n\n$vc-&gt;alquilaSocioProducto(1,2); \n$vc-&gt;alquilaSocioProducto(1,3); \n//alquilo otra vez el soporte 2 al socio 1. \n// no debe dejarme porque ya lo tiene alquilado \n$vc-&gt;alquilaSocioProducto(1,2); \n//alquilo el soporte 6 al socio 1. \n//no se puede porque el socio 1 tiene 2 alquileres como m\u00e1ximo \n$vc-&gt;alquilaSocioProducto(1,6); \n\n//listo los socios \n$vc-&gt;listarSocios();\n</code></pre>\n\n\n<p><pre>\nIncluido soporte 0\nIncluido soporte 1\nIncluido soporte 2\nIncluido soporte 3\nIncluido soporte 4\nIncluido soporte 5\nIncluido soporte 6\n<p>Listado de los 7 productos disponibles:\n1.- Juego para: PS4\nGod of War\n19.99 \u20ac (IVA no incluido)\nPara un jugador\n2.- Juego para: PS4\nThe Last of Us Part II\n49.99 \u20ac (IVA no incluido)\nPara un jugador\n3.- Pel\u00edcula en DVD:\nTorrente\n4.5 \u20ac (IVA no incluido)\nIdiomas:es\nFormato Pantalla:16:9\n4.- Pel\u00edcula en DVD:\nOrigen\n4.5 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9\n5.- Pel\u00edcula en DVD:\nEl Imperio Contraataca\n3 \u20ac (IVA no incluido)\nIdiomas:es,en\nFormato Pantalla:16:9\n6.- Pel\u00edcula en VHS:\nLos cazafantasmas\n3.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 107 minutos\n7.- Pel\u00edcula en VHS:\nEl nombre de la Rosa\n1.5 \u20ac (IVA no incluido)\nDuraci\u00f3n: 140 minutos</p>\n<p>Incluido socio 0\nIncluido socio 1</p>\n<p>Alquilado soporte a: Pablo Picasso</p>\n<p>Pel\u00edcula en DVD:\nTorrente\n4.5 \u20ac (IVA no incluido)\nIdiomas:es\nFormato Pantalla:16:9</p>\n<p>** Alquilado soporte a**: Pablo Picasso</p>\n<p>Pel\u00edcula en DVD:\nOrigen\n4.5 \u20ac (IVA no incluido)\nIdiomas:es,en,fr\nFormato Pantalla:16:9</p>\n<p>El cliente ya tiene alquilado el soporte Torrente</p>\n<p>Este cliente tiene 2 elementos alquilados. No puede alquilar m\u00e1s en este videoclub hasta que no devuelva algo</p>\n<p>Listado de 2 socios del videoclub:\n1.- Cliente 0: Amancio Ortega\nAlquileres actuales: 0\n2.- Cliente 1: Pablo Picasso\nAlquileres actuales: 2\n</p>\n\n\n\n<ol>\n<li>\n<p>Transforma <code>Soporte</code> a una clase abstracta y comprueba que todo sigue funcionando. \u00bfQu\u00e9 conseguimos al hacerla abstracta?</p>\n</li>\n<li>\n<p>Crea un interfaz <code>Resumible</code>, de manera que las clases que lo implementen deben ofrecer el m\u00e9todo <code>muestraResumen()</code>. Modifica la clase <code>Soporte</code> y haz que implemente el interfaz. \u00bfHace falta que tambi\u00e9n lo implementen los hijos?</p>\n</li>\n</ol>"},{"location":"actividades/03.php.oo.activitys.html#proyecto-videoclub-20","title":"Proyecto Videoclub 2.0","text":"<p>Antes de comenzar con la segunda parte del videoclub, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.329</code> y sube los cambios a GitHub.</p>\n<ol>\n<li>Modifica las operaciones de alquilar, tanto en <code>Cliente</code> como en <code>Videoclub</code>, para dar soporte al encadenamiento de m\u00e9todos.\nPosteriormente, modifica el c\u00f3digo de prueba para utilizar esta t\u00e9cnica.</li>\n<li>Haciendo uso de namespaces:<ul>\n<li>Coloca todas las clases/interfaces en <code>Dwes\\ProyectoVideoclub</code></li>\n<li>Cada clase debe hacer <code>include_once</code> de los recursos que emplea</li>\n<li>Coloca el/los archivos de prueba en el ra\u00edz (sin espacio de nombres)</li>\n<li>Desde el archivo de pruebas, utiliza <code>use</code> para poder realizar accesos sin cualificar</li>\n<li>Etiqueta los cambios como <code>v0.331</code>.</li>\n</ul>\n</li>\n<li>Reorganiza las carpeta tal como hemos visto en los apuntes: <code>app</code>, <code>test</code> y <code>vendor</code>.<ul>\n<li>Crea un fichero <code>autoload.php</code> para registrar la ruta donde encontrar las clases</li>\n<li>Modifica todo el c\u00f3digo necesario, incluyendo <code>autoload.php</code> donde sea necesario y borrando los includes previos.</li>\n</ul>\n</li>\n<li>A continuaci\u00f3n vamos a crear un conjunto de excepciones de aplicaci\u00f3n. Estas excepciones son simples, no necesitan sobreescribir ning\u00fan m\u00e9todo. As\u00ed pues, crea la excepci\u00f3n de aplicaci\u00f3n <code>VideoclubException</code> en el namespace <code>Dwes\\ProyectoVideoclub\\Util</code>.\nPosteriormente crea los siguientes hijos (deben heredar de <code>VideoclubException</code>), cada uno en su propio archivo:<ul>\n<li><code>SoporteYaAlquiladoException</code></li>\n<li><code>CupoSuperadoException</code></li>\n<li><code>SoporteNoEncontradoException</code></li>\n<li><code>ClienteNoEncontradoException</code></li>\n</ul>\n</li>\n<li>En <code>Cliente</code>, modifica los m\u00e9todos <code>alquilar</code> y <code>devolver</code>, para que hagan uso de las nuevas excepciones (lanz\u00e1ndolas cuando sea necesario) y funcionen como m\u00e9todos encadenados. Destacar que estos m\u00e9todos, no se capturar est\u00e1s excepciones, s\u00f3lo se lanzan.\nEn <code>Videoclub</code>, modifica <code>alquilarSocioPelicula</code> para capturar todas las excepciones que ahora lanza <code>Cliente</code> e informar al usuario en consecuencia.</li>\n<li>Vamos a modificar el proyecto para que el videoclub sepa qu\u00e9 productos est\u00e1n o no alquilados:<ul>\n<li>En <code>Soporte</code>, crea una propiedad p\u00fablica cuyo nombre sea <code>alquilado</code> que inicialmente estar\u00e1 a <code>false</code>. Cuando se alquile, se pondr\u00e1 a <code>true</code>. Al devolver, la volveremos a poner a <code>false</code>.</li>\n<li>En <code>Videoclub</code>, crea dos nuevas propiedades y sus getters:<ul>\n<li><code>numProductosAlquilados</code></li>\n<li><code>numTotalAlquileres</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Crea un nuevo m\u00e9todo en <code>Videoclub</code> llamado <code>alquilarSocioProductos(int numSocio, array numerosProductos)</code>, el cual debe recibir un array con los productos a alquilar.\nAntes de alquilarlos, debe comprobar que todos los soportes est\u00e9n disponibles, de manera que si uno no lo est\u00e1, no se le alquile ninguno.</li>\n<li>\n<p>Crea dos nuevos m\u00e9todos en <code>Videoclub</code>, y mediante la definici\u00f3n, deduce qu\u00e9 deben realizar:</p>\n<ul>\n<li><code>devolverSocioProducto(int numSocio, int numeroProducto)</code></li>\n<li><code>devolverSocioProductos(int numSocio, array numerosProductos)</code></li>\n</ul>\n<p>Deben soportar el encadenamiento de m\u00e9todos.\nRecuerda actualizar la propiedad <code>alquilado</code> de los diferentes soportes.</p>\n</li>\n</ol>\n<p>Cuando hayas realizado todos los ejercicios, crea una etiqueta mediante <code>git tag</code> con el nombre <code>v0.337</code> y sube los cambios a GitHub.</p>"},{"location":"actividades/04.php.oo.activitys.html","title":"04.php.oo.activitys","text":""},{"location":"actividades/04.php.oo.activitys.html#actividades-de-programacion-web","title":"Actividades de Programaci\u00f3n Web","text":"<ol> <li><code>401server.php</code>: igual que el ejemplo visto en los apuntes, muestra los valores de <code>$_SERVER</code> al ejecutar un script en tu ordenador. Prueba a pasarle par\u00e1metros por GET (y a no pasarle ninguno). Prepara un formulario (<code>401post.html</code>) que haga un env\u00edo por POST y compru\u00e9balo de nuevo. Crea una p\u00e1gina (<code>401enlace.html</code>) que tenga un enlace a <code>401server.php</code> y comprueba el valor de <code>HTTP_REFERER</code>.</li> </ol>"},{"location":"actividades/04.php.oo.activitys.html#formularios","title":"Formularios","text":"<ol> <li> <p><code>402formulario.html</code> y <code>402formulario.php</code>: Crea un formulario que solicite:</p> <ul> <li>Nombre y apellidos.</li> <li>Email.</li> <li>URL p\u00e1gina personal.</li> <li>Sexo (radio).</li> <li>N\u00famero de convivientes en el domicilio.</li> <li>Aficiones (checkboxes) \u2013 poner m\u00ednimo 4 valores.</li> <li>Men\u00fa favorito (lista selecci\u00f3n m\u00faltiple) \u2013 poner m\u00ednimo 4 valores.</li> </ul> <p>Muestra los valores cargados en una tabla-resumen.</p> </li> <li> <p><code>403validacion.php</code>: A partir del formulario anterior, introduce validaciones en HTML mediante el atributo <code>required</code> de los campos (uso los tipos adecuados para cada campo), y en comprueba los tipos de los datos y que cumplen los valores esperados (por ejemplo, en los checkboxes que los valores recogidos forman parte de todos los posibles). Puedes probar a pasarle datos erroneos via URL y comprobar su comportamiento. Tip: Investiga el uso de la funci\u00f3n <code>filter_var</code>.</p> </li> <li> <p><code>404subida.html</code> y <code>404subida.php</code>: Crea un formulario que permita subir un archivo al servidor. Adem\u00e1s del fichero, debe pedir en el mismo formulario dos campos num\u00e9ricos que soliciten la anchura y la altura. Comprueba que tanto el fichero como los datos llegan correctamente.</p> </li> <li> <p><code>405subidaImagen.php</code>: Modifica el ejercicio anterior para que \u00fanicamente permita subir im\u00e1genes (comprueba la propiedad <code>type</code> del archivo subido). Si el usuario selecciona otro tipo de archivos, se le debe informar del error y permitir que suba un nuevo archivo. En el caso de subir el tipo correcto, visualizar la imagen con el tama\u00f1o de anchura y altura recibido como par\u00e1metro.</p> </li> </ol>"},{"location":"actividades/04.php.oo.activitys.html#cookies-y-sesion","title":"Cookies y Sesi\u00f3n","text":"<ol> <li> <p><code>406contadorVisitas.php</code>: Mediante el uso de cookies, informa al usuario de si es su primera visita, o si no lo es, muestre su valor (valor de un contador). Adem\u00e1s, debes permitir que el usuario reinicialice su contador de visitas.</p> </li> <li> <p><code>407fondo.php</code>: Mediante el uso de cookies, crea una p\u00e1gina con un desplegable con varios colores, de manera que el usuario pueda cambiar el color de fondo de la p\u00e1gina (atributo <code>bgcolor</code>). Al cerrar la p\u00e1gina, \u00e9sta debe recordar, al menos durante 24h, el color elegido y la pr\u00f3xima vez que se cargue la pagina, lo haga con el \u00faltimo color seleccionado.</p> </li> <li> <p><code>408fondoSesion1.php</code>: Modifica el ejercicio anterior para almacenar el color de fondo en la sesi\u00f3n y no emplear cookies. Adem\u00e1s, debe contener un enlace al siguiente archivo.     <code>408fondoSesion2.php</code>: Debe mostrar el color y dar la posibilidad de:</p> <ul> <li>volver a la p\u00e1gina anterior mediante un enlace</li> <li>y mediante otro enlace, vaciar la sesi\u00f3n y volver a la p\u00e1gina anterior.</li> </ul> </li> <li> <p>Haciendo uso de la sesi\u00f3n, vamos a dividir el formulario del ejercicio <code>402formulario.php</code> en 2 subformularios:</p> <ul> <li><code>409formulario1.php</code> env\u00eda los datos (nombre y apellidos, email, url y sexo) a <code>409formulario2.php</code>.</li> <li><code>409formulario2.php</code> lee los datos y los mete en la sesi\u00f3n. A continuaci\u00f3n, muestra el resto de campos del formulario a rellenar (convivientes, aficiones y men\u00fa). Env\u00eda estos datos a <code>409formulario3.php</code>.</li> <li><code>409formulario3.php</code> recoge los datos enviados en el paso anterior y junto a los que ya estaban en la sesi\u00f3n, se muestran todos los datos en una tabla/lista desordenada.</li> </ul> </li> </ol>"},{"location":"actividades/04.php.oo.activitys.html#autenticacion","title":"Autenticaci\u00f3n","text":"<p>En los siguientes ejercicios vamos a montar una estructura de inicio de sesi\u00f3n similar a la vista en los apuntes.</p> <ol> <li><code>410index.php</code>: formulario de inicio de sesi\u00f3n</li> <li><code>411login.php</code>: hace de controlador, por lo que debe comprobar los datos recibidos (solo permite la entrada de <code>usuario/usuario</code> y si todo es correcto, ceder el control a la vista del siguiente ejercicio. No contiene c\u00f3digo HTML.</li> <li><code>412peliculas.php</code>: vista que muestra como t\u00edtulo \"Listado de Pel\u00edculas\", y una lista desordenada con tres pel\u00edculas.</li> <li><code>413logout.php</code>: vac\u00eda la sesi\u00f3n y nos lleva de nuevo al formulario de inicio de sesi\u00f3n. No contiene c\u00f3digo HTML</li> <li><code>414series.php</code>: A\u00f1ade un nueva vista similar a <code>412peliculas.php</code> que muestra un \"Listado de Series\" con una lista desordenada con tres series. Tanto <code>412pelicuas.php</code> como la vista recien creadas, deben tener un peque\u00f1o men\u00fa (sencillo, mediante enlaces) que permita pasar de un listado a otro. Comprueba que si se accede directamente a cualquiera de las vistas sin tener un usuario logueado via URL del navegador, no se muestra el listado.</li> <li>Modifica tanto el controlador como las vistas para que:<ul> <li>los datos los obtenga el controlador (almacena en la sesi\u00f3n un array de pel\u00edculas y otro de series)</li> <li>coloque los datos en la sesi\u00f3n</li> <li>En las vistas, los datos se recuperan de la sesi\u00f3n y se pintan en la lista desordenada recorriendo el array correspondiente.</li> </ul> </li> </ol>"},{"location":"actividades/04.php.oo.activitys.html#proyecto-videoclub-30","title":"Proyecto Videoclub 3.0","text":"<ol> <li> <p>Para el Videoclub, vamos a crear una p\u00e1gina <code>index.php</code> con un formulario que contenga un formulario de login/password. Se comprobar\u00e1n los datos en <code>login.php</code>. Los posibles usuarios son admin/admin o usuario/usuario</p> <ul> <li>Si el usuario es correcto, en <code>main.php</code> mostrar un mensaje de bienvenida con el nombre del usuario, junto a un enlace para cerrar la sesi\u00f3n, que lo llevar\u00eda de nuevo al login.</li> <li>Si el usuario es incorrecto, debe volver a cargar el formulario dando informaci\u00f3n al usuario de acceso incorrecto.</li> </ul> </li> <li> <p>Si el usuario es administrador, se cargar\u00e1n en la sesi\u00f3n los datos de soportes y clientes del videoclub que ten\u00edamos en nuestras pruebas (no mediante <code>include</code> sino copiando los datos e insert\u00e1ndolos en un array asociativo, el cual colocaremos posteriormente en la sesi\u00f3n).</p> <p>En la siguiente unidad los obtendremos de la base de datos. En <code>mainAdmin.php</code>, adem\u00e1s de la bienvenida, debe mostrar:     * Listado de clientes     * Listado de soportes</p> <p> Esquema navegaci\u00f3n ejercicio 423 </p> </li> <li> <p>Vamos a modificar la clase <code>Cliente</code> para almacenar el <code>user</code> y la <code>password</code> de cada cliente. Tras codificar los cambios, modificar el listado de clientes de <code>mainAdmin.php</code> para a\u00f1adir al listado el usuario.</p> </li> <li> <p>Si el usuario que accede no es administrador y coincide con alguno de los clientes que tenemos cargados tras el login, debe cargar <code>mainCliente.php</code> donde se mostrar\u00e1 un listado de los alquileres del cliente. Para ello, modificaremos la clase <code>Cliente</code> para ofrecer el m\u00e9todo <code>getAlquileres() : array</code>, el cual llamaremos y luego recorreremos para mostrar el listado solicitado.</p> </li> </ol> <p>Ahora volvemos a la parte de administraci\u00f3n</p> <ol> <li> <p>Adem\u00e1s de mostrar el listado de clientes, vamos a ofrecer la opci\u00f3n de dar de alta a un nuevo cliente en <code>formCreateCliente.php</code>. Los datos se enviar\u00e1n mediante POST a <code>createCliente.php</code> que los introducir\u00e1 en la sesi\u00f3n. Una vez creado el cliente, debe volver a cargar <code>mainAdmin.php</code> donde se podr\u00e1 ver el cliente insertado. Si hay alg\u00fan dato incorrecto, debe volver a cargar el formulario de alta.</p> </li> <li> <p>Crea en <code>formUpdateCliente.php</code> un formulario que permita editar los datos de un cliente. Debes recoger los datos en <code>updateCliente.php</code> Los datos de cliente se deben poder modificar desde la propia p\u00e1gina de un cliente, as\u00ed como desde el listado del administrador.</p> </li> <li> <p>Desde el listado de clientes del administrador debes ofrecer la posibilidad de borrar un cliente. En el navegador, antes de redirigir al servidor, el usuario debe confirmar mediante JS que realmente desea eliminar al cliente. Finalmente, en <code>removeCliente.php</code> elimina al cliente de la sesi\u00f3n. Una vez eliminado, debe volver al listado de clientes.</p> </li> </ol> Esquema navegaci\u00f3n Videoclub 3.0"},{"location":"actividades/05.herramientas.activitys.html","title":"05.herramientas.activitys","text":""},{"location":"actividades/05.herramientas.activitys.html#actividades-de-tema-5herramientas","title":"Actividades de Tema 5:Herramientas","text":""},{"location":"actividades/05.herramientas.activitys.html#monolog","title":"Monolog","text":"<ol> <li> <p>Crea un nuevo proyecto con Composer llamado <code>Monologos</code>:</p> <ul> <li>Incluye como librer\u00eda la \u00faltima versi\u00f3n de Monolog.</li> <li>Crea la clase <code>Dwes\\Monologos\\HolaMonolog</code>.</li> <li>Define una propiedad privada nombrada <code>miLog</code> para guardar el log.</li> <li>Define en el constructor un <code>RotatingFileHandler</code> que escriba en la carpeta <code>logs</code> del proyecto, y que almacene los mensajes a partir de debug.</li> <li>Crea los m\u00e9todos <code>saludar</code> y <code>despedir</code> que hagan un log de tipo info con la acci\u00f3n correspondiente.</li> </ul> </li> <li> <p>Siguiendo con el proyecto <code>Monologos</code>:</p> <ul> <li>Crea un archivo llamado <code>inicio.php</code> que permita probar <code>HolaMonolog</code>.</li> <li>Comprueba que los mensajes aparecen en el log.</li> <li>Cambia el nivel para que el manejador solo muestre los mensajes a partir de warning.</li> <li>Vuelve a ejectuar <code>inicio.php</code> y comprueba el archivo de log.</li> </ul> </li> <li>Modifica la clase <code>HolaMonolog</code>:<ul> <li>En el constructor, a\u00f1ade a la pila un manejador que escriba a la salida de error conjunto al procesador de introspecci\u00f3n, mostrando mensajes desde el nivel debug.</li> <li>A\u00f1ade una propiedad denominada <code>hora</code>, la cual se inicializa \u00fanicamente como par\u00e1metro del constructor. Si la <code>hora</code> es inferior a 0 o mayor de 24, debe escribir un log de warning con un mensaje apropiado.</li> <li>Modifica los m\u00e9todos <code>saludar</code> y <code>despedir</code> para hacerlo acorde a la propiedad <code>hora</code> (buenos d\u00edas, buenas tardes, hasta ma\u00f1ana, etc...)</li> </ul> </li> </ol>"},{"location":"actividades/05.herramientas.activitys.html#proyecto-videoclub-iv","title":"Proyecto Videoclub IV","text":"<ol> <li> <p>Como ya tenemos Composer instalado:</p> <ul> <li>Inicial\u00edzalo dentro de tu proyecto Videoclub</li> <li>Incluye Monolog y PhpUnit, cada una en su lugar adecuado.</li> <li>A\u00f1ade el autoload al archivo <code>composer.json</code>, y haz los cambios necesarios en las clases para utilizar el autoload de Composer.</li> <li>Sube los cambios a GitHub y crea la etiqueta <code>v0.511</code>.</li> </ul> </li> <li> <p>Modifica la clase <code>Cliente</code> para introducir un <code>Logger</code> de Monolog.</p> <ul> <li>A\u00f1ade el log como una propiedad de la clase e inicial\u00edzalo en el constructor, con el nombre del canal <code>VideoclubLogger</code>.</li> <li>Se debe almacenar en <code>logs/videoclub.log</code> mostrando todos los mensajes desde debug.</li> <li>Antes de lanzar cualquier excepci\u00f3n, debe escribir un log de tipo warning.</li> <li>Sustituir los <code>echo</code> que haya en el c\u00f3digo, que ahora pasar\u00e1n por el log con el nivel info, a excepci\u00f3n del m\u00e9todo <code>muestraResumen</code> que seguir\u00e1 haciendo <code>echo</code>.</li> </ul> </li> <li> <p>Vuelve a hacer lo mismo que en el ejercicio anterior, pero ahora con la clase <code>Videoclub</code>. Adem\u00e1s:</p> <ul> <li>Siempre que se llame a un m\u00e9todo del log, se le pasar\u00e1 como segundo par\u00e1metro la informaci\u00f3n que dispongamos.</li> <li>Ejecuta el archivo de prueba y comprueba que el log se rellena correctamente.</li> </ul> </li> <li> <p>Vamos a refactorizar el c\u00f3digo com\u00fan de inicializaci\u00f3n de Monolog que tenemos repetidos en los constructores a una factor\u00eda de Monolog, la cual colocaremos en <code>\\Dwes\\Videoclub\\Util\\LogFactory</code>. Comprueba que sigue funcionando correctamente.</p> </li> <li> <p>Modifica la factor\u00eda para que devuelva <code>LogInterface</code> y comprueba que sigue funcionando. Sube los cambios a GitHub con la etiqueta <code>v0.515</code>.</p> </li> </ol>"},{"location":"actividades/05.herramientas.activitys.html#phpdocumentor","title":"phpDocumentor","text":"<ol> <li>Comprueba que en el contenedor de Docker funciona phpDocumentor. Ejecuta phpdoc sobre tu proyecto Monolog y comprueba el api que se crea. Comenta tanto la clase como los m\u00e9todos, y posteriormente, vuelve a ejecutar phpdoc.</li> <li>Documenta el proyecto Videoclub, y genera la documentaci\u00f3n. Empieza por las clases de <code>Soporte</code> y sus hijos. Comprueba el resultado. Luego sigue con <code>Cliente</code> y finalmente <code>Videoclub</code>.</li> </ol>"},{"location":"actividades/05.herramientas.activitys.html#web-scraping","title":"Web Scraping","text":"<ol> <li> <p>A partir de los datos de http://www.seleccionbaloncesto.es, calcula la altura y edad media del equipo de baloncesto masculino. Observa que tienes los datos dentro de una tabla debajo de las noticias.</p> </li> <li> <p>Volviendo al Videoclub, en <code>Soporte</code> a\u00f1ade una propiedad llamada <code>metacritic</code> para almacenar la URL de cada soporte. A continuaci\u00f3n, modifica los m\u00e9todos <code>incluirXXX</code> de <code>Videoclub</code> para que admitan como primer par\u00e1metro dicha URL. Tras ello, modifica el fichero <code>inicio3.php</code> para pasarle la URL  de cada soporte (para ello deber\u00e1s consultarlos en Metacritic haciendo b\u00fasquedas manuales). Por ejemplo, en el caso de la pel\u00edcula Cazafantasmas, su URL es https://www.metacritic.com/movie/ghostbusters.</p> </li> <li> <p>Finalmente, a\u00f1ade un m\u00e9todo abstracto en <code>Soporte</code> llamado <code>getPuntuacion</code>, que haciendo uso de Web Scraping se conecte a Metacritic y obtenga su puntuaci\u00f3n. Modifica <code>inicio3.php</code> para obtener todos los alquileres de un cliente mediante <code>getAlquileres() : array</code>, y para cada uno de ellos, adem\u00e1s del t\u00edtulo, muestra su puntuaci\u00f3n.</p> </li> </ol>"},{"location":"actividades/05.herramientas.activitys.html#phpunit","title":"phpUnit","text":"<ol> <li> <p>A partir de la clase <code>HolaMonolog</code>, modifica los m\u00e9todos para que adem\u00e1s de escribir en en log, devuelvan el saludo como una cadena. Crea la clase <code>HolaMonologTest</code> y a\u00f1ade diferentes casos de prueba para comprobar que los saludos y despedidas son acordes a la hora con la que se crea la clase.</p> </li> <li> <p>Vamos a simular Test Driven Development. Queremos que nuestra aplicaci\u00f3n almacene los \u00faltimos tres saludos que ha realizado. Para ello:</p> <ul> <li>Crea las prueba necesarias (invoca al m\u00e9todo <code>saludar</code> varias veces y llama al m\u00e9todo que te devuelva los saludos almacenados)</li> <li>Implementa el c\u00f3digo para pasar las pruebas</li> <li>Refactoriza el c\u00f3digo</li> </ul> </li> <li> <p>Crea una nueva prueba que utilice proveedores de datos para comprobar esta \u00faltima funcionalidad, pas\u00e1ndole:</p> <ul> <li>Un saludo.</li> <li>Tres saludos.</li> <li>Cuatro saludos.</li> </ul> </li> <li> <p>\u00bfRecuerdas que si la hora es negativa o superior a 24 escrib\u00edamos en el log un warning? Ahora debe lanzar una excepci\u00f3n de tipo <code>InvalidArgumentException</code> (como la excepci\u00f3n forma para de PHP, hay que poner su FQN: <code>\\InvalidArgumentException</code>). Vuelve a aplicar TDD y completa tus casos de prueba.</p> </li> <li> <p>Comenta la \u00faltima prueba realizada (la comprobaci\u00f3n de las excepciones) y realiza un informe de cobertura de pruebas. Analiza los resultados obtenidos. Elimina los \u00faltimos comentarios sobre la \u00faltima prueba y vuelve a generar y analizar el informe de cobertura.</p> </li> </ol>"},{"location":"actividades/05.herramientas.activitys.html#proyecto-videoclub-v","title":"Proyecto Videoclub V","text":"<p>El objetivo de los siguientes ejercicios es conseguir de manera incremental una cobertura de pruebas superior al 95%.</p> <ol> <li> <p>Crea pruebas dentro de la carpeta <code>tests</code> para las clases <code>Soporte</code>, <code>CintaVideo</code>, <code>Dvd</code> y <code>Juego</code>. Recuerda respetar el espacio de nombres. Los m\u00e9todos <code>muestraResumen</code>, tras hacer echo de los mensajes, deben devolver una cadena con el propio mensaje.</p> </li> <li> <p>Crea pruebas para la clase <code>Cliente</code>, aprovechando todo el c\u00f3digo que ten\u00edamos para comprobar la funcionalidad. Utiliza proveedores de datos para a\u00f1adir conjuntos de datos mayores que los empleados. Comprueba que funciona con diferentes cupos, que al intentar alquilar un soporte marcado como ya alquilado debe lanzar una excepci\u00f3n, que no coincidan los ids de los soportes, etc...</p> </li> <li> <p>Crea las pruebas para la clase <code>Videoclub</code>. Ten en cuenta los \u00faltimos m\u00e9todos a\u00f1adidos que permit\u00edan alquilar y devolver soportes, tanto de manera individual como mediante un array.</p> </li> <li> <p>Crea el informe de cobertura. Una vez creado, analiza los datos de cobertura (&gt;= 90%) y comprueba el valor de CRAP, de manera que siempre sea &lt;= 5. En caso de no cumplirse, crea nuevos casos de prueba y/o refactoriza el c\u00f3digo de tu aplicaci\u00f3n.</p> </li> </ol> <p>Sube los cambios a GitHub con la etiqueta <code>v0.554</code>.</p>"},{"location":"actividades/05.herramientas.activitys.html#ampliacion","title":"Ampliaci\u00f3n","text":"<ol> <li> <p>Queremos que en <code>Videoclub</code>, cuando un cliente no existe (tanto al alquilar como al devolver) se lance una nueva excepci\u00f3n: <code>ClienteNoExisteException</code>. Adem\u00e1s, dado el n\u00famero creciente de excepciones, queremos mover las excepciones al namespace <code>Dwes\\Videoclub\\Exception</code>. Siguiendo TDD, primero crea las pruebas, y luego modifica el c\u00f3digo de aplicaci\u00f3n. Vuelve a generar el informe de cobertura y comprueba la calidad de nuestras pruebas.</p> </li> <li> <p>\u00bfNadie se ha dado cuenta que en los Dvd no estamos almacenando su duraci\u00f3n? Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p> </li> <li> <p>Tras a\u00f1os luchando contra la tecnolog\u00eda, decidimos introducir los Blu-ray en nuestra empresa. Hemos decido que <code>Bluray</code> herede de <code>Soporte</code>. Adem\u00e1s del <code>t\u00edtulo</code> y la <code>duracion</code>, nos interesa almacenar si <code>es4k</code>. Haz todos los cambios necesarios, primero en las pruebas y luego en el c\u00f3digo.</p> </li> </ol> <p>Sube los cambios a GitHub con la etiqueta <code>v0.563</code>.</p>"},{"location":"actividades/06.data.acccess.activitys.html","title":"06.data.acccess.activitys","text":""},{"location":"actividades/06.data.acccess.activitys.html#actividades-del-tema-6-acceso-a-datos","title":"Actividades del Tema 6: Acceso a Datos","text":""},{"location":"actividades/06.data.acccess.activitys.html#mysqli","title":"MySQLi","text":"<ol> <li> <p>Crea una nueva base de datos con el nombre <code>lol</code> y cotejamiento de datos <code>utf8mb4_unicode_ci</code>.</p> </li> <li> <p>En nuestra base de datos <code>lol</code> que acabamos de crear,  vamos a crear la tabla <code>campeon</code> con los siguientes campos.</p> </li> </ol> <ul> <li>id [*]</li> <li>nombre</li> <li>rol</li> <li>dificultad</li> <li> <p>descripcion</p> <p>Acu\u00e9rdate que [*] significa que es clave primaria y no olvides poner el tipo de datos de cada uno de los campos.</p> </li> </ul> <ol> <li> <p>Rellena la tabla <code>campeon</code> con, al menos 5 registros, con los datos que t\u00fa quieras o si lo prefieres, puedes basarte en la p\u00e1gina oficial del juego pero \u00a1\u00a1 NO TE PONGAS A JUGAR !!</p> </li> <li> <p>Crea el archivo <code>604campeones.php</code> donde listes todos los campeones del LOL que has metido en tu base de datos. Acu\u00e9rdate que para ello deberas hacer una conexi\u00f3n con la base de datos y un <code>foreach</code> para cada campe\u00f3n que tengas albergado en la tabla <code>campeon</code>.</p> </li> <li> <p>Modifica el archivo <code>604campeones.php</code> y gu\u00e1rdalo como <code>606campeones.php</code> pero pon al lado de cada uno de los campeones listados un bot\u00f3n para <code>editar</code> y otro para <code>borrar</code>. Cada uno de esos botones har\u00e1 la correspondiente funci\u00f3n dependiendo del id del campe\u00f3n seleccionado.</p> </li> </ol> <ul> <li> <p>Al pinchar en editar, el usuario ser\u00e1 redirigido al archivo <code>605editando.php</code> donde mostrar\u00e1 un formulario con los campos rellenos por los datos del campe\u00f3n seleccionado. Al darle al bot\u00f3n de <code>guardar</code> los datos se guardar\u00e1n en la base de datos y el usuario ser\u00e1 redirigido a la lista de campones para poder ver los cambios.</p> </li> <li> <p>Al pinchar en borrar, el usuario ser\u00e1 preguntado a trav\u00e9s de un mensaje de JavaScript (prompt) si est\u00e1 seguro de que quiere borrar al campe\u00f3n seleccionado. En el mensaje de confirmaci\u00f3n debe aparecer el nombre del campe\u00f3n seleccionado. Si el usuario pincha en <code>Aceptar</code> el campe\u00f3n ser\u00e1 eliminado de la base de datos y el usuario ser\u00e1 redirigido nuevamente al listado de campeones para comprobar que, efectivamente dicho campe\u00f3n se ha eliminado de la lista.</p> </li> </ul>"},{"location":"actividades/06.data.acccess.activitys.html#filtros-y-comodines","title":"Filtros y comodines","text":"<ol> <li>modifica el archivo <code>604campeones.php</code> y gu\u00e1rdalo como <code>606campeones.php</code> para que se muestre como una tabla con las columnas de la propia tabla de la base de datos, es decir; id, nombre, rol, dificultad, descripci\u00f3n. Al lado de cada nombre de cada columna, pon 2 iconos que sean \u02c4 \u02c5 y que cada uno de ellos ordene el listado en funci\u00f3n de cu\u00e1l se haya pinchado.</li> </ol> <ul> <li> <p>Si se ha pulsado en Nombre el icono de \u02c4, el listado debe aparecer ordenado por nombre ascendente. Si por el contrario se ha pulsado \u02c5 tendr\u00e1 que ordenarse por nombre descendente.</p> </li> <li> <p>Ten en cuenta que cada icono debe llevar consigo un enlace al listado que contenga par\u00e1metros en la URL que satisfagan las opciones seleccionadas as\u00ed que haced uso de $_GET para poder capturarlos y escribid las consultas SQL que sean necesarias para hacer cada uno de los filtros.</p> </li> <li> <p>Puedes usar Font Awesome para los iconos pero es algo opcional</p> </li> </ul>"},{"location":"actividades/06.data.acccess.activitys.html#pdo","title":"PDO","text":"<ol> <li> <p>Aprovecha lo que hiciste de los ejercicios 601 al 604 pero esta vez utilizando <code>PDO::FETCH_ASSOC</code>.</p> </li> <li> <p>Crea una tabla nueva dentro de la base de datos <code>lol</code> que ya tienes y crea un sistema de login con usuarios. Introduce en la base de datos al menos 3 usuarios diferentes con sus contrase\u00f1as distintas. Recuerda que:</p> </li> </ol> <ul> <li> <p>La tabla nueva ha de llamarse <code>usuario</code></p> </li> <li> <p>Los campos a crear en la nueva tabla deben ser</p> <ul> <li><code>id</code> [*]</li> <li><code>nombre</code></li> <li><code>usuario</code></li> <li><code>password</code></li> <li><code>email</code></li> </ul> </li> <li> <p>Las contrase\u00f1as deben ser cifradas antes de guardar el datos en la base de datos.</p> </li> <li> <p>Crea el formulario <code>608registro.php</code> donde el usuario introduzca los datos de registro y vinc\u00falalo con <code>608nuevoUsuario.php</code> para que recoja los datos mediante POST y los inserte en la base de datos si todo ha ido bien.</p> </li> <li> <p>Queda PROHIBID\u00cdSIMO acceder a <code>608nuevoUsuario.php</code> sin el formulario rellenado.</p> </li> <li> <p>La sentencia de INSERT debe estar controlada para que no pueda introducirse ning\u00fan dato en blanco. Ten en cuenta que est\u00e1s modificando la base de datos y no queremos campos mal rellenados.</p> </li> <li> <p>Si todo ha ido bien, muestra un mensaje por pantalla diciendo <code>El usuario XXX ha sido introducido en el sistema con la contrase\u00f1a YYY</code>.</p> </li> </ul>"},{"location":"actividades/06.data.acccess.activitys.html#ficheros","title":"Ficheros","text":"<ol> <li> <p>M\u00e9tete en loremipsum.com y genera un texto de 3 p\u00e1rrafos. Copia el texto generado y gu\u00e1rdalo en un archivo nuevo llamado <code>609loremIpsum.txt</code>. Genera un archivo php llamado <code>609loremIpsum.php</code> y muestra por pantalla el texto del archivo txt que acabas de crear, su tama\u00f1o en Kilobytes , la fecha de su \u00faltima modificaci\u00f3n y el ID de usuario que cre\u00f3 el archivo.</p> </li> <li> <p>Vuelve a cargar el archivo <code>606campeones.php</code> y ren\u00f3mbralo a <code>610campeones.php</code> pero en vez de mostrar la tabla por pantalla, genera un archivo CSV <code>610campeones.csv</code> y otro <code>610campeonesCSV.php</code> donde saques por pantalla el contenido del archivo <code>610campeones.csv</code>.</p> </li> </ol>"},{"location":"actividades/06.data.acccess.activitys.html#proyecto-chollosevero","title":"Proyecto CholloSevero","text":"<ol> <li> <p>Estructura el proyecto y piensa en las tablas y bases de datos que necesit\u00e9is para crear el proyecto. Crea los UML necesarios con nombres como <code>615UMLnombreTabla</code> metiendo todos los campos que se necesiten as\u00ed como las relaciones que creas necesarias. Establece un sistema de archivos para el proyecto, teniendo en cuenta que van a haber im\u00e1genes, css, funciones php, constantes e incluso javaScript (pero algo b\u00e1sico) para controlar los eventos del usuario a lo largo de la interfaz.</p> </li> <li> <p>Crea un sistema de login/password con los roles <code>administrador</code> y <code>usuario</code>. De momento que se validen los usuarios correctamente utilizando encriptaci\u00f3n en la contrase\u00f1a.</p> </li> </ol> <ul> <li> <p><code>Administrador</code>: Puede ver todos los usuarios registrados as\u00ed como los administradores y los chollos creados en la base de datos.</p> </li> <li> <p><code>Usuario</code>: Puede ver sus propios chollos, editarlos y borrarlos, adem\u00e1s de crear nuevos.</p> </li> </ul> <ol> <li> <p>Crea la vista para poner nuevos chollos y recuerda s\u00f3lo pueden entrar a esta vista usuarios registrados o administradores.</p> </li> <li> <p>Crea la vista donde se muestren todos los chollos creados. Esta vista puede verla cualquier usuario, registrado o no en el sistema. Ten en cuenta que esta vista ser\u00e1 la vista general de la web as\u00ed que puedes llamarla <code>index.php</code> donde despu\u00e9s aplicaremos filtros por $_GET.</p> </li> </ol>"},{"location":"actividades/07.frameworks.activitys.html","title":"07.frameworks.activitys","text":""},{"location":"actividades/07.frameworks.activitys.html#actividades-del-tema-7-frameworks","title":"Actividades del Tema 7: Frameworks","text":"<ol> <li>Crea un sitio web con Laravel que contenga el t\u00edtulo \"Bienvenidos a Laravel\", un texto de bienvenida (puede ser un poco de Lorem Ipsum) y a continuaci\u00f3n un men\u00fa de navegaci\u00f3n con sus correspondientes alias y los siguientes enlaces:</li> </ol> <ul> <li> <p><code>Inicio</code> enlace a la p\u00e1gina principal donde se visualizar\u00e1 el texto de Lorem Ipsum adem\u00e1s de los elementos est\u00e1ticos (T\u00edtulo y men\u00fa de navegaci\u00f3n).</p> </li> <li> <p><code>Nosotros</code> enlace que vaya a la p\u00e1gina \"nosotros\"  y muestre, adem\u00e1s de los elementos est\u00e1ticos de todo el sitio, un h2 que diga \"Est\u00e1s en la secci\u00f3n Nosotros\"</p> </li> <li> <p><code>Proyecto</code> enlace que cargue una vista con el siguiente texto \"Est\u00e1s en el proyecto numero: X\" donde X es un n\u00famero entero que podamos introducirlo en la propia ruta. Si no se mete ning\u00fan n\u00famero en la ruta, por defecto tiene que ser 1; por ejemplo</p> <pre><code>http://localhost:8000s/proyecto/210937\n</code></pre> </li> <li> <p>Recuerda que el t\u00edtulo y el men\u00fa de navegaci\u00f3n han de aparecer en todas las vistas que cargues.</p> </li> </ul> <ol> <li>Utilizando las <code>estructuras</code> de control y los <code>controladores</code> crea un sitio web que contenga lo siguiente:</li> </ol> <ul> <li> <p><code>Inicio</code> p\u00e1gina principal con un t\u00edtulo que diga \"Bienvenid@s a FOTO \u2591\u2592\u2593 BLOG\" y un texto de bienvenida (con un par de frases sobra)</p> </li> <li> <p><code>Nosotros</code> un t\u00edtulo de la secci\u00f3n en la que te encuentras y un listado de 3 personas diferentes que, cada uno de los nombres mostrar\u00e1 un texto descriptivo de cada persona cuando pinchemos sobre su nombre.</p> </li> <li> <p><code>Fotos</code> Una secci\u00f3n que aparezca el texto \"Est\u00e1s visualizando la foto con el ID: X\" donde X es un par\u00e1metro que depender\u00e1 de la ruta que se haya introducido. Por defecto, si no se introduce dicho par\u00e1metro \u00e9ste debe valer 1. </p> </li> <li> <p>Como elementos est\u00e1ticos debe aparecer:</p> <ul> <li><code>Imagen</code> como logtipo</li> <li>El t\u00edtulo <code>FOTO \u2591\u2592\u2593 BLOG</code> a la derecha del logotipo</li> <li><code>Men\u00fa</code> de navegaci\u00f3n para moverse por las distintas secciones</li> </ul> </li> <li> <p>Puedes usar Bootstrap como algo opcional para practicar. Recuerda que viene incluido con la instalaci\u00f3n de Laravel.</p> </li> </ul> <ol> <li>Crear el proyecto CholloSevero:</li> </ol> <ul> <li>Crea un nuevo repositorio para el proyecto</li> <li>Configura el <code>.gitignore</code> para no incluir en el repo los siguientes archivos y carpetas:<ul> <li>carpeta <code>vendor</code></li> <li>archivos <code>.env</code> y cualquier archivo que empiece por <code>.</code> excepto el <code>.gitignore</code></li> </ul> </li> <li>La p\u00e1gina principal del sitio debe ser un listado con todos los chollos disponibles</li> <li>Configura la base de datos con Eloquent, olv\u00eddate de usar la consola mysql</li> <li>Crea una vista para las siguientes acciones:<ul> <li>Crear un chollo</li> <li>Editar un chollo</li> </ul> </li> <li>La tabla Chollo debe contener las siguientes columnas:<ul> <li><code>id</code> \u00fanico y autoincremental</li> <li><code>titulo</code> un t\u00edtulo para el chollo</li> <li><code>descripcion</code> descripcion del chollo</li> <li><code>url</code> un campo para introducir la URL externa del chollo</li> <li><code>categoria</code> albergar\u00e1 la categor\u00eda de los chollos</li> <li><code>puntuacion</code> un n\u00famero entero que indique la puntuaci\u00f3n del chollo</li> <li><code>precio</code> para albergar el precio del chollo</li> <li><code>precio_descuento</code> para albergar el nuevo precio</li> <li><code>disponible</code> de tipo boolean</li> </ul> </li> <li>Por lo menos, el sitio debe contener un <code>controlador</code> de Laravel; puedes crear tantos como creas necesarios pero m\u00ednimo debe haber uno.</li> </ul> <p><code>Elementos est\u00e1ticos</code> Como ya hemos visto, hay ciertos elementos que siempre se muestran en todas las vistas del sitio web. A continuaci\u00f3n se listan los elementos que deben estar si o si en todas las plantillas que cre\u00e9is.</p> <ul> <li>Logo del sitio y el t\u00edtulo <code>Chollo \u2591\u2592\u2593 Severo</code></li> <li><code>Inicio</code> | <code>Nuevos</code> | <code>Destacados</code></li> <li>Un footer con vuestro nombre y alg\u00fan dato copyright del tipo <code>\u00a9CholloSevero 2022</code> donde el a\u00f1o debe ser calculado a trav\u00e9s de la fecha del servidor.</li> </ul> <p><code>Pag\u00edna principal</code>  Adem\u00e1s del listado de todos los chollos de la base de datos debe contener el men\u00fa de navegaci\u00f3n:</p> <ul> <li>Cada chollo debe ser accesible desde este listado</li> <li>Cada chollo debe contener una imagen que estar\u00e1 guardada en <code>public/img</code></li> <li>Cada chollo debe contener sus botones de <code>editar</code> y <code>borrar</code> que haga las funciones que tocan. Puedes utilizar iconos para cada uno de los botones.</li> <li>El nombre de las im\u00e1genes debe estar compuesta por la siguiente f\u00f3rmula <code>idChollo</code>-chollo-severo.<code>extension</code><ul> <li>Por ejemplo: 25-chollo-severo.jpg</li> </ul> </li> <li>La imagen del chollo no se sube a trav\u00e9s del formulario, la pones directamente en la carpeta. Si te animas a subirlo a trav\u00e9s del formulario, puedes hacerlo.</li> </ul> <p><code>P\u00e1gina de Chollo</code>  Cuando pinchemos en uno de los chollos del listados debemos ser redireccionados a esta vista donde podremos ver toda la informaci\u00f3n del tabla chollo. Puedes maquetarla como quieras e incluso puedes basarte en la web de Chollo Metro. El campo <code>disponible</code> no es necesario que lo muestres en esta vista</p> <p><code>P\u00e1gina de Crear un chollo</code>  Un formulario con los campos necesarios para poder crear un chollo nuevo. Adem\u00e1s, debes tener en cuenta que tienes que validar los campos, de tal manera que no se pueda enviar el formulario si se ha dejado alg\u00fan campo en blanco; dichas validaciones, adem\u00e1s de a\u00f1adir la propiedad <code>required</code> de HTML5 debes hacerlo con Laravel.</p> <p>En caso de que haya habido alg\u00fan error en el formulario debes mostrar un mensaje en la parte de arriba del mismo con el mensaje de error (por ejemplo, si el campo est\u00e1 vac\u00edo).</p> <p><code>P\u00e1gina de Editar un chollo</code>  Muy parecida a la de Crear un chollo pero que puedas editar un Chollo en funci\u00f3n de su <code>id</code>. Acu\u00e9rdate que no puedes dejar ning\u00fan campo vac\u00edo, para ello has de utilizar las validaciones de Laravel.</p> <p><code>\u2591\u2592\u2593 COSAS A TENER EN CUENTA \u2591\u2592\u2593</code>  - Tienes que usar <code>Bootstrap</code> o <code>Material Design</code>, aunque si lo prefieres puedes hacer tus propios archivos <code>.css</code></p> <ul> <li> <p>Los mensajes de error o de informaci\u00f3n deben estar estilizados para que el usuario pueda verlos con facilidad</p> </li> <li> <p>Los elementos est\u00e1ticos deben estar presentes en todas las vistas; incluidas las de editar y crear.</p> </li> <li> <p>Las plantillas que formen parte de otra ya creada deben estar en una carpeta con el nombre de la plantilla madre, como hicimos con el ejercicio de <code>Notas</code>:</p> </li> </ul> <ul> <li> <p>Ve haciendo commits en funci\u00f3n de las tareas que vayas acabando o que veas que el commit tiene sentido. No es buena pr\u00e1ctica subir los camios de un archivo y el siguiente commit volver a subir m\u00e1s cambios del mismo archivo (a no ser que nos hayamos saltado o equivocado en algo).</p> </li> <li> <p>El proyecto es individual y despu\u00e9s se presentar\u00e1, uno por uno al profesor para que eval\u00fae todos los aspectos del mismo. Se har\u00e1n preguntas de c\u00f3mo se ha hecho cierta cosa o por qu\u00e9 se ha determinado cierto flujo de trabajo as\u00ed que, no os copi\u00e9is porque se eval\u00faa tambi\u00e9n la presentaci\u00f3n del proyecto</p> </li> </ul>"},{"location":"actividades/09.service.web.activitys.html","title":"09.service.web.activitys","text":""},{"location":"actividades/09.service.web.activitys.html#actividades-de-tema-9-servicios-web","title":"Actividades de Tema 9: Servicios Web","text":"<ol> <li>Chollo Severo V 2.0 Crea un controlador nuevo que se llame <code>RestController</code> (o como quieras llamarlo) y escribe todos los m\u00e9todos que necesites para convertir tu <code>app</code> que, consume de una Base de Datos, a una <code>Restful App</code> que reciba los datos a trav\u00e9s de la API de tu proyecto de Chollos.</li> </ol>"},{"location":"extra/ArquitecturasWebExtendido.html","title":"Ampliaci\u00f3n: Arquitecturas Web","text":""},{"location":"extra/ArquitecturasWebExtendido.html#1-fundamentos-de-la-web","title":"1. Fundamentos de la Web","text":"<p>Cuando se habla de la web todo parece muy sencillo, pero detr\u00e1s hay muchos est\u00e1ndares y protocolos que se ponen en marcha para poder comunicar aplicaciones entre s\u00ed. Aplicaciones que se ejecutar\u00e1n generalmente en equipos diferentes. Una aplicaci\u00f3n que se ejecutar\u00e1 en un sistema remoto que llamaremos servidor web y otra aplicaci\u00f3n que se ejecutar\u00e1 en el sistema del cliente llamado navegador web.</p> <p>El conjunto de tecnolog\u00edas subyacentes en la web, basada en su mayor\u00eda en est\u00e1ndares abiertos, se ha convertido en el pilar fundamental de Internet. Hoy en d\u00eda, el uso de estas tecnolog\u00edas no se limita a la comunicaci\u00f3n entre un navegador web y un servidor web, sino que se utiliza incluso para facilitar el intercambio de datos entre aplicaciones a trav\u00e9s de lo que conocemos como servicio web.</p> <p>El mejor ejemplo de intercambio de datos entre aplicaciones a trav\u00e9s de tecnolog\u00edas web es\u00a0REST, donde usando protocolos y est\u00e1ndares ya conocidos como\u00a0HTTP\u00a0y\u00a0XML, se permite la comunicaci\u00f3n entre aplicaciones. Con tecnolog\u00edas como esta podr\u00edamos crear una aplicaci\u00f3n web (e incluso una aplicaci\u00f3n m\u00f3vil) que se comunicara con otra aplicaci\u00f3n web, como por ejemplo\u00a0Twitter\u00a0o\u00a0Facebook.</p>"},{"location":"extra/ArquitecturasWebExtendido.html#11-que-aspectos-generales-de-arquitecturas-web-debes-conocer","title":"1.1.- \u00bfQu\u00e9 aspectos generales de arquitecturas web debes conocer?","text":"<p>La arquitectura\u00a0World Wide Web\u00a0(WWW) de Internet provee un modelo de programaci\u00f3n sumamente poderoso y flexible. Las aplicaciones y los contenidos son presentados en formatos de datos est\u00e1ndar y son localizados por aplicaciones conocidas como \"web browsers\", que env\u00edan requerimientos de objetos a un servidor y \u00e9ste responde con el dato codificado seg\u00fan un formato est\u00e1ndar.</p> <p>Los est\u00e1ndares\u00a0WWW\u00a0especifican muchos de los mecanismos necesarios para construir un ambiente de aplicaci\u00f3n de prop\u00f3sito general, por ejemplo:</p> <ul> <li>Modelo est\u00e1ndar de nombres:\u00a0todos los servidores, as\u00ed como el contenido de la\u00a0\u00a0se denominan seg\u00fan un Localizador Uniforme de Recursos (Uniform Resource Locator:\u00a0).</li> <li>Contenido:\u00a0a todos los contenidos en la\u00a0\u00a0se les especifica un determinado tipo, permitiendo de esta forma que los\u00a0browsers\u00a0(navegadores) los interpreten correctamente.</li> <li>Formatos de contenidos est\u00e1ndar:\u00a0todos los navegadores soportan un conjunto de formatos y tecnolog\u00edas est\u00e1ndar, por ejemplo\u00a0(Lenguaje de marcas de hipertexto), ECMAScript\u00a0(JavaScript), HTML, CSS, etc</li> <li> <p>Protocolos est\u00e1ndar:\u00a0\u00e9stos permiten que cualquier navegador pueda comunicarse con cualquier servidor web. El m\u00e1s com\u00fanmente usado en\u00a0\u00a0es\u00a0\u00a0(Protocolo de\u00a0Transferencia de HiperTexto), que opera sobre el conjunto de protocolos\u00a0\u00a0(Protocolo de Control de Transmisi\u00f3n / Protocolo de Internet). WWW, HTTP, TCP/IP</p> <p>Esta infraestructura permite a los usuarios acceder a una gran cantidad de aplicaciones y servicios de terceros. Tambi\u00e9n permite a los desarrolladores crear aplicaciones y servicios para una gran comunidad de clientes.</p> </li> </ul>"},{"location":"extra/ArquitecturasWebExtendido.html#12-el-servicio-web-e-internet","title":"1.2 El servicio web e Internet","text":"<p>Internet, tal y como la conocemos hoy d\u00eda, utiliza para su funcionamiento la arquitectura de protocolos\u00a0TCP/IP. Lo importante de\u00a0TCP/IP\u00a0es que permite la comunicaci\u00f3n de equipos que est\u00e1n en diferentes redes a trav\u00e9s de una arquitectura flexible.</p> <p>Como supondr\u00e1s, cuando accedemos a un sitio web a trav\u00e9s de un navegador web, el navegador web inicia una o m\u00e1s comunicaciones con un sistema remoto y se produce un intercambio de paquetes que permite mostrar la p\u00e1gina web. Veamos el proceso m\u00e1s detalladamente:</p> <ul> <li>El navegador realiza una petici\u00f3n de un recurso al servidor web (imagen, HTML, etc).</li> <li>El servidor web recibe la petici\u00f3n y la procesa. Procesar la petici\u00f3n en el servidor web puede significar dos cosas diferentes:<ul> <li>Servir un recurso est\u00e1tico, es decir, el contenido de un archivo almacenado en el disco del servidor.</li> <li>Ejecutar una aplicaci\u00f3n en el servidor que genere contenido din\u00e1mico.</li> </ul> </li> <li>El navegador web recibe el contenido del servidor y es el encargado de mostrarlo al usuario final, a trav\u00e9s de un proceso conocido como renderizado. En el proceso de renderizado el navegador web convierte los datos recibidos en informaci\u00f3n que el usuario puede ver en la pantalla de su ordenador.</li> <li>Si para renderizar y representar la p\u00e1gina web el navegador necesita m\u00e1s recursos (im\u00e1genes, archivos, CSS, etc.), los volver\u00eda a pedir al navegador, siguiendo el proceso anterior.</li> </ul> <p>El protocolo que permite todo ese proceso anterior es\u00a0HTTP.\u00a0HTTP\u00a0es el protocolo que permite al navegador realizar una petici\u00f3n y al servidor generar una respuesta, y es importante entenderlo antes de configurar un servidor web. </p> <p>Pero si ha triunfado la web y ha llegado hasta donde est\u00e1 hoy d\u00eda, no es solo por el protocolo\u00a0HTTP, sino tambi\u00e9n por otras cosas:</p> <ul> <li>El sistema DNS, que permite traducir un nombre de m\u00e1quina en una direcci\u00f3n IP. El sistema DNS\u00a0nos permite acceder a una m\u00e1quina remota a trav\u00e9s de un nombre (como\u00a0www.gnu.org o\u00a0<code>www.debian.org</code>).</li> <li>El uso de URLs\u00a0(Uniform Resource Locator). Una URL\u00a0es una nomenclatura pensada para poder nombrar recursos en la red de forma sencilla, por ejemplo: http://www.gnu.org.</li> <li>Por el ingenio de muchos desarrolladores y desarrolladoras web que con HTML, CSS y JavaScript, y tecnolog\u00edas del lado del servidor, consiguen hacer p\u00e1ginas webs incre\u00edbles.</li> </ul> <p>De todos estos conceptos, el que vamos a revisar ahora es el de\u00a0URL. Para entender una\u00a0URL\u00a0lo mejor es analizar un ejemplo de\u00a0URL\u00a0y desglosarla en partes: Wikipedia</p> <p>En una URL aparecen las siguientes partes:</p> <ul> <li>Esquema. El esquema es donde pone http: y representa el protocolo usado para acceder al recurso. Los esquemas m\u00e1s usados son http:,\u00a0<code>https:</code>\u00a0(protocolo HTTPS\u00a0) y ftp: (protocolo FTP\u00a0), aunque hay otros esquemas como\u00a0tel: (para hacer referencia a un n\u00famero de tel\u00e9fono),\u00a0mailto: (para hacer referencia a un correo electr\u00f3nico), y bastantes m\u00e1s.</li> <li>Nombre de m\u00e1quina o\u00a0FQDN. En este caso es\u00a0es.wikipedia.org y hace referencia a la m\u00e1quina a la que estamos accediendo.</li> <li>Ruta hasta el recurso. En este caso ser\u00eda /wiki/Localizador_de_recursos_uniforme, y hace referencia al camino a seguir para llegar al recuso.</li> </ul> <p>Si alguna\u00a0URL\u00a0necesita\u00a0usuario y contrase\u00f1a\u00a0(por ejemplo, si usamos el esquema ftp), entonces podemos escribirlo de la siguiente forma:</p> <ul> <li>ftp://anonymous@ftp.rediris.es/mirror/Apache/: donde anonymous ser\u00eda el nombre de usuario.</li> <li>ftp://anonymous:contrase\u00f1a@ftp.rediris.es/mirror/Apache/: donde anonymous:contrase\u00f1a son la combinaci\u00f3n del usuario y su contrase\u00f1a separados por dos puntos.</li> </ul> <p>Y por \u00faltimo, si un protocolo se usa en un puerto diferente al puerto por defecto o est\u00e1ndar, podemos usar el siguiente formato de\u00a0URL:</p> <ul> <li>http://www.ejemplodedominio.com:8080/mirecurso; donde\u00a08080 es el puerto que se usar\u00eda en este caso para acceder al servicio remoto.</li> </ul>"},{"location":"extra/03/03.1.enumerados_avanzado.html","title":"Entendiendo los Enumerados en PHP","text":"<p>Como desarrollador, seguramente te habr\u00e1s encontrado con situaciones en las que una variable solo pod\u00eda tomar uno de un peque\u00f1o conjunto de valores posibles. Por ejemplo, una variable que contiene el estado de un usuario puede tener solo las posibilidades \"Activo\", \"Inactivo\" o \"Suspendido\". Puedes representar estos estados usando variables booleanas independientes o asignarles valores enteros o de cadena espec\u00edficos, pero ah\u00ed es donde las cosas empiezan a complicarse y a generar errores.</p> <p>\u00bfNo ser\u00eda bueno tener una forma de declarar este conjunto restringido de valores posibles de una manera clara y autodocumentada? Ah\u00ed es exactamente donde las enumeraciones, o Enums, como se las suele llamar, vienen al rescate.</p> <p>Las enumeraciones han sido parte de muchos lenguajes de programaci\u00f3n durante a\u00f1os y \u00a1me dieron mucha envidia! Permiten definir un tipo que est\u00e1 restringido a un conjunto espec\u00edfico de valores, lo que mejora tanto la claridad como la seguridad. Para los desarrolladores de PHP, la gran noticia es que a partir de PHP 8.1, las enumeraciones ahora son parte del n\u00facleo de PHP. S\u00ed, \u00a1lo escuchaste bien! PHP ahora ofrece soporte integrado para enumeraciones. \ud83c\udf89</p>"},{"location":"extra/03/03.1.enumerados_avanzado.html#una-breve-historia-de-las-enumeraciones-en-php","title":"Una breve historia de las enumeraciones en PHP","text":"<p>Antes de PHP 8.1, PHP no ten\u00eda compatibilidad integrada con enumeraciones. Si bien esta falta de enumeraciones no imped\u00eda que los desarrolladores escribieran c\u00f3digo, s\u00ed significaba que PHP carec\u00eda de una herramienta que se encuentra en muchos otros lenguajes y que puede hacer que la codificaci\u00f3n sea m\u00e1s segura y eficiente.</p> <p>Sin enumeraciones integradas, los desarrolladores tuvieron que usar otras construcciones para representar un conjunto de valores posibles, recurriendo a menudo a constantes de clase, matrices o, a veces, simplemente cadenas o n\u00fameros enteros.</p> <p>Sin embargo, esto podr\u00eda dar lugar a posibles errores y a menudo dar como resultado un c\u00f3digo que no era tan claro como podr\u00eda ser.</p> <p>La introducci\u00f3n de enumeraciones en PHP 8.1 ha sido una adici\u00f3n significativa al lenguaje.</p> <p>La implementaci\u00f3n de enumeraciones en PHP es m\u00e1s poderosa que la de muchos otros lenguajes, ya que las enumeraciones en PHP no son simplemente valores enteros o de cadena bajo el cap\u00f3.</p> <p>En PHP, una enumeraci\u00f3n es un tipo especial de objeto, y los casos en que la enumeraci\u00f3n es un objeto de instancia \u00fanica de esa clase.</p> <p>Esto significa que puedes usar enumeraciones en cualquier lugar donde puedas usar un objeto, lo que las hace extremadamente vers\u00e1tiles.</p> <p>La adici\u00f3n de enumeraciones a PHP significa la evoluci\u00f3n continua del lenguaje para incorporar conceptos y paradigmas de programaci\u00f3n m\u00e1s modernos, aumentando su eficiencia y permitiendo a los desarrolladores escribir c\u00f3digo m\u00e1s limpio y seguro.</p>"},{"location":"extra/03/03.1.enumerados_avanzado.html#conceptos-basicos-de-los-enumerados-en-php","title":"Conceptos b\u00e1sicos de los enumerados en PHP","text":"<p>Para desentra\u00f1ar los conceptos b\u00e1sicos de las enumeraciones en PHP, decid\u00ed utilizar el mundo m\u00e1gico de Harry Potter.</p> <p>Imaginemos que estamos programando para el Colegio Hogwarts de Magia y Hechicer\u00eda, donde cada nuevo estudiante debe ser asignado a una casa por el Sombrero Seleccionador virtual.</p> <p>En Hogwarts solo hay cuatro casas: Gryffindor, Hufflepuff, Ravenclaw y Slytherin.</p> <p>Entonces, podr\u00edamos representar esto como una enumeraci\u00f3n en PHP.</p> <p>As\u00ed es como se declara una enumeraci\u00f3n:</p> <pre><code>enum House\n{\n    case Gryffindor;\n    case Hufflepuff;\n    case Ravenclaw;\n    case Slytherin;\n}\n</code></pre> <p>En este ejemplo, <code>House</code> es el nombre de la enumeraci\u00f3n, y <code>Gryffindor</code>, <code>Hufflepuff</code>, <code>Ravenclaw</code> y <code>Slytherin</code> son los casos posibles de la enumeraci\u00f3n.</p> <p>Vamos a crear una Studentclase donde cada estudiante posee una <code>$house</code> propiedad.</p> <pre><code>class Student\n{\n    public ?House $house = null;\n}\n</code></pre> <p>Tambi\u00e9n tenemos una SortingHatclase con un sortm\u00e9todo.</p> <p>Este m\u00e9todo acepta una sugerencia de casa o asigna una casa al azar al estudiante.</p> <p>\u00a1Al igual que en Harry Potter, el Sombrero Seleccionador tom\u00f3 en cuenta la elecci\u00f3n de Harry!</p> <p><pre><code>class SortingHat\n{   \n    public function sort(Student $student, ?House $suggestedHouse = null)\n    {\n        if ($suggestedHouse) {\n            $student-&gt;house = $suggestedHouse;\n\n            return;\n        }\n\n        $houses = [\n            House::Gryffindor,\n            House::Hufflepuff,\n            House::Ravenclaw,\n            House::Slytherin,\n        ];\n\n        $index = array_rand($houses);\n\n        $student-&gt;house = $houses[$index];\n    }\n}\n</code></pre> Como puedes ver, hemos limitado los valores de la <code>$suggestedHouse</code> variable y <code>$house</code> la propiedad para que solo sean una de las cuatro casas de Hogwarts que usan la Houseenumeraci\u00f3n, si por el contrario ese tipo fuera <code>string</code> o <code>int</code> podr\u00edamos asignar cualquier valor, con el riesgo de que no sea una casa de Hogwarts \ud83d\ude22.</p> <p>Si intentara clasificar a un estudiante en una casa inexistente, PHP lo detectar\u00eda y no se ejecutar\u00eda.</p> <p>\u00a1\u00c9sa es la magia de las enumeraciones!</p> <p>En este escenario, las casas de Hogwarts sin datos asociados se denominan \u201cCasos Puros\u201d, y una enumeraci\u00f3n que contiene solo Casos Puros, como nuestra Enumeraci\u00f3n de Casas, se denomina \u201cEnumeraci\u00f3n Pura\u201d.</p>"},{"location":"extra/03/03.1.enumerados_avanzado.html#emumerados-puros-frente-a-enumerados-con-datos-asociados","title":"Emumerados puros frente a Enumerados con datos asociados","text":"<p>Las enumeraciones con datos asociados por un valor escalar. Por eso se las considera \"no puras\".</p> <p>A modo de recordatorio, un valor escalar en PHP es de tipo bool, float, into string.</p> <p>Un ejemplo:</p> <p><pre><code>&lt;?php\n\nenum House: string\n{\n    case Gryffindor = 'Gryffindor';\n    case Hufflepuff = 'Hufflepuff';\n    case Ravenclaw = 'Ravenclaw';\n    case Slytherin = 'Slytherin';\n}\n</code></pre> Como puede ver, definimos el tipo que <code>respalda</code> la enumeraci\u00f3n  string en ese caso) y asignamos un valor a cada caso. No podr\u00eda ser m\u00e1s simple que eso. Pero, \u00bfpor qu\u00e9 usar\u00eda enumeraciones con tipo de datos asociado?</p> <p>He aqu\u00ed un gran caso de uso:</p> <pre><code>$house = 'Gryffindor';\n\n$student = new Student(\n    House::from($house)\n);\n\nvar_dump($student);\n// object(Student) {\n//   [\"house\"]=&gt;\n//   enum(House::Gryffindor)\n// }\n</code></pre> <p>En este ejemplo:</p> <ol> <li>Pretendemos que hemos obtenido datos de una base de datos e intentamos crear un nuevo <code>Student</code> objeto.</li> <li>Inicializamos la <code>$house</code> propiedad con el <code>House::from()</code> m\u00e9todo est\u00e1tico a partir de un valor de cadena (ya que House ahora es una enumeraci\u00f3n respaldada de tipo string).</li> <li>Si esto falla, se lanza una excepci\u00f3n. (Uncaught ValueError: \"XXX\" is not a valid backing value for enum \"House\")</li> </ol> <p>En algunos casos, en lugar de generar una excepci\u00f3n, es posible que desees recurrir a un valor predeterminado. Aqu\u00ed te mostramos c\u00f3mo puedes hacerlo con el <code>House::tryFrom()</code> m\u00e9todo est\u00e1tico, que retorna nullen caso de falla.</p> <pre><code>$student = new Student(\n    House::tryFrom('Slytherin') ?? House::Gryffindor\n);\n</code></pre>"},{"location":"extra/03/03.1.enumerados_avanzado.html#listando-valores-de-un-enumerado","title":"Listando valores de un Enumerado","text":"<p>En el ejemplo anterior se vi\u00f3 que sin sugerencia del estudiante se asigna una casa al azar.</p> <p>Sin embargo, lo que me molesta del ejemplo que proporcion\u00e9 es que enumeramos manualmente los posibles valores de HouseEnum para construir nuestra matriz.</p> <p>\u00a1Afortunadamente, todas las enumeraciones tienen un cases() m\u00e9todo que puede hacer que nuestro c\u00f3digo sea m\u00e1s flexible!</p> <p><pre><code>class SortingHat\n{   \n    public function sort(Student $student, ?House $suggestedHouse = null)\n    {\n        if ($suggestedHouse) {\n            $student-&gt;house = $suggestedHouse;\n\n            return;\n        }\n\n        //Aqui tenemos que construir la matriz de valores posibles de la enumeraci\u00f3n, pero no es necesario enumerarlos manualmente\n      $houses = [\n          House::Gryffindor,\n          House::Hufflepuff,\n          House::Ravenclaw,\n          House::Slytherin,\n      ];\n\n      //Con el m\u00e9todo cases() podemos obtener los valores posibles de la enumeraci\u00f3n\n        $houses = House::cases();\n\n      $index = array_rand($houses);\n      $student-&gt;house = $houses[$index];\n    }\n}\n</code></pre> Bastante ordenado, \u00bfverdad?</p>"},{"location":"extra/03/03.1.enumerados_avanzado.html#un-vistazo-mas-profundo-a-las-enumeraciones-en-php-y-su-comparacion-con-clases","title":"Un vistazo m\u00e1s profundo a las enumeraciones en PHP y su comparaci\u00f3n con clases","text":"<p>En nuestro viaje con PHP Enums hasta ahora, es posible que hayas notado que son similares a las clases.</p> <p>Pueden tener espacios de nombres, implementar <code>interfaces</code>, usar <code>traits</code> y tambi\u00e9n se pueden cargar autom\u00e1ticamente de la misma manera.</p> <p>Pero, por supuesto, tambi\u00e9n existen algunas diferencias significativas entre las clases PHP y las enumeraciones.</p> <p>Repasemos nuestro ejemplo m\u00e1gico de Harry Potter para entender estas diferencias.</p> <p>Cuando el <code>Sombrero Seleccionador</code> asigna a un estudiante a una casa, sabemos que la casa siempre ser\u00e1 una de las cuatro opciones predefinidas: <code>Gryffindor, Hufflepuff, Ravenclawo Slytherin</code>.</p> <p>No existen otras posibilidades en el contexto de Hogwarts. Este escenario es perfecto para las enumeraciones.</p> <p>Una enumeraci\u00f3n, como House, es un tipo de datos \u00fanico que comprende un conjunto de constantes predefinidas.</p> <p>Significa que una variable s\u00f3lo puede tener una de estas constantes predefinidas y nada m\u00e1s.</p> <p>Por ejemplo, la <code>$house</code> propiedad de la <code>Student</code> clase solo puede contener una de las cuatro opciones de casa definidas en la House enumeraci\u00f3n.</p> <pre><code>class Student\n{\n    public ?House $house = null;\n}\n</code></pre> <p>Por el contrario, las clases en PHP, como nuestra Student clase, pueden contener una variedad de propiedades diferentes y pueden instanciarse varias veces con diferentes valores de propiedad.</p> <p>Las enumeraciones, por otro lado, no se pueden instanciar y se utilizan para definir un conjunto fijo y limitado de instancias.</p> <p>Otra diferencia est\u00e1 en la forma en que comparamos clases y enumeraciones.</p> <p>En PHP, las enumeraciones se comparan por su identidad, no por sus valores.</p> <p>Veamos un ejemplo:</p> <pre><code>$a = House::Gryffindor;\n$b = House::Gryffindor;\n\nvar_dump($a === $b); // bool(true)\n</code></pre> <p>En este ejemplo, <code>$a</code> y <code>$b</code> son la misma House instancia de Enum, por lo que tambi\u00e9n <code>$a === $b</code> lo es true.</p> <p>Las comparaciones que utilizan operadores menor que <code>&lt;</code> o mayor que <code>&gt;</code> no son significativas para los objetos Enum y siempre devolver\u00e1n falso.</p> <p>Los casos de enumeraci\u00f3n en PHP tienen una propiedad especial llamada <code>name</code>, que es el nombre del caso en s\u00ed, que distingue entre may\u00fasculas y min\u00fasculas. Esto puede resultar \u00fatil cuando se desea imprimir el nombre del caso de enumeraci\u00f3n.</p> <pre><code>echo House::Gryffindor-&gt;name; // Prints \"Gryffindor\".\n</code></pre>"},{"location":"extra/03/03.1.enumerados_avanzado.html#trabajar-con-metodos-de-enumeracion","title":"Trabajar con m\u00e9todos de enumeraci\u00f3n","text":"<p>Ahora que hemos explorado c\u00f3mo se pueden comparar las enumeraciones y sus diferencias con las clases, es hora de profundizar y explorar los m\u00e9todos de enumeraci\u00f3n en enumeraciones PHP.</p> <p>Al igual que las clases, las enumeraciones en PHP pueden contener m\u00e9todos.</p> <p>Veamos c\u00f3mo podemos utilizar esta funci\u00f3n utilizando nuestro escenario de clasificaci\u00f3n de Harry Potter.</p> <p><pre><code>enum House\n{\n    case Gryffindor;\n    case Hufflepuff;\n    case Ravenclaw;\n    case Slytherin;\n\n    public function getHouseColors() : array\n    {\n        return match($this) {\n            House::Gryffindor =&gt; ['Red', 'Gold'],\n            House::Hufflepuff =&gt; ['Yellow', 'Black'],\n            House::Ravenclaw =&gt; ['Blue', 'Bronze'],\n            House::Slytherin =&gt; ['Green', 'Silver'],\n        };\n    }\n}\n\nvar_dump(House::Gryffindor-&gt;getHouseColors());\n// array(2) {\n//   [0]=&gt;\n//   string(3) \"Red\"\n//   [1]=&gt;\n//   string(4) \"Gold\"\n// }\n</code></pre> En el mundo m\u00e1gico de Hogwarts, cada casa tiene sus colores. En nuestro ejemplo anterior, hemos a\u00f1adido un <code>getHouseColor()</code> m\u00e9todo a nuestra House enumeraci\u00f3n para devolver el color de cada casa.</p> <p>Cuando se define un m\u00e9todo dentro de una enumeraci\u00f3n, la <code>$this</code> variable se define y hace referencia a la instancia del caso.</p>"},{"location":"extra/03/03.1.enumerados_avanzado.html#los-enumerados-puden-usar-traits-e-implementar-interfaces","title":"Los Enumerados puden usar Traits e implementar interfaces","text":"<p>Al igual que las clases, las enumeraciones pueden usar <code>traits</code>. Esto es genial cuando hay muchos m\u00e9todos y necesitas dividirlos en varios archivos para mantener el c\u00f3digo m\u00e1s ordenado.</p> <p>Sin embargo, existen algunas restricciones:</p> <ul> <li>No puedes tener propiedades.</li> <li>No puedes anular los m\u00e9todos de enumeraciones (como <code>values()</code>).</li> </ul> <pre><code>trait Colors\n{\n    public function getHouseColors() : array\n    {\n        return match($this) {\n            House::Gryffindor =&gt; ['Red', 'Gold'],\n            House::Hufflepuff =&gt; ['Yellow', 'Black'],\n            House::Ravenclaw =&gt; ['Blue', 'Bronze'],\n            House::Slytherin =&gt; ['Green', 'Silver'],\n        };\n    }\n}\n\nenum House\n{\n    use Colors;\n\n    case Gryffindor;\n    case Hufflepuff;\n    case Ravenclaw;\n    case Slytherin;\n}\n</code></pre> <p>Al igual que los <code>Traits</code> en las clases, las interfaces tambi\u00e9n se pueden implementar en enumeraciones. Es dif\u00edcil encontrar un ejemplo concreto para este caso de uso, pero aqu\u00ed lo tienes de todos modos:</p> <pre><code>interface HasColors\n{\n    public function getHouseColors() : array;\n}\n\nenum House implements HasColors\n{\n    case Gryffindor;\n    case Hufflepuff;\n    case Ravenclaw;\n    case Slytherin;\n\n    public function getHouseColors() : array\n    {\n        return match($this) {\n            House::Gryffindor =&gt; ['Red', 'Gold'],\n            House::Hufflepuff =&gt; ['Yellow', 'Black'],\n            House::Ravenclaw =&gt; ['Blue', 'Bronze'],\n            House::Slytherin =&gt; ['Green', 'Silver'],\n        };\n    }\n}\n</code></pre>"},{"location":"extra/03/03.1.enumerados_avanzado.html#que-pasa-con-las-enumeraciones-en-php-7-e-incluso-en-versiones-anteriores","title":"\u00bfQu\u00e9 pasa con las enumeraciones en PHP 7 e incluso en versiones anteriores?","text":"<p>Antes de la introducci\u00f3n de las enumeraciones nativas en PHP 8.1, las enumeraciones se manejaban en PHP de diferentes maneras, ninguna de las cuales era particularmente elegante o confiable. Estas son algunas de las estrategias m\u00e1s comunes:</p> <ul> <li> <p>Constantes de clase: quiz\u00e1s la forma m\u00e1s com\u00fan de implementar enumeraciones fue mediante constantes de clase. A continuaci\u00f3n, se muestra un ejemplo:     <pre><code>class House\n{\n    const Gryffindor = 'Gryffindor';\n    const Hufflepuff = 'Hufflepuff';\n    const Ravenclaw = 'Ravenclaw';\n    const Slytherin = 'Slytherin';\n}\n</code></pre></p> <p>De esta manera, podr\u00edas hacer referencia a un valor de enumeraci\u00f3n con House::Gryffindor, por ejemplo. Este enfoque proporciona una forma de agrupar constantes relacionadas, pero no proporciona ninguna de las funciones o seguridad de tipos que las enumeraciones verdaderas podr\u00edan ofrecer (porque las constantes de clase no se pueden tipificar y marcar como de solo lectura).</p> </li> <li> <p>Matrices: otra forma com\u00fan de implementar enumeraciones fue mediante matrices.      <pre><code>$houses = [\n    'Gryffindor',\n    'Hufflepuff',\n    'Ravenclaw',\n    'Slytherin',\n];\n</code></pre>     Sin embargo, este m\u00e9todo tambi\u00e9n carece de los beneficios de las enumeraciones verdaderas, como la seguridad de tipos y el autocompletado.</p> </li> <li> <p>SplEnum : PHP sol\u00eda tener una clase SplEnum incorporada, que formaba parte de la biblioteca est\u00e1ndar de PHP (SPL). Sin embargo, no se adopt\u00f3 ampliamente debido a sus problemas de rendimiento y requer\u00eda la extensi\u00f3n SPL Types, que no ven\u00eda incluida con PHP y se consideraba experimental.     <pre><code>class House extends SplEnum\n{\n    const Gryffindor = 'Gryffindor';\n    const Hufflepuff = 'Hufflepuff';\n    const Ravenclaw = 'Ravenclaw';\n    const Slytherin = 'Slytherin';\n}\n</code></pre>     Esta clase se elimin\u00f3 en PHP 7.0, por lo que ya no se utiliza.</p> </li> <li> <p>Paquetes de terceros: tambi\u00e9n hay varios paquetes que proporcionan funcionalidad de enumeraci\u00f3n, como myclabs/php-enum . Estos suelen proporcionar m\u00e1s funciones que las constantes de clase o matrices simples, como m\u00e9todos para enumerar todos los valores posibles, convertir a/desde cadenas, etc.     <pre><code>use MyCLabs\\Enum\\Enum;\n\nclass House extends Enum\n{\n    const Gryffindor = 'Gryffindor';\n    const Hufflepuff = 'Hufflepuff';\n    const Ravenclaw = 'Ravenclaw';\n    const Slytherin = 'Slytherin';\n}\n</code></pre></p> </li> </ul> <p>A pesar de estas soluciones alternativas, ninguna de ellas podr\u00eda proporcionar el conjunto completo de caracter\u00edsticas que las enumeraciones verdaderas pueden ofrecer, como seguridad de tipos, optimizaci\u00f3n del rendimiento y funcionalidad como obtener todos los valores posibles.</p> <p>Es por esto que la incorporaci\u00f3n de enumeraciones nativas en PHP 8.1 fue una mejora tan importante para el lenguaje.</p>"},{"location":"extra/guias/01.php_multiversion_manual.html","title":"PHP: M\u00faltiples versiones en un mismo PC","text":"<p>En numerosas ocasiones, necesitamos tener varias versiones de PHP en nuestro PC. Por ejemplo, si estamos desarrollando una aplicaci\u00f3n que debe ser compatible con PHP 5.6 y PHP 7.0, necesitaremos tener ambas versiones instaladas en nuestro PC.</p> <p>En este tutorial, vamos a ver c\u00f3mo instalar varias versiones de PHP en un mismo PC.</p>"},{"location":"extra/guias/01.php_multiversion_manual.html#instalar-en-windows","title":"Instalar en Windows","text":"<p>En Windows, podemos instalar varias versiones de PHP de forma sencilla. Para ello, podemos descargar los binarios de PHP desde la p\u00e1gina oficial de PHP. En esta p\u00e1gina, podemos encontrar los binarios de PHP para Windows.</p> <p>\ud83d\udca1 Siempre es aconsejable tener una ubicaci\u00f3n en mi PC dentro de la <code>home</code> del usuario, para evitar errores de permisos en la ejecuci\u00f3n de PHP. Para esta gu\u00eda vamos a crear una carpeta, <code>tools</code>, en la la home del usuario, por ejemplo, <code>C:\\Users\\miusuario\\tools\\php</code>.</p> <p>Instalar PHP 7.4</p> <p>Para instalar PHP 7.4 en Windows, podemos seguir los siguientes pasos:</p> <ol> <li>Descargar los binarios de PHP 7.4 desde la p\u00e1gina oficial de PHP.</li> <li>Descomprimir los binarios en una carpeta, por ejemplo, <code>...\\tools\\php\\7.4</code>.</li> </ol> <p>Instalar PHP 8.1</p> <p>Para instalar PHP 8.1 en Windows, podemos seguir los siguientes pasos:</p> <ol> <li>Descargar los binarios de PHP 8.1 desde la p\u00e1gina oficial de PHP.</li> <li>Descomprimir los binarios en una carpeta, por ejemplo, <code>...\\tools\\php\\8.1</code>.</li> </ol>"},{"location":"extra/guias/01.php_multiversion_manual.html#configurar-las-variables-de-entorno","title":"Configurar las variables de entorno","text":"<p>Para poder ejecutar PHP desde la l\u00ednea de comandos, necesitamos configurar las variables de entorno. Para ello, podemos seguir los siguientes pasos:</p> <ol> <li>Abrir el editor de variables de entorno.</li> <li>En las variables de usuario, a\u00f1adir la variable <code>PHP_HOME</code> con el valor de la ruta de la carpeta de PHP, por ejemplo, <code>C:\\Users\\miusuario\\tools\\php\\7.4</code>.</li> <li>A\u00f1adir a la variable <code>PATH</code> la ruta, con el valor <code>%PHP_HOME%</code>.</li> </ol> <p>Ahora, para que la configuraci\u00f3n sea efectiva, debemos cerrar y abrir la consola de comandos. Si no funciona, podemos cerrar la sesi\u00f3n del usuario.</p> <p>Probar la configuraci\u00f3n</p> <p>Ahora podemos ejecutar PHP desde la l\u00ednea de comandos. Para ello, podemos abrir una consola de comandos y ejecutar el siguiente comando:</p> <pre><code>php --version\n</code></pre> <p>Y debe mostrar la versi\u00f3n php 7.4 (en este caso)</p> <p>Cambiar de versi\u00f3n</p> <p>Si queremos cambiar de versi\u00f3n, podemos cambiar la variable <code>PHP_HOME</code> a la ruta de la carpeta de la versi\u00f3n que queremos usar. Por ejemplo, si queremos usar PHP 8.1, podemos cambiar la variable <code>PHP_HOME</code> a la ruta de la carpeta de PHP 8.1, por ejemplo, <code>C:\\Users\\miusuario\\tools\\php\\8.1</code>.</p> <p>Podemos probar que el cambio ha funcionando, simplemente cerrando la consola de comandos y abri\u00e9ndola de nuevo.</p> <pre><code>php --version\n</code></pre> <p>Y debe mostrar la versi\u00f3n php 8.1 (en este caso)</p>"},{"location":"extra/guias/01.php_multiversion_manual.html#automatizar-el-cambio-de-version","title":"Automatizar el cambio de versi\u00f3n","text":"<p>Para cambiar de versi\u00f3n de PHP de forma autom\u00e1tica, vamos a crear una carpeta <code>default</code> y esta apuntar\u00e1, mediante un enlace simb\u00f3lico, a la versi\u00f3n de PHP que queremos usar por defecto.</p> <p>Por ejemplo, si queremos que la versi\u00f3n por defecto sea PHP 7.4, podemos crear un enlace simb\u00f3lico de la siguiente forma:</p> <pre><code>cd %userprofile%\\tools\\php\nrm default\nmklink /D %userprofile%\\tools\\php\\default %userprofile%\\tools\\php\\7.4\n</code></pre> <p>Y guardar el script en un archivo <code>.bat</code> con el nombre php74.bat, dentro de la carpeta <code>tools</code>.</p> <p>Para la versi\u00f3n, PHP 8.1, podemos crear otro script con el nombre php81.bat, con el siguiente contenido:</p> <pre><code>cd %userprofile%\\tools\\php\nrm default\nmklink /D %userprofile%\\tools\\php\\default %userprofile%\\tools\\php\\8.1\n</code></pre>"},{"location":"extra/guias/01.php_multiversion_manual.html#cambiar-de-version-de-php","title":"Cambiar de versi\u00f3n de PHP","text":"<p>Para cambiar de versi\u00f3n de PHP, simplemente debemos ejecutar el script correspondiente, a la versi\u00f3n que queramos usar. Por ejemplo, si queremos usar PHP 8.1, podemos ejecutar el script <code>php81.bat</code>.</p> <p>\ud83d\udca1 IMPORTANTE: Se debe ejecutar el script en la consola de comandos, con permisos de administrador.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html","title":"Configuraci\u00f3n entorno desarrollo PHP con Laravel Herd","text":"<p>Laravel Herd es una nueva opci\u00f3n disponible (2024) para facilitarnos la configuraci\u00f3n del entorno de desarrollo para PHP.</p> <p>El nivel de sofisticaci\u00f3n de la configuraci\u00f3n grande, utilizando Docker o otras herramientas m\u00e1s avanzadas, pero a un usuario principiante esto puede ser muy intimidante y dif\u00edcil de configurar.</p> <p>Las herramientas existentes son:</p> <ul> <li>XAMP: Antigua, sin soporte y sin actualizaciones hace tiempo.</li> <li>DevilBox (Docker). Funciona sobre Docker y est\u00e1 tambi\u00e9n obsoleta.</li> <li>Laragon:  Alternativa muy buena sobre Windows, mejora mucho a XAMP.</li> <li>Valet (para MacOS)</li> </ul> <p>\u00bfQu\u00e9 se necesita para desarrollar PHP?</p> <ul> <li>PHP. Instalar el interprete de PHP (hay diferentes versiones).</li> <li>Servidor Web. (Apache, Nginx, ...) no es necesario al principio, pero para desarrollos m\u00e1s grandes es necesario.</li> <li>Base de datos. (MySQL, MariaDB, SQLite, ...)</li> <li>Otros servicios: Mail, Redis, ...</li> </ul> <p>Aparte de estos otras caracter\u00edsticas son deseables:</p> <ul> <li>Depuraci\u00f3n e integraci\u00f3n con los principales IDEs (PHPStorm, VSCode).</li> <li>Gesti\u00f3n autom\u00e1ticas de Sitios. (facilitad administraci\u00f3n de m\u00faltiples proyectos).</li> <li>Acceso con DNS. (nombre de dominio local), por ejemplo myproyecto.test. </li> <li>Visualizaci\u00f3n de Logs, monitorizaci\u00f3n de peticiones, volcados con dump...</li> </ul>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#recursos","title":"Recursos","text":"<ul> <li>Laravel Herd</li> <li>XDebug</li> <li>Depurando en PHPStrom 2024 con Laravel Herd sin ser PRO</li> </ul>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#laravel-herd","title":"Laravel Herd","text":"<p>Laravel Herd</p> <p>Como su nombre indica <code>Laravel</code> ya nos dice para qu\u00e9 est\u00e1 principalmente pensado, y efectivamente, para trabajar con el framework Laravel, pero no por eso no lo podemos utilizar fuera de este framework, y en proyectos menores.</p> <p>Herd es una herramienta que nos permite configurar un entorno de desarrollo para PHP, con las caracter\u00edsticas que hemos mencionado anteriormente.</p> <p>Laravel Herd ofrece un interfaz muy completo, con una interfaz gr\u00e1fica que nos permite gestionar los proyectos, las versiones de PHP, los servicios, etc. Todo desde un \u00fanico lugar. Adem\u00e1s tambi\u00e9n ofrece un <code>sercicio</code> y una <code>CLI</code> para gestionar los proyectos. </p> <p>Sus principales caracter\u00edsticas son:</p> <ul> <li>Configuraci\u00f3n sencilla: Se instala con un solo comando.</li> <li>Gesti\u00f3n de m\u00faltiples proyectos: Podemos tener varios proyectos y cambiar entre ellos.</li> <li>Gesti\u00f3n versiones de PHP: Descarga, actualiza y cambia de versi\u00f3n de PHP. Elige qu\u00e9 versi\u00f3n de PHP utilizar para cada proyecto.</li> <li>Control de otros servicios con facilidad: MySQL, Redis, ... desde su consola se puede gestionar la mayoria de los servios que incluye, y otros que podemos incorporar.</li> <li>Ficheros de Log: Visualizaci\u00f3n de logs de los servicios.</li> <li>Integraci\u00f3n muy sencilla con XDebug: Depuraci\u00f3n con XDebug de forma muy sencilla.</li> </ul> <p>Aunque es una herramienta de Pago, ofrece una capa gratuita muy importante y suficiente para utilizarla en proyectos peque\u00f1os.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Laravel Herd est\u00e1 disponible para MacOS y Windows.</p> <p>La instalaci\u00f3n depende del SO, y se puede encontrar en la p\u00e1gina oficial de Laravel Herd.</p> <ul> <li>Instalaci\u00f3n para Windows</li> <li>Instalaci\u00f3n para MacOS</li> </ul>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#uso-basico","title":"Uso b\u00e1sico","text":""},{"location":"extra/guias/02.config_devenv_laravel_herd.html#sitios","title":"Sitios","text":"<p>Herd utiliza el concepto de rutas aparcadas y directorios vinculados para ofrecer servicios a los sitios. Puede acceder a todos los sitios en una ruta aparcada a trav\u00e9s de <code>http://&lt;directory-name&gt;.test</code>. De forma predeterminada, Herd aparcar\u00e1 autom\u00e1ticamente el <code>%USERPROFILE%\\Herd</code>directorio por usted. Cualquier aplicaci\u00f3n PHP en este directorio est\u00e1 disponible autom\u00e1ticamente a trav\u00e9s de su <code>.test</code>dominio. Si tiene otras ubicaciones para sus proyectos, puede agregarlas como rutas aparcadas en la configuraci\u00f3n general o vincular proyectos individuales como un directorio vinculado.</p> <p>Un sitio se puede crear bien a trav\u00e9s de comandos, o m\u00e1s f\u00e1cil a trav\u00e9s de su interfaz, donde paso a paso le indicamos:</p> <ul> <li>Nombre del proyecto.</li> <li>Directorio donde se encuentra.</li> <li>Versi\u00f3n de PHP.</li> </ul> <p>Y con esto nos crea un <code>sitio</code> que podemos acceder a trav\u00e9s de un dominio local. <code>http://&lt;nombre-proyecto&gt;.test</code>.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#versiones-de-php","title":"Versiones de PHP","text":"<p>Desde su interfaz tambi\u00e9n podemos revisar, instalar/actualizar, activar/desactivar, y eliminar las diferentes versiones de PHP.</p> <p>Adem\u00e1s de poder indicar a nivel de proyecto qu\u00e9 versi\u00f3n de PHP utilizar.</p> <p>Todo en uno, y muy f\u00e1cil de trabajar.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#control-servicios","title":"Control Servicios","text":"<p>Desde la interfaz, tambi\u00e9nn podemos parar, iniciar y reiniciar los servicios, todos a la vez o de forma individual.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#debug-con-xdebug-en-phpstorm","title":"Debug con XDebug en PHPStorm","text":"<p>Esto es una de las principales ventajas que nos permite y facilita Laravel Herd, pero es una opci\u00f3n de pago. Pero se puede solucionar con algo de trabajo.</p> <p>Puntos clave:</p> <ul> <li>Configurar XDebug en la versi\u00f3n de PHP espec\u00edfica.</li> <li>Indicar a PHP qu\u00e9 interprete utilizar y que conincida con el proyecto a depurar.</li> <li>Configurar PHPStorm para que escuche las peticiones de XDebug.</li> <li>Configurar el sitio en Laravel Herd con https (punto opcional pero importante).</li> </ul> <p>En la siguiente gu\u00eda, nos indica paso a paso, pero aqu\u00ed lo veremos de forma resumida.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#instalacion-de-xdebug-sin-laravel-herd","title":"Instalaci\u00f3n de XDebug sin Laravel Herd","text":"<p>XDebug es un binario que se instala en la versi\u00f3n de PHP que estamos utilizando. Laravel Herd ya lo tiene instalado, pero si no lo tuviera, se puede instalar con el siguiente comando:</p> <pre><code>herd php:install xdebug\n</code></pre> <p>En caso de que lo queramos instalar de forma independiente directamente descargandolo de su Web, depender\u00e1 de la SO que estemos utilizando.</p> <p>Windows</p> <p>Si es Windows, es sencillo, descargamos el binario y lo copiamos en la carpeta de extensiones de PHP. La ubicaci\u00f3n de esta carpeta depender\u00e1 de la versi\u00f3n de PHP que estemos utilizando.</p> <p>Para saber qu\u00e9 versi\u00f3n de XDebug hay que descargar, podemos utilizar la herramienta que nos ofrece la p\u00e1gina de XDebug, que nos indica qu\u00e9 versi\u00f3n de XDebug necesitamos para nuestra versi\u00f3n de PHP.</p> <ol> <li>Abrir la p\u00e1gina de XDebug</li> <li>Copiar el contenido de <code>phpinfo()</code> en la p\u00e1gina, o a trav\u00e9s del comando <code>php -i</code> en la consola.</li> <li>Pegar el contenido en la p\u00e1gina y nos indicar\u00e1 qu\u00e9 versi\u00f3n de XDebug necesitamos.</li> </ol> <p>Linux</p> <p>En Linux, la instalaci\u00f3n es un poco m\u00e1s complicada, pero no mucho. Se puede instalar a trav\u00e9s de <code>pecl</code> o <code>apt-get</code> seg\u00fan la distribuci\u00f3n que estemos utilizando.</p> <pre><code>sudo apt-get install php-xdebug\n</code></pre> <p>Para indicar una versi\u00f3n espec\u00edfica, se puede indicar con el nombre del paquete.</p> <pre><code>sudo apt-get install php-xdebug-8.3\n</code></pre>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#configuracion-xdebug","title":"Configuraci\u00f3n XDebug","text":"<p>XDebug es un binario, que es necesario descargar, pero que Laravel Herd ya lo tiene instalado por nosotros. </p> <p>Configurar php.ini</p> <p><code>php.ini</code> es el fichero donde se almacena la configuraci\u00f3n de PHP, y tiene muchas, muchas. Pero para nuestro caso, lo \u00fanico que necesitamos es configurar las siguientes:</p> <p>\ud83d\udca1 Consultala documentaci\u00f3n de XDebug, referente a depuraci\u00f3n paso a paso</p> <p>Opciones:</p> <ul> <li> <p>zend_extension= Ruta al binario de XDebug, en Herd est\u00e1 ubicado en la siguiente carpeta.\"C:\\Program Files\\Herd\\resources\\app.asar.unpacked\\resources\\bin\\xdebug\\xdebug-8.3.dll\" Cambiar a la versi\u00f3n de php espec\u00edfica seg\u00fan el ini.</p> </li> <li> <p>xdebug.mode: debug,develop. Indica el modo de depuraci\u00f3n. Debug es paso a paso.</p> </li> <li>xdebug.client_host=127.0.0.1 (Direcci\u00f3n de IP del IDE)</li> <li>xdebug.client_port=9003  (Puerto donde escucha el IDE)</li> </ul> <p>Estas son opciones, pero importantes:</p> <ul> <li>xdebug.idekey = PHPSTORM  (Indicando el IDE que estamos utilizando).</li> <li>xdebug.start_with_request=yes (Indica que se inicie con cada petici\u00f3n), si no se indica esto, se debe indicar en la URL <code>XDEBUG_SESSION_START=PHPSTORM</code>. Y esto es poco pr\u00e1ctico. Existe un plugin para Chrome y Firefox que nos facilita esto, pero que no suele funcionar muy bien en las \u00faltimas versiones.    MEjor soluci\u00f3n. Activar esta opci\u00f3n (yes), y controlar desde PHPStorm, si escuchamos las peticiones o no. Si la activamos cada petici\u00f3n se iniciar\u00e1 una sesi\u00f3n de depuraci\u00f3n, si no lo vamos a requerir o queremos desactivarlo, lo ponemos a <code>no</code>.</li> <li>xdebug.start_upon_error=yes  Si queremos que se activo o no sobre errores</li> </ul> <p>\ud83d\udca1 Una vez aplicado este cambio, es necesario reiniciar PHP. Esto lo podemos hacer desde la consola de Laravel Herd.</p> <p>Si no funciona, o no se activa, podemos indicar que xdebug nos muestra un log, indicando si se activa o no.</p> <ul> <li>xdebug.log = \"~.config\\herd\\Log\\xdebug.log\"  (La ruta puede ser cualquier y el nombre del fichero tambi\u00e9n.)</li> </ul> <p>Opciones a incluir en el fichero de configuraci\u00f3n de PHP.</p> <p><pre><code>;ruta del archivo xdebug. En Laravel Herd se encuentra en la siguiente ruta\nzend_extension=\"C:\\Program Files\\Herd\\resources\\app.asar.unpacked\\resources\\bin\\xdebug\\xdebug-8.3.dll\"\nxdebug.mode=debug,develop\n;Indica que se inicie bajo petici\u00f3n. Instalar plugin en el navegador para activar.\nxdebug.start_with_request=trigger\nxdebug.start_upon_error=no\n;opciones de depuraci\u00f3n\nxdebug.client_host=127.0.0.1  // IP del ordenador donde se ejecuta el software\nxdebug.client_port=9003   // Puerto de escucha del IDE\nxdebug.idekey = PHPSTORM  // IDE que estamos utilizando\nxdebug.control_socket=off  // Opcional\n;ruta del log de xdebug. Opcional. Configurar seg\u00fan necesidad.\nxdebug.log = \"~\\.config\\herd\\Log\\xdebug.log\"  // Opcional\n</code></pre> La clave del funcionamiento de XDebug, aparte de la configuraci\u00f3n anterior est\u00e1 en la opci\u00f3n:</p> <p>xdebug.start_with_request</p> <ul> <li>Si establecemos <code>xdebug.start_with_request=yes</code>, XDebug se activar\u00e1 con cada petici\u00f3n, y PHPStorm deber\u00e1 estar escuchando las peticiones.   Esto puede ser un problema, ya que si no queremos depurar, XDebug tendr\u00e1 un tiempo de espera, que ralentizar\u00e1 las peticiones.</li> <li>Si establecemos <code>xdebug.start_with_request=trigger</code>, XDebug se activar\u00e1 con una petici\u00f3n espec\u00edfica, que se puede activar con un plugin en el navegador.   El plugin del navegador, en Chrome utilizar este Plugin y en Firefox este Plugin.</li> <li>Si establecemos <code>xdebug.start_with_request=no</code>, XDebug no se activar\u00e1 con ninguna petici\u00f3n, y por tanto no podremos depurar.</li> </ul> <p>Configurar el Plugin</p> <p>Una vez instalado el plugin, simplemente tenemos que indicar si queremos depurar, activando la opci\u00f3n \"Debug\" en el plugin. Si no queremos depurar, simplemente desactivamos la opci\u00f3n.</p> <p>\ud83d\udea7 Problema con Herd: - En Laravel Herd, si activamos esta opci\u00f3n del Plugin nos aparecer\u00e1 un error \"502 Bad Gateway\". Esto ocurre en las versiones de Xdebug 3.3. - Para solucionarlo, en el fichero \"debug.conf\", dentro de la carpeta <code>%userprofile%\\.config\\herd\\config\\pro\\debug.conf</code> y cambiar la opci\u00f3n dependiendo de la versi\u00f3n de PHP que estemos utilizando.   La l\u00ednea a cambiar es la siguiente el puerto 9183, por 9083. Y esto soluciona el problema.    Si vuelve a ocurrir, ser\u00e1 necesario volverla a cambiar. <code>ini    map \"$xdebug_present\" $herd_sock {        default \"127.0.0.1:9083\";        \"~^debug$\" \"127.0.0.1:9083\";  //antes pon\u00eda 9183    }</code> \ud83d\udd25 En un futuro, no ser\u00e1 necesario... </p> <p>\u00bfC\u00f3mo funciona XDebug?</p> <p>XDebug debe comunicarse con el IDE en cuesti\u00f3n, y lo hace a trav\u00e9s de una IP y un puerto. Si estamos en la misma red, y mismo ordenador, es m\u00e1s f\u00e1cil.</p> <p>Una vez hemos configurado todo, nos vamos a PHPStorm.</p> <p>Configurar PHPStorm</p> <p>Esta configuraci\u00f3n es por proyecto, y se almacena dentro de la carpeta <code>.idea</code> que PHPStorm guarda en la carpeta del proyecto.</p> <p>Puntos importantes:</p> <ul> <li>En Settins, PHP, indicar el Interprete de PHP. En el punto Configuring PHPStorm indica c\u00f3mo hacerlo.</li> <li>Indicar <code>Start Listening for PHP Debug Connections</code>. Esto est\u00e1 disponible en el menu <code>Run</code> y tambi\u00e9n visible en la parte superior.</li> <li>Configurar el puerto, y las opciones de configuraci\u00f3n.</li> <li>Si parar en la primera l\u00ednea o no.</li> <li>Si escuchar conexiones externas o no.</li> </ul> <p>En nuestro caso, y con la configuraci\u00f3n de Laravel Herd, que se basa en un Ngix, necesitamos indicar lo siguiente en Settings\\PHP\\Debug:</p> <ul> <li>Debug port: 9003 (configurado en pho.ini)</li> <li>(Quitar) Force break at first line when no path mapping specified. (Si ya funciona quitar, si no, dejarlo).</li> <li>(Quitar) Force breat at first line when a script is outside the proyecto (Muy importante, para no depurar script fuera del proyecto)</li> </ul> <p>Tambi\u00e9n quitar <code>Break at first line in PHP scripts</code> para que se detenga en los <code>breakpoints</code> que indiquemos. (Si no, se parar\u00e1 en la primera l\u00ednea de nuestro Script.) Configurar esto seg\u00fan necesidad.</p>"},{"location":"extra/guias/02.config_devenv_laravel_herd.html#recursos_1","title":"Recursos","text":"<p>Abrir PHPStorm desde Laravel Herd</p> <p>Para que funcione es necesario configurar un protocolo, es decir, que Windows conozca que un enlace prefijado con un protocolo est\u00e1 enlzada a un programa espec\u00edfico.</p> <p>Para ello, seguir esta gu\u00eda.</p> <ul> <li>Abrir PHPStorm desde Laravel Herd</li> </ul> <p>Rutas a Laravel Herd</p> <ul> <li>ProgramFiles: C:\\Program Files\\Herd</li> <li>xUSuario: ~\\Herd  (General)</li> <li>xUSuario avanzada: ~.config\\herd</li> </ul> <p>En estas carpetas, estan las configuraciones de Herd, en la configuraci\u00f3n avanzada podemos tocar y revisar configuraciones m\u00e1s avanzadas que nos permiten configurar y revisar errores.</p>"}]}